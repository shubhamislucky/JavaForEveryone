<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:ns1="urn:oasis:names:tc:xliff:document:1.2">
    <attr format="reference" name="drawerArrowStyle"/>
    <attr format="dimension" name="height"/>
    <attr format="boolean" name="isLightTheme"/>
    <attr format="string" name="title"/>
    <bool name="abc_action_bar_embed_tabs">true</bool>
    <bool name="abc_action_bar_embed_tabs_pre_jb">false</bool>
    <bool name="abc_action_bar_expanded_action_views_exclusive">true</bool>
    <bool name="abc_allow_stacked_button_bar">true</bool>
    <bool name="abc_config_actionMenuItemAllCaps">true</bool>
    <bool name="abc_config_allowActionMenuItemTextWithIcon">false</bool>
    <bool name="abc_config_closeDialogWhenTouchOutside">true</bool>
    <bool name="abc_config_showMenuShortcutsWhenKeyboardPresent">false</bool>
    <color name="abc_input_method_navigation_guard">@android:color/black</color>
    <color name="abc_search_url_text_normal">#7fa87f</color>
    <color name="abc_search_url_text_pressed">@android:color/black</color>
    <color name="abc_search_url_text_selected">@android:color/black</color>
    <color name="accent_material_dark">@color/material_deep_teal_200</color>
    <color name="accent_material_light">@color/material_deep_teal_500</color>
    <color name="background_floating_material_dark">@color/material_grey_800</color>
    <color name="background_floating_material_light">@android:color/white</color>
    <color name="background_material_dark">@color/material_grey_850</color>
    <color name="background_material_light">@color/material_grey_50</color>
    <color name="bright_foreground_disabled_material_dark">#80ffffff</color>
    <color name="bright_foreground_disabled_material_light">#80000000</color>
    <color name="bright_foreground_inverse_material_dark">@color/bright_foreground_material_light</color>
    <color name="bright_foreground_inverse_material_light">@color/bright_foreground_material_dark</color>
    <color name="bright_foreground_material_dark">@android:color/white</color>
    <color name="bright_foreground_material_light">@android:color/black</color>
    <color name="button_material_dark">#ff5a595b</color>
    <color name="button_material_light">#ffd6d7d7</color>
    <color name="cardview_dark_background">#FF424242</color>
    <color name="cardview_light_background">#FFFFFFFF</color>
    <color name="cardview_shadow_end_color">#03000000</color>
    <color name="cardview_shadow_start_color">#37000000</color>
    <color name="design_fab_shadow_end_color">@android:color/transparent</color>
    <color name="design_fab_shadow_mid_color">#14000000</color>
    <color name="design_fab_shadow_start_color">#44000000</color>
    <color name="design_fab_stroke_end_inner_color">#0A000000</color>
    <color name="design_fab_stroke_end_outer_color">#0F000000</color>
    <color name="design_fab_stroke_top_inner_color">#1AFFFFFF</color>
    <color name="design_fab_stroke_top_outer_color">#2EFFFFFF</color>
    <color name="design_snackbar_background_color">#323232</color>
    <color name="design_textinput_error_color_dark">#FFFF6E6E</color>
    <color name="design_textinput_error_color_light">#FFD50000</color>
    <color name="dim_foreground_disabled_material_dark">#80bebebe</color>
    <color name="dim_foreground_disabled_material_light">#80323232</color>
    <color name="dim_foreground_material_dark">#ffbebebe</color>
    <color name="dim_foreground_material_light">#ff323232</color>
    <color name="foreground_material_dark">@android:color/white</color>
    <color name="foreground_material_light">@android:color/black</color>
    <color name="highlighted_text_material_dark">#6680cbc4</color>
    <color name="highlighted_text_material_light">#66009688</color>
    <color name="hint_foreground_material_dark">@color/bright_foreground_disabled_material_dark</color>
    <color name="hint_foreground_material_light">@color/bright_foreground_disabled_material_light</color>
    <color name="material_blue_grey_800">#ff37474f</color>
    <color name="material_blue_grey_900">#ff263238</color>
    <color name="material_blue_grey_950">#ff21272b</color>
    <color name="material_deep_teal_200">#ff80cbc4</color>
    <color name="material_deep_teal_500">#ff009688</color>
    <color name="material_grey_100">#fff5f5f5</color>
    <color name="material_grey_300">#ffe0e0e0</color>
    <color name="material_grey_50">#fffafafa</color>
    <color name="material_grey_600">#ff757575</color>
    <color name="material_grey_800">#ff424242</color>
    <color name="material_grey_850">#ff303030</color>
    <color name="material_grey_900">#ff212121</color>
    <color name="primary_dark_material_dark">@android:color/black</color>
    <color name="primary_dark_material_light">@color/material_grey_600</color>
    <color name="primary_material_dark">@color/material_grey_900</color>
    <color name="primary_material_light">@color/material_grey_100</color>
    <color name="primary_text_default_material_dark">#ffffffff</color>
    <color name="primary_text_default_material_light">#de000000</color>
    <color name="primary_text_disabled_material_dark">#4Dffffff</color>
    <color name="primary_text_disabled_material_light">#39000000</color>
    <color name="ripple_material_dark">#33ffffff</color>
    <color name="ripple_material_light">#1f000000</color>
    <color name="secondary_text_default_material_dark">#b3ffffff</color>
    <color name="secondary_text_default_material_light">#8a000000</color>
    <color name="secondary_text_disabled_material_dark">#36ffffff</color>
    <color name="secondary_text_disabled_material_light">#24000000</color>
    <color name="switch_thumb_disabled_material_dark">#ff616161</color>
    <color name="switch_thumb_disabled_material_light">#ffbdbdbd</color>
    <color name="switch_thumb_normal_material_dark">#ffbdbdbd</color>
    <color name="switch_thumb_normal_material_light">#fff1f1f1</color>
    <declare-styleable name="ActionBar"><attr name="navigationMode"><enum name="normal" value="0"/><enum name="listMode" value="1"/><enum name="tabMode" value="2"/></attr><attr name="displayOptions"><flag name="none" value="0"/><flag name="useLogo" value="0x1"/><flag name="showHome" value="0x2"/><flag name="homeAsUp" value="0x4"/><flag name="showTitle" value="0x8"/><flag name="showCustom" value="0x10"/><flag name="disableHome" value="0x20"/></attr><attr name="title"/><attr format="string" name="subtitle"/><attr format="reference" name="titleTextStyle"/><attr format="reference" name="subtitleTextStyle"/><attr format="reference" name="icon"/><attr format="reference" name="logo"/><attr format="reference" name="divider"/><attr format="reference" name="background"/><attr format="reference|color" name="backgroundStacked"/><attr format="reference|color" name="backgroundSplit"/><attr format="reference" name="customNavigationLayout"/><attr name="height"/><attr format="reference" name="homeLayout"/><attr format="reference" name="progressBarStyle"/><attr format="reference" name="indeterminateProgressStyle"/><attr format="dimension" name="progressBarPadding"/><attr name="homeAsUpIndicator"/><attr format="dimension" name="itemPadding"/><attr format="boolean" name="hideOnContentScroll"/><attr format="dimension" name="contentInsetStart"/><attr format="dimension" name="contentInsetEnd"/><attr format="dimension" name="contentInsetLeft"/><attr format="dimension" name="contentInsetRight"/><attr format="dimension" name="elevation"/><attr format="reference" name="popupTheme"/></declare-styleable>
    <declare-styleable name="ActionBarLayout"><attr name="android:layout_gravity"/></declare-styleable>
    <declare-styleable name="ActionMenuItemView"><attr name="android:minWidth"/></declare-styleable>
    <declare-styleable name="ActionMenuView"/>
    <declare-styleable name="ActionMode"><attr name="titleTextStyle"/><attr name="subtitleTextStyle"/><attr name="background"/><attr name="backgroundSplit"/><attr name="height"/><attr format="reference" name="closeItemLayout"/></declare-styleable>
    <declare-styleable name="ActivityChooserView"><attr format="string" name="initialActivityCount"/><attr format="reference" name="expandActivityOverflowButtonDrawable"/></declare-styleable>
    <declare-styleable name="AlertDialog"><attr name="android:layout"/><attr format="reference" name="buttonPanelSideLayout"/><attr format="reference" name="listLayout"/><attr format="reference" name="multiChoiceItemLayout"/><attr format="reference" name="singleChoiceItemLayout"/><attr format="reference" name="listItemLayout"/></declare-styleable>
    <declare-styleable name="AppBarLayout"><attr name="elevation"/><attr name="android:background"/><attr format="boolean" name="expanded"/></declare-styleable>
    <declare-styleable name="AppBarLayout_LayoutParams"><attr name="layout_scrollFlags"><flag name="scroll" value="0x1"/><flag name="exitUntilCollapsed" value="0x2"/><flag name="enterAlways" value="0x4"/><flag name="enterAlwaysCollapsed" value="0x8"/><flag name="snap" value="0x10"/></attr><attr format="reference" name="layout_scrollInterpolator"/></declare-styleable>
    <declare-styleable name="AppCompatImageView"><attr name="android:src"/><attr format="reference" name="srcCompat"/></declare-styleable>
    <declare-styleable name="AppCompatTextView"><attr format="reference|boolean" name="textAllCaps"/><attr name="android:textAppearance"/></declare-styleable>
    <declare-styleable name="AppCompatTheme"><attr format="boolean" name="windowActionBar"/><attr format="boolean" name="windowNoTitle"/><attr format="boolean" name="windowActionBarOverlay"/><attr format="boolean" name="windowActionModeOverlay"/><attr format="dimension|fraction" name="windowFixedWidthMajor"/><attr format="dimension|fraction" name="windowFixedHeightMinor"/><attr format="dimension|fraction" name="windowFixedWidthMinor"/><attr format="dimension|fraction" name="windowFixedHeightMajor"/><attr format="dimension|fraction" name="windowMinWidthMajor"/><attr format="dimension|fraction" name="windowMinWidthMinor"/><attr name="android:windowIsFloating"/><attr name="android:windowAnimationStyle"/><attr format="reference" name="actionBarTabStyle"/><attr format="reference" name="actionBarTabBarStyle"/><attr format="reference" name="actionBarTabTextStyle"/><attr format="reference" name="actionOverflowButtonStyle"/><attr format="reference" name="actionOverflowMenuStyle"/><attr format="reference" name="actionBarPopupTheme"/><attr format="reference" name="actionBarStyle"/><attr format="reference" name="actionBarSplitStyle"/><attr format="reference" name="actionBarTheme"/><attr format="reference" name="actionBarWidgetTheme"/><attr format="dimension" name="actionBarSize"><enum name="wrap_content" value="0"/></attr><attr format="reference" name="actionBarDivider"/><attr format="reference" name="actionBarItemBackground"/><attr format="reference" name="actionMenuTextAppearance"/><attr format="color|reference" name="actionMenuTextColor"/><attr format="reference" name="actionModeStyle"/><attr format="reference" name="actionModeCloseButtonStyle"/><attr format="reference" name="actionModeBackground"/><attr format="reference" name="actionModeSplitBackground"/><attr format="reference" name="actionModeCloseDrawable"/><attr format="reference" name="actionModeCutDrawable"/><attr format="reference" name="actionModeCopyDrawable"/><attr format="reference" name="actionModePasteDrawable"/><attr format="reference" name="actionModeSelectAllDrawable"/><attr format="reference" name="actionModeShareDrawable"/><attr format="reference" name="actionModeFindDrawable"/><attr format="reference" name="actionModeWebSearchDrawable"/><attr format="reference" name="actionModePopupWindowStyle"/><attr format="reference" name="textAppearanceLargePopupMenu"/><attr format="reference" name="textAppearanceSmallPopupMenu"/><attr format="reference" name="dialogTheme"/><attr format="dimension" name="dialogPreferredPadding"/><attr format="reference" name="listDividerAlertDialog"/><attr format="reference" name="actionDropDownStyle"/><attr format="dimension" name="dropdownListPreferredItemHeight"/><attr format="reference" name="spinnerDropDownItemStyle"/><attr format="reference" name="homeAsUpIndicator"/><attr format="reference" name="actionButtonStyle"/><attr format="reference" name="buttonBarStyle"/><attr format="reference" name="buttonBarButtonStyle"/><attr format="reference" name="selectableItemBackground"/><attr format="reference" name="selectableItemBackgroundBorderless"/><attr format="reference" name="borderlessButtonStyle"/><attr format="reference" name="dividerVertical"/><attr format="reference" name="dividerHorizontal"/><attr format="reference" name="activityChooserViewStyle"/><attr format="reference" name="toolbarStyle"/><attr format="reference" name="toolbarNavigationButtonStyle"/><attr format="reference" name="popupMenuStyle"/><attr format="reference" name="popupWindowStyle"/><attr format="reference|color" name="editTextColor"/><attr format="reference" name="editTextBackground"/><attr format="reference" name="imageButtonStyle"/><attr format="reference" name="textAppearanceSearchResultTitle"/><attr format="reference" name="textAppearanceSearchResultSubtitle"/><attr format="reference|color" name="textColorSearchUrl"/><attr format="reference" name="searchViewStyle"/><attr format="dimension" name="listPreferredItemHeight"/><attr format="dimension" name="listPreferredItemHeightSmall"/><attr format="dimension" name="listPreferredItemHeightLarge"/><attr format="dimension" name="listPreferredItemPaddingLeft"/><attr format="dimension" name="listPreferredItemPaddingRight"/><attr format="reference" name="dropDownListViewStyle"/><attr format="reference" name="listPopupWindowStyle"/><attr format="reference" name="textAppearanceListItem"/><attr format="reference" name="textAppearanceListItemSmall"/><attr format="reference" name="panelBackground"/><attr format="dimension" name="panelMenuListWidth"/><attr format="reference" name="panelMenuListTheme"/><attr format="reference" name="listChoiceBackgroundIndicator"/><attr format="color" name="colorPrimary"/><attr format="color" name="colorPrimaryDark"/><attr format="color" name="colorAccent"/><attr format="color" name="colorControlNormal"/><attr format="color" name="colorControlActivated"/><attr format="color" name="colorControlHighlight"/><attr format="color" name="colorButtonNormal"/><attr format="color" name="colorSwitchThumbNormal"/><attr format="reference" name="controlBackground"/><attr format="reference" name="alertDialogStyle"/><attr format="reference" name="alertDialogButtonGroupStyle"/><attr format="boolean" name="alertDialogCenterButtons"/><attr format="reference" name="alertDialogTheme"/><attr format="reference|color" name="textColorAlertDialogListItem"/><attr format="reference" name="buttonBarPositiveButtonStyle"/><attr format="reference" name="buttonBarNegativeButtonStyle"/><attr format="reference" name="buttonBarNeutralButtonStyle"/><attr format="reference" name="autoCompleteTextViewStyle"/><attr format="reference" name="buttonStyle"/><attr format="reference" name="buttonStyleSmall"/><attr format="reference" name="checkboxStyle"/><attr format="reference" name="checkedTextViewStyle"/><attr format="reference" name="editTextStyle"/><attr format="reference" name="radioButtonStyle"/><attr format="reference" name="ratingBarStyle"/><attr format="reference" name="ratingBarStyleIndicator"/><attr format="reference" name="ratingBarStyleSmall"/><attr format="reference" name="seekBarStyle"/><attr format="reference" name="spinnerStyle"/><attr format="reference" name="switchStyle"/></declare-styleable>
    <declare-styleable name="BottomSheetBehavior_Params"><attr format="dimension" name="behavior_peekHeight"/><attr format="boolean" name="behavior_hideable"/></declare-styleable>
    <declare-styleable name="ButtonBarLayout"><attr format="boolean" name="allowStacking"/></declare-styleable>
    <declare-styleable name="CardView"><attr format="color" name="cardBackgroundColor"/><attr format="dimension" name="cardCornerRadius"/><attr format="dimension" name="cardElevation"/><attr format="dimension" name="cardMaxElevation"/><attr format="boolean" name="cardUseCompatPadding"/><attr format="boolean" name="cardPreventCornerOverlap"/><attr format="dimension" name="contentPadding"/><attr format="dimension" name="contentPaddingLeft"/><attr format="dimension" name="contentPaddingRight"/><attr format="dimension" name="contentPaddingTop"/><attr format="dimension" name="contentPaddingBottom"/><attr name="android:minWidth"/><attr name="android:minHeight"/></declare-styleable>
    <declare-styleable name="CollapsingAppBarLayout_LayoutParams"><attr name="layout_collapseMode"><enum name="none" value="0"/><enum name="pin" value="1"/><enum name="parallax" value="2"/></attr><attr format="float" name="layout_collapseParallaxMultiplier"/></declare-styleable>
    <declare-styleable name="CollapsingToolbarLayout"><attr format="dimension" name="expandedTitleMargin"/><attr format="dimension" name="expandedTitleMarginStart"/><attr format="dimension" name="expandedTitleMarginTop"/><attr format="dimension" name="expandedTitleMarginEnd"/><attr format="dimension" name="expandedTitleMarginBottom"/><attr format="reference" name="expandedTitleTextAppearance"/><attr format="reference" name="collapsedTitleTextAppearance"/><attr format="color" name="contentScrim"/><attr format="color" name="statusBarScrim"/><attr format="reference" name="toolbarId"/><attr name="collapsedTitleGravity"><flag name="top" value="0x30"/><flag name="bottom" value="0x50"/><flag name="left" value="0x03"/><flag name="right" value="0x05"/><flag name="center_vertical" value="0x10"/><flag name="fill_vertical" value="0x70"/><flag name="center_horizontal" value="0x01"/><flag name="center" value="0x11"/><flag name="start" value="0x00800003"/><flag name="end" value="0x00800005"/></attr><attr name="expandedTitleGravity"><flag name="top" value="0x30"/><flag name="bottom" value="0x50"/><flag name="left" value="0x03"/><flag name="right" value="0x05"/><flag name="center_vertical" value="0x10"/><flag name="fill_vertical" value="0x70"/><flag name="center_horizontal" value="0x01"/><flag name="center" value="0x11"/><flag name="start" value="0x00800003"/><flag name="end" value="0x00800005"/></attr><attr format="boolean" name="titleEnabled"/><attr name="title"/></declare-styleable>
    <declare-styleable name="CompoundButton"><attr name="android:button"/><attr format="color" name="buttonTint"/><attr name="buttonTintMode"><enum name="src_over" value="3"/><enum name="src_in" value="5"/><enum name="src_atop" value="9"/><enum name="multiply" value="14"/><enum name="screen" value="15"/></attr></declare-styleable>
    <declare-styleable name="CoordinatorLayout"><attr format="reference" name="keylines"/><attr format="reference" name="statusBarBackground"/></declare-styleable>
    <declare-styleable name="CoordinatorLayout_LayoutParams"><attr name="android:layout_gravity"/><attr format="string" name="layout_behavior"/><attr format="reference" name="layout_anchor"/><attr format="integer" name="layout_keyline"/><attr name="layout_anchorGravity"><flag name="top" value="0x30"/><flag name="bottom" value="0x50"/><flag name="left" value="0x03"/><flag name="right" value="0x05"/><flag name="center_vertical" value="0x10"/><flag name="fill_vertical" value="0x70"/><flag name="center_horizontal" value="0x01"/><flag name="fill_horizontal" value="0x07"/><flag name="center" value="0x11"/><flag name="fill" value="0x77"/><flag name="clip_vertical" value="0x80"/><flag name="clip_horizontal" value="0x08"/><flag name="start" value="0x00800003"/><flag name="end" value="0x00800005"/></attr></declare-styleable>
    <declare-styleable name="DesignTheme"><attr format="reference" name="bottomSheetDialogTheme"/><attr format="reference" name="bottomSheetStyle"/><attr format="color" name="textColorError"/></declare-styleable>
    <declare-styleable name="DrawerArrowToggle"><attr format="color" name="color"/><attr format="boolean" name="spinBars"/><attr format="dimension" name="drawableSize"/><attr format="dimension" name="gapBetweenBars"/><attr format="dimension" name="arrowHeadLength"/><attr format="dimension" name="arrowShaftLength"/><attr format="dimension" name="barLength"/><attr format="dimension" name="thickness"/></declare-styleable>
    <declare-styleable name="FloatingActionButton"><attr name="backgroundTint"/><attr name="backgroundTintMode"/><attr format="color" name="rippleColor"/><attr name="fabSize"><enum name="normal" value="0"/><enum name="mini" value="1"/></attr><attr name="elevation"/><attr format="dimension" name="pressedTranslationZ"/><attr format="dimension" name="borderWidth"/><attr format="boolean" name="useCompatPadding"/></declare-styleable>
    <declare-styleable name="ForegroundLinearLayout"><attr name="android:foreground"/><attr name="android:foregroundGravity"/><attr format="boolean" name="foregroundInsidePadding"/></declare-styleable>
    <declare-styleable name="LinearLayoutCompat"><attr name="android:orientation"/><attr name="android:gravity"/><attr name="android:baselineAligned"/><attr name="android:baselineAlignedChildIndex"/><attr name="android:weightSum"/><attr format="boolean" name="measureWithLargestChild"/><attr name="divider"/><attr name="showDividers"><flag name="none" value="0"/><flag name="beginning" value="1"/><flag name="middle" value="2"/><flag name="end" value="4"/></attr><attr format="dimension" name="dividerPadding"/></declare-styleable>
    <declare-styleable name="LinearLayoutCompat_Layout"><attr name="android:layout_width"/><attr name="android:layout_height"/><attr name="android:layout_weight"/><attr name="android:layout_gravity"/></declare-styleable>
    <declare-styleable name="ListPopupWindow"><attr name="android:dropDownVerticalOffset"/><attr name="android:dropDownHorizontalOffset"/></declare-styleable>
    <declare-styleable name="MenuGroup"><attr name="android:id"/><attr name="android:menuCategory"/><attr name="android:orderInCategory"/><attr name="android:checkableBehavior"/><attr name="android:visible"/><attr name="android:enabled"/></declare-styleable>
    <declare-styleable name="MenuItem"><attr name="android:id"/><attr name="android:menuCategory"/><attr name="android:orderInCategory"/><attr name="android:title"/><attr name="android:titleCondensed"/><attr name="android:icon"/><attr name="android:alphabeticShortcut"/><attr name="android:numericShortcut"/><attr name="android:checkable"/><attr name="android:checked"/><attr name="android:visible"/><attr name="android:enabled"/><attr name="android:onClick"/><attr name="showAsAction"><flag name="never" value="0"/><flag name="ifRoom" value="1"/><flag name="always" value="2"/><flag name="withText" value="4"/><flag name="collapseActionView" value="8"/></attr><attr format="reference" name="actionLayout"/><attr format="string" name="actionViewClass"/><attr format="string" name="actionProviderClass"/></declare-styleable>
    <declare-styleable name="MenuView"><attr name="android:itemTextAppearance"/><attr name="android:horizontalDivider"/><attr name="android:verticalDivider"/><attr name="android:headerBackground"/><attr name="android:itemBackground"/><attr name="android:windowAnimationStyle"/><attr name="android:itemIconDisabledAlpha"/><attr format="boolean" name="preserveIconSpacing"/></declare-styleable>
    <declare-styleable name="NavigationView"><attr name="android:background"/><attr name="android:fitsSystemWindows"/><attr name="android:maxWidth"/><attr name="elevation"/><attr format="reference" name="menu"/><attr format="color" name="itemIconTint"/><attr format="color" name="itemTextColor"/><attr format="reference" name="itemBackground"/><attr format="reference" name="itemTextAppearance"/><attr format="reference" name="headerLayout"/></declare-styleable>
    <declare-styleable name="PopupWindow"><attr format="boolean" name="overlapAnchor"/><attr name="android:popupBackground"/></declare-styleable>
    <declare-styleable name="PopupWindowBackgroundState"><attr format="boolean" name="state_above_anchor"/></declare-styleable>
    <declare-styleable name="RecyclerView"><attr format="string" name="layoutManager"/><attr name="android:orientation"/><attr format="integer" name="spanCount"/><attr format="boolean" name="reverseLayout"/><attr format="boolean" name="stackFromEnd"/></declare-styleable>
    <declare-styleable name="ScrimInsetsFrameLayout"><attr format="color|reference" name="insetForeground"/></declare-styleable>
    <declare-styleable name="ScrollingViewBehavior_Params"><attr format="dimension" name="behavior_overlapTop"/></declare-styleable>
    <declare-styleable name="SearchView"><attr format="reference" name="layout"/><attr format="boolean" name="iconifiedByDefault"/><attr name="android:maxWidth"/><attr format="string" name="queryHint"/><attr format="string" name="defaultQueryHint"/><attr name="android:imeOptions"/><attr name="android:inputType"/><attr format="reference" name="closeIcon"/><attr format="reference" name="goIcon"/><attr format="reference" name="searchIcon"/><attr format="reference" name="searchHintIcon"/><attr format="reference" name="voiceIcon"/><attr format="reference" name="commitIcon"/><attr format="reference" name="suggestionRowLayout"/><attr format="reference" name="queryBackground"/><attr format="reference" name="submitBackground"/><attr name="android:focusable"/></declare-styleable>
    <declare-styleable name="SnackbarLayout"><attr name="android:maxWidth"/><attr name="elevation"/><attr format="dimension" name="maxActionInlineWidth"/></declare-styleable>
    <declare-styleable name="Spinner"><attr name="android:prompt"/><attr name="popupTheme"/><attr name="android:popupBackground"/><attr name="android:dropDownWidth"/><attr name="android:entries"/></declare-styleable>
    <declare-styleable name="SwitchCompat"><attr name="android:thumb"/><attr format="reference" name="track"/><attr name="android:textOn"/><attr name="android:textOff"/><attr format="dimension" name="thumbTextPadding"/><attr format="reference" name="switchTextAppearance"/><attr format="dimension" name="switchMinWidth"/><attr format="dimension" name="switchPadding"/><attr format="boolean" name="splitTrack"/><attr format="boolean" name="showText"/></declare-styleable>
    <declare-styleable name="TabItem"><attr name="android:text"/><attr name="android:icon"/><attr name="android:layout"/></declare-styleable>
    <declare-styleable name="TabLayout"><attr format="color" name="tabIndicatorColor"/><attr format="dimension" name="tabIndicatorHeight"/><attr format="dimension" name="tabContentStart"/><attr format="reference" name="tabBackground"/><attr name="tabMode"><enum name="scrollable" value="0"/><enum name="fixed" value="1"/></attr><attr name="tabGravity"><enum name="fill" value="0"/><enum name="center" value="1"/></attr><attr format="dimension" name="tabMinWidth"/><attr format="dimension" name="tabMaxWidth"/><attr format="reference" name="tabTextAppearance"/><attr format="color" name="tabTextColor"/><attr format="color" name="tabSelectedTextColor"/><attr format="dimension" name="tabPaddingStart"/><attr format="dimension" name="tabPaddingTop"/><attr format="dimension" name="tabPaddingEnd"/><attr format="dimension" name="tabPaddingBottom"/><attr format="dimension" name="tabPadding"/></declare-styleable>
    <declare-styleable name="TextAppearance"><attr name="android:textSize"/><attr name="android:textColor"/><attr name="android:textStyle"/><attr name="android:typeface"/><attr name="textAllCaps"/><attr name="android:shadowColor"/><attr name="android:shadowDy"/><attr name="android:shadowDx"/><attr name="android:shadowRadius"/></declare-styleable>
    <declare-styleable name="TextInputLayout"><attr format="reference" name="hintTextAppearance"/><attr name="android:hint"/><attr format="boolean" name="hintEnabled"/><attr format="boolean" name="errorEnabled"/><attr format="reference" name="errorTextAppearance"/><attr format="boolean" name="counterEnabled"/><attr format="integer" name="counterMaxLength"/><attr format="reference" name="counterTextAppearance"/><attr format="reference" name="counterOverflowTextAppearance"/><attr name="android:textColorHint"/><attr format="boolean" name="hintAnimationEnabled"/></declare-styleable>
    <declare-styleable name="Toolbar"><attr format="reference" name="titleTextAppearance"/><attr format="reference" name="subtitleTextAppearance"/><attr name="title"/><attr name="subtitle"/><attr name="android:gravity"/><attr format="dimension" name="titleMargins"/><attr format="dimension" name="titleMarginStart"/><attr format="dimension" name="titleMarginEnd"/><attr format="dimension" name="titleMarginTop"/><attr format="dimension" name="titleMarginBottom"/><attr name="contentInsetStart"/><attr name="contentInsetEnd"/><attr name="contentInsetLeft"/><attr name="contentInsetRight"/><attr format="dimension" name="maxButtonHeight"/><attr format="reference" name="collapseIcon"/><attr format="string" name="collapseContentDescription"/><attr name="popupTheme"/><attr format="reference" name="navigationIcon"/><attr format="string" name="navigationContentDescription"/><attr name="android:minHeight"/><attr name="logo"/><attr format="string" name="logoDescription"/><attr format="color" name="titleTextColor"/><attr format="color" name="subtitleTextColor"/></declare-styleable>
    <declare-styleable name="View"><attr format="dimension" name="paddingStart"/><attr format="dimension" name="paddingEnd"/><attr name="android:focusable"/><attr format="reference" name="theme"/><attr name="android:theme"/></declare-styleable>
    <declare-styleable name="ViewBackgroundHelper"><attr name="android:background"/><attr format="color" name="backgroundTint"/><attr name="backgroundTintMode"><enum name="src_over" value="3"/><enum name="src_in" value="5"/><enum name="src_atop" value="9"/><enum name="multiply" value="14"/><enum name="screen" value="15"/></attr></declare-styleable>
    <declare-styleable name="ViewStubCompat"><attr name="android:layout"/><attr name="android:inflatedId"/><attr name="android:id"/></declare-styleable>
    <dimen name="abc_action_bar_content_inset_material">16dp</dimen>
    <dimen name="abc_action_bar_default_height_material">56dp</dimen>
    <dimen name="abc_action_bar_default_padding_end_material">0dp</dimen>
    <dimen name="abc_action_bar_default_padding_start_material">0dp</dimen>
    <dimen name="abc_action_bar_icon_vertical_padding_material">16dp</dimen>
    <dimen name="abc_action_bar_overflow_padding_end_material">10dp</dimen>
    <dimen name="abc_action_bar_overflow_padding_start_material">6dp</dimen>
    <dimen name="abc_action_bar_progress_bar_size">40dp</dimen>
    <dimen name="abc_action_bar_stacked_max_height">48dp</dimen>
    <dimen name="abc_action_bar_stacked_tab_max_width">180dp</dimen>
    <dimen name="abc_action_bar_subtitle_bottom_margin_material">5dp</dimen>
    <dimen name="abc_action_bar_subtitle_top_margin_material">-3dp</dimen>
    <dimen name="abc_action_button_min_height_material">48dp</dimen>
    <dimen name="abc_action_button_min_width_material">48dp</dimen>
    <dimen name="abc_action_button_min_width_overflow_material">36dp</dimen>
    <dimen name="abc_alert_dialog_button_bar_height">48dp</dimen>
    <dimen name="abc_button_inset_horizontal_material">@dimen/abc_control_inset_material</dimen>
    <dimen name="abc_button_inset_vertical_material">6dp</dimen>
    <dimen name="abc_button_padding_horizontal_material">8dp</dimen>
    <dimen name="abc_button_padding_vertical_material">@dimen/abc_control_padding_material</dimen>
    <dimen name="abc_config_prefDialogWidth">320dp</dimen>
    <dimen name="abc_control_corner_material">2dp</dimen>
    <dimen name="abc_control_inset_material">4dp</dimen>
    <dimen name="abc_control_padding_material">4dp</dimen>
    <item name="abc_dialog_fixed_height_major" type="dimen">80%</item>
    <item name="abc_dialog_fixed_height_minor" type="dimen">100%</item>
    <item name="abc_dialog_fixed_width_major" type="dimen">320dp</item>
    <item name="abc_dialog_fixed_width_minor" type="dimen">320dp</item>
    <dimen name="abc_dialog_list_padding_vertical_material">8dp</dimen>
    <item name="abc_dialog_min_width_major" type="dimen">65%</item>
    <item name="abc_dialog_min_width_minor" type="dimen">95%</item>
    <dimen name="abc_dialog_padding_material">24dp</dimen>
    <dimen name="abc_dialog_padding_top_material">18dp</dimen>
    <item format="float" name="abc_disabled_alpha_material_dark" type="dimen">0.30</item>
    <item format="float" name="abc_disabled_alpha_material_light" type="dimen">0.26</item>
    <dimen name="abc_dropdownitem_icon_width">32dip</dimen>
    <dimen name="abc_dropdownitem_text_padding_left">8dip</dimen>
    <dimen name="abc_dropdownitem_text_padding_right">8dip</dimen>
    <dimen name="abc_edit_text_inset_bottom_material">7dp</dimen>
    <dimen name="abc_edit_text_inset_horizontal_material">4dp</dimen>
    <dimen name="abc_edit_text_inset_top_material">10dp</dimen>
    <dimen name="abc_floating_window_z">16dp</dimen>
    <dimen name="abc_list_item_padding_horizontal_material">@dimen/abc_action_bar_content_inset_material</dimen>
    <dimen name="abc_panel_menu_list_width">296dp</dimen>
    <dimen name="abc_search_view_preferred_width">320dip</dimen>
    <dimen name="abc_search_view_text_min_width">160dip</dimen>
    <dimen name="abc_seekbar_track_background_height_material">2dp</dimen>
    <dimen name="abc_seekbar_track_progress_height_material">2dp</dimen>
    <dimen name="abc_select_dialog_padding_start_material">20dp</dimen>
    <dimen name="abc_switch_padding">3dp</dimen>
    <dimen name="abc_text_size_body_1_material">14sp</dimen>
    <dimen name="abc_text_size_body_2_material">14sp</dimen>
    <dimen name="abc_text_size_button_material">14sp</dimen>
    <dimen name="abc_text_size_caption_material">12sp</dimen>
    <dimen name="abc_text_size_display_1_material">34sp</dimen>
    <dimen name="abc_text_size_display_2_material">45sp</dimen>
    <dimen name="abc_text_size_display_3_material">56sp</dimen>
    <dimen name="abc_text_size_display_4_material">112sp</dimen>
    <dimen name="abc_text_size_headline_material">24sp</dimen>
    <dimen name="abc_text_size_large_material">22sp</dimen>
    <dimen name="abc_text_size_medium_material">18sp</dimen>
    <dimen name="abc_text_size_menu_material">16sp</dimen>
    <dimen name="abc_text_size_small_material">14sp</dimen>
    <dimen name="abc_text_size_subhead_material">16sp</dimen>
    <dimen name="abc_text_size_subtitle_material_toolbar">16dp</dimen>
    <dimen name="abc_text_size_title_material">20sp</dimen>
    <dimen name="abc_text_size_title_material_toolbar">20dp</dimen>
    <dimen name="activity_horizontal_margin">16dp</dimen>
    <dimen name="activity_vertical_margin">16dp</dimen>
    <dimen name="cardview_compat_inset_shadow">1dp</dimen>
    <dimen name="cardview_default_elevation">2dp</dimen>
    <dimen name="cardview_default_radius">2dp</dimen>
    <dimen name="design_appbar_elevation">4dp</dimen>
    <dimen name="design_bottom_sheet_modal_elevation">16dp</dimen>
    <dimen name="design_bottom_sheet_modal_peek_height">256dp</dimen>
    <dimen name="design_fab_border_width">0.5dp</dimen>
    <dimen name="design_fab_elevation">6dp</dimen>
    <dimen name="design_fab_image_size">24dp</dimen>
    <dimen name="design_fab_size_mini">40dp</dimen>
    <dimen name="design_fab_size_normal">56dp</dimen>
    <dimen name="design_fab_translation_z_pressed">6dp</dimen>
    <dimen name="design_navigation_elevation">16dp</dimen>
    <dimen name="design_navigation_icon_padding">32dp</dimen>
    <dimen name="design_navigation_icon_size">24dp</dimen>
    <dimen name="design_navigation_max_width">280dp</dimen>
    <dimen name="design_navigation_padding_bottom">8dp</dimen>
    <dimen name="design_navigation_separator_vertical_padding">8dp</dimen>
    <dimen name="design_snackbar_action_inline_max_width">128dp</dimen>
    <dimen name="design_snackbar_background_corner_radius">0dp</dimen>
    <dimen name="design_snackbar_elevation">6dp</dimen>
    <dimen name="design_snackbar_extra_spacing_horizontal">0dp</dimen>
    <dimen name="design_snackbar_max_width">-1px</dimen>
    <dimen name="design_snackbar_min_width">-1px</dimen>
    <dimen name="design_snackbar_padding_horizontal">12dp</dimen>
    <dimen name="design_snackbar_padding_vertical">14dp</dimen>
    <dimen name="design_snackbar_padding_vertical_2lines">24dp</dimen>
    <dimen name="design_snackbar_text_size">14sp</dimen>
    <dimen name="design_tab_max_width">264dp</dimen>
    <dimen name="design_tab_scrollable_min_width">72dp</dimen>
    <dimen name="design_tab_text_size">14sp</dimen>
    <dimen name="design_tab_text_size_2line">12sp</dimen>
    <item format="float" name="disabled_alpha_material_dark" type="dimen">0.30</item>
    <item format="float" name="disabled_alpha_material_light" type="dimen">0.26</item>
    <item format="float" name="highlight_alpha_material_colored" type="dimen">0.26</item>
    <item format="float" name="highlight_alpha_material_dark" type="dimen">0.20</item>
    <item format="float" name="highlight_alpha_material_light" type="dimen">0.12</item>
    <dimen name="item_touch_helper_max_drag_scroll_per_frame">20dp</dimen>
    <dimen name="item_touch_helper_swipe_escape_max_velocity">800dp</dimen>
    <dimen name="item_touch_helper_swipe_escape_velocity">120dp</dimen>
    <dimen name="navigation_drawer_width">280dp</dimen>
    <dimen name="notification_large_icon_height">64dp</dimen>
    <dimen name="notification_large_icon_width">64dp</dimen>
    <dimen name="notification_subtext_size">12dp</dimen>
    <drawable name="notification_template_icon_bg">#3333B5E5</drawable>
    <item name="action_bar_activity_content" type="id"/>
    <item name="action_bar_spinner" type="id"/>
    <item name="action_menu_divider" type="id"/>
    <item name="action_menu_presenter" type="id"/>
    <item name="features_eight" type="id">features_eight</item>
    <item name="features_eighteen" type="id">features_eighteen</item>
    <item name="features_eleven" type="id">resourse_eleven</item>
    <item name="features_fifteen" type="id">features_sixtenn</item>
    <item name="features_five" type="id">resourse_five</item>
    <item name="features_four" type="id">resourse_four</item>
    <item name="features_nine" type="id">features_nine</item>
    <item name="features_nineteen" type="id">features_nineteen</item>
    <item name="features_seven" type="id">features_seven</item>
    <item name="features_seventeen" type="id">features_seventeen</item>
    <item name="features_six" type="id">features_six</item>
    <item name="features_sixteen" type="id">features_seventeen</item>
    <item name="features_ten" type="id">resourse_ten</item>
    <item name="features_thirty" type="id">features_thirty</item>
    <item name="features_thirtyone" type="id">features_thirtyone</item>
    <item name="features_twelve" type="id">resourse_twelve</item>
    <item name="features_twenty" type="id">features_twenty</item>
    <item name="features_twentyeight" type="id">features_twentyeight</item>
    <item name="features_twentyfour" type="id">features_twentyfour</item>
    <item name="features_twentynine" type="id">features_twentynine</item>
    <item name="features_twentyone" type="id">features_twentyone</item>
    <item name="features_twentyseven" type="id">features_twentyseven</item>
    <item name="features_twentysix" type="id">features_twentysix</item>
    <item name="features_twentythree" type="id">features_ternty</item>
    <item name="features_twentytwo" type="id">features_twentytwo</item>
    <item name="home" type="id"/>
    <item name="item_touch_helper_previous_elevation" type="id"/>
    <item name="progress_circular" type="id"/>
    <item name="progress_horizontal" type="id"/>
    <item name="split_action_bar" type="id"/>
    <item name="up" type="id"/>
    <item name="view_offset_helper" type="id"/>
    <integer name="abc_config_activityDefaultDur">220</integer>
    <integer name="abc_config_activityShortDur">150</integer>
    <integer name="abc_max_action_buttons">2</integer>
    <integer name="bottom_sheet_slide_duration">150</integer>
    <integer name="cancel_button_image_alpha">127</integer>
    <integer name="design_snackbar_text_max_lines">2</integer>
    <integer name="google_play_services_version">10298000</integer>
    <integer name="status_bar_notification_info_maxnum">999</integer>
    <string name="Brittany">Brittany Wenger (born 1994) is an American student who was the first place winner of the Google Science Fair in 2012. Wenger currently studies at Duke University. Brittany Wenger has created several groundbreaking programs that can detect and diagnose cancer. Her first breakthrough was the creation of <i>Cloud4Cancer</i>, a computer program that serves almost like an <i>"artificial brain"</i> that can assess tissue samples for breast cancer. Wenger learned how to code in seventh grade, and in tenth grade, when her cousin was diagnosed with breast cancer, she applied her skills toward the medical field.</string>
    <string name="Inheritance_heading"><b>3. Inheritance :</b></string>
    <string name="Plymorphism_heading"><b>2. Polymorphism :</b></string>
    <string name="QnA">Questions &amp; Answers</string>
    <string name="QnAactionbar"><b>Q &amp; A</b></string>
    <string name="YourJava"><b>It\'s your JAVA. Set it up !</b></string>
    <string name="abc_action_bar_home_description">Navigate home</string>
    <string name="abc_action_bar_home_description_format">%1$s, %2$s</string>
    <string name="abc_action_bar_home_subtitle_description_format">%1$s, %2$s, %3$s</string>
    <string name="abc_action_bar_up_description">Navigate up</string>
    <string name="abc_action_menu_overflow_description">More options</string>
    <string name="abc_action_mode_done">Done</string>
    <string name="abc_activity_chooser_view_see_all">See all</string>
    <string name="abc_activitychooserview_choose_application">Choose an app</string>
    <string name="abc_capital_off">OFF</string>
    <string name="abc_capital_on">ON</string>
    <string name="abc_search_hint">Search…</string>
    <string name="abc_searchview_description_clear">Clear query</string>
    <string name="abc_searchview_description_query">Search query</string>
    <string name="abc_searchview_description_search">Search</string>
    <string name="abc_searchview_description_submit">Submit query</string>
    <string name="abc_searchview_description_voice">Voice search</string>
    <string name="abc_shareactionprovider_share_with">Share with</string>
    <string name="abc_shareactionprovider_share_with_application">Share with %s</string>
    <string name="abc_toolbar_collapse_description">Collapse</string>
    <string name="about_us">Thank You for installing this app !</string>
    <string name="about_us_two">Java for Everyone is a free Java Tutorial app. This app contains all the basic concepts of Java along with programs and questions. More topics are being added in the tutorial section which will be rolled out with the new updates.\n\nI tried my best to make this app look and feel better with rich contents. Please show your help and support. If you have any suggestion or idea, feel free to contact me. I would love to hear from you.</string>
    <string name="absclass_def">These classes can not be instantiated and are either partially implemented or not at all implemented. This class contains one or more abstract methods which are simply method declarations without a body.</string>
    <string name="absclass_head"><b>What is Abstract class?</b></string>
    <string name="abstract_class_def"><font color="teal"><b>A class that is declared with abstract keyword, is known as abstract class in java.</b></font> If a class contain any abstract method then the class is declared as abstract class. <b>An abstract class is never instantiated.</b> It is used to provide abstraction. Although it does not provide 100% abstraction because it can also have concrete method(method with body).\nSyntax of abstract class :</string>
    <string name="abstract_class_head"><b>Abstract Class :</b></string>
    <string name="abstract_class_syntax">
        <font color="purple">abstract class</font> <font color="blue">class_name</font> <font color="grey">{</font>\n
        \t\t\t <font color="grey">//code goes here</font>\n
        <font color="grey">}</font>
    </string>
    <string name="abstract_def">Abstraction is a process of hiding the implementation details and showing only functionality to the user. <font color="teal"><b>Another way, it shows only important things to the user and hides the internal details</b></font> <b>for example</b>, sending sms, you just type the text and send the message. You don\'t know the internal processing about the message delivery. Abstraction lets you focus on what the object does instead of how it does it.</string>
    <string name="abstract_ex">
        <font color="purple">abstract class</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t<font color="purple">abstract void</font> callme ();\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">B</font> <font color="purple">extends</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t<font color="purple">void</font> callme()<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is callme method\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">B</font> obj = <font color="purple">new</font> <font color="blue">B</font>();\n
        \t\t\tobj.callme();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="abstract_ex_def"><i>Let\'s look at the following example to completely understand the concept of abstract class and methods :</i></string>
    <string name="abstract_ex_head"><b>Example :</b></string>
    <string name="abstract_head"><b>Abstraction</b></string>
    <string name="abstract_method_def"><font color="teal"><b>Method that are declared without any body within an abstract class are called abstract method.</b></font> The method body will be defined by its subclass. Abstract method can never be final and static. Any class that extends an abstract class must implement all the abstract methods declared by the super class.\nSyntax of abstract method :</string>
    <string name="abstract_method_head"><b>Abstract Method :</b></string>
    <string name="abstract_method_syntax">
        <font color="purple">abstract return_type</font> function_name ();
    </string>
    <string name="abstract_output">This is callme method</string>
    <string name="abstraction"><i>Abstraction</i></string>
    <string name="access_def">Java provides access modifiers to set access levels for classes, variables, methods and constructors. A member has package or default accessibility when no accessibility modifier is specified.</string>
    <string name="access_head"><b>What do you mean by Access Modifier?</b></string>
    <string name="action_settings">Settings</string>
    <string name="app_name">Java For Everyone  </string>
    <string name="appbar_scrolling_view_behavior" translatable="false">android.support.design.widget.AppBarLayout$ScrollingViewBehavior</string>
    <string name="arithmetic_def">Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra.\nThe following table lists the arithmetic operators :\n\n<font color="blue"><b>+</b></font>\t\t\t\t\tAddition operator\n\n<font color="blue"><b>-</b></font>\t\t\t\t\tSubtraction operator\n\n<font color="blue"><b>*</b></font>\t\t\t\t\tMultiplication operator\n\n<font color="blue"><b>/</b></font>\t\t\t\t\tDivision operator\n\n<font color="blue"><b>%</b></font>\t\t\t\t\tModulus operator\n\t\t\t\t\t (returns the remainder)\n\n<font color="blue"><b>++</b></font>\t\t\t\t\tIncrement operator\n\t\t\t\t\t (increases the value\n\t\t\t\t\t\t of operand by 1)\n\n<font color="blue"><b>--</b></font>\t\t\t\t\tDecrement operator\n\t\t\t\t\t (decreases the value\n\t\t\t\t\t\t of operand by 1)</string>
    <string name="arms_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">Armstrong</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> r, sum=0, temp, num;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter a number to check whether its armstrong or not\\n\"</font>);\n
        \t\t\tnum = scan.<font color="purple">nextInt</font>();\n
        \t\t\ttemp = num;\n
        \t\t\t<font color="blue">while</font>(num>0)<font color="grey">{</font>\n
        \t\t\t\tr = num%10;\n
        \t\t\t\tsum = sum + (r*r*r);\n
        \t\t\t\tnum = num/10;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">if</font>(temp == sum)\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Armstrong number\"</font>);\n
        \t\t\t<font color="blue">else</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Not Armstrong\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="arms_head"><b>Armstrong number.</b></string>
    <string name="arms_output">
        Enter a number to check whether its armstrong or not\n\n
        153\n
        Armstrong number
    </string>
    <string name="arrays_create_def">Syntax for array declaration :</string>
    <string name="arrays_create_head"><b>Creating Arrays :</b></string>
    <string name="arrays_def"><font color="purple">An array is a collection of similar data types</font>. Array is a container object that hold values of homogeneous type. It is also known as static data structure because size of an array must be specified at the time of its declaration. Index of array starts from zero to size-1.</string>
    <string name="arrays_ex">
        <font color="purple">class</font> <font color="blue">MyArray</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font>[] a = <font color="purple">new int</font>[5];\n
        \t<font color="grey"><i>/*initializing the array*/</i></font>\n
        \t\ta[0] = 10;\n
        \t\ta[1] = 20;\n
        \t\ta[2] = 30;\n
        \t\ta[3] = 40;\n
        \t\ta[4] = 50;\n
        \t<font color="grey"><i>/* length is the property of array */</i></font>\n
        \t\t<font color="blue">for</font>(<font color="purple">int</font> i = 0; i &lt; a.length; i++)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(a[i]);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="arrays_ex_output">
        10\n
        20\n
        30\n
        40\n
        50
    </string>
    <string name="arrays_head"><b>Arrays</b></string>
    <string name="arrays_init_syn"><font color="purple"><i>new</i></font> operator is used to initialize an array :</string>
    <string name="arrays_last_syntax"><font color="purple">int</font>[] b = <font color="grey">{</font>5, 6, 13, 22, 56<font color="grey">}</font>;</string>
    <string name="arrays_lets_ex">Now let us look at the following example :</string>
    <string name="arrays_methods_def"><font color="black">The</font> <font color="purple">java.util.Arrays</font> <font color="black">class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements.</font>\n\n<b>Arrays.binarySearch(<font color="purple">Object[] a, Object key</font>)</b>\n<font color="black">Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to making this call. This returns index of the search key.</font>\n\n<b>Arrays.equals(<font color="purple">int[] a, int[] b</font>)</b>\n<font color="black">Returns true if the two specified arrays of longs are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal. This returns true if the two arrays are equal. Same method could be used by all other primitive data types (Byte, short, Int, etc.)</font>\n\n<b>Arrays.fill(<font color="purple">int[] a, int val</font>)</b>\n<font color="black">Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other primitive data types (Byte, short, Int, etc.)</font>\n\n<b>Arrays.sort(<font color="purple">Object[] a</font>)</b>\n<font color="black">Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. The same method could be used by all other primitive data types ( Byte, short, Int, etc.)</font></string>
    <string name="arrays_methods_head"><b>Array Methods :</b></string>
    <string name="arrays_new_syntax">We can declare, instantiate and initialize the java array together by :</string>
    <string name="arrays_syntax_first">\t<font color="grey"><i>/* preferred way */</i></font>\n\t\t\t<font color="purple">datatype</font>[] identifier;\n\t<font color="grey"><i>/* works but not preferred way */</i></font>\n\t\t\t<font color="purple">datatype</font> identifier[];</string>
    <string name="arrays_syntax_second"><font color="grey"><i>/* Syntax */</i></font>\n<font color="purple">datatype</font>[] identifier = <font color="purple">new datatype[size];</font>\n<font color="grey"><i>/* Example */</i></font>\n<font color="purple">int</font>[] myarr1 = <font color="purple">new int</font>[10];\n<font color="purple">char</font>[] myarr2 = <font color="purple">new char</font>[26];</string>
    <string name="assignment"><b>The Assignment Operators :</b></string>
    <string name="assignment_def">There are following assignment operators supported by Java language :\n\n<font color="blue"><b>=</b></font>\t\t\t\t\tSimple assignment operator\n\n<font color="blue"><b>+=</b></font>\t\t\t\t\tAdd &amp; assignment\n\t\t\t\t\t\t operator\n\t\t\t\t\t\t (It adds right\n\t\t\t\t\t\t operand to the\n\t\t\t\t\t\t left operand and\n\t\t\t\t\t\t assign the result\n\t\t\t\t\t\t to left operand.)\n\n<font color="blue"><b>-=</b></font>\t\t\t\t\tSubtract &amp; assignment\n\t\t\t\t\t\t operator\n\n<font color="blue"><b>*=</b></font>\t\t\t\t\tMultiply &amp; assignment\n\t\t\t\t\t\t operator\n\n<font color="blue"><b>/=</b></font>\t\t\t\t\tDivide &amp; assignment\n\t\t\t\t\t\t operator\n\n<font color="blue"><b>%=</b></font>\t\t\t\t\tModulus &amp; assignment\n\t\t\t\t\t\t\t operator\n\n<font color="blue"><b>&lt;&lt;=</b></font>\t\t\t\t\tLeft shift &amp;\n\t\t\t\t\t\t\t\t assignment operator\n\n<font color="blue"><b>>>=</b></font>\t\t\t\t\tRight shift &amp;\n\t\t\t\t\t\t\t\t assignment operator\n\n<font color="blue"><b>&amp;=</b></font>\t\t\t\t\tBitwise &amp; assignment\n\t\t\t\t\t\t\t operator\n\n<font color="blue"><b>^=</b></font>\t\t\t\t\tBitwise exclusive or\n\t\t\t\t\t\t &amp; assignment operator\n\n<font color="blue"><b>|=</b></font>\t\t\t\t\tBitwise inclusive or\n\t\t\t\t\t\t &amp; assignment operator</string>
    <string name="basic_class"><b>Class :</b></string>
    <string name="basic_class_def">A <font color="blue"><b>class</b></font> is a blueprint or a template for creating different objects which defines its properties and behaviors. We will learn more about classes and objects in later chapters.</string>
    <string name="basic_identifiers"><b>Java Identifiers :</b></string>
    <string name="basic_identify_def">All Java components require names. <font color="blue"><b>Identifiers</b></font> are the names of variables, methods, classes, packages and interfaces.\nIn Java, there are several points to remember about identifiers. They are as follows:\n\n• All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).\n\n• After the first character identifiers can have any combination of characters.\n\n• A key word cannot be used as an identifier.\n\n• Identifiers are case sensitive.\n\n• Examples of legal identifiers: <font color="purple">name</font>, <font color="purple">$income</font>, <font color="purple">_count</font>.</string>
    <string name="basic_jdk"><b>JDK :</b></string>
    <string name="basic_jdk_def">The <font color="blue"><b>Java Development Kit (JDK)</b></font> is a software development environment used for developing Java applications and applets. It contains JRE + development tools.</string>
    <string name="basic_jre"><b>JRE :</b></string>
    <string name="basic_jre_def">The <font color="blue"><b>Java Runtime Environment (JRE)</b></font> is used to provide runtime environment. It contains set of libraries and other files that JVM uses at runtime.</string>
    <string name="basic_jvm"><b>JVM :</b></string>
    <string name="basic_jvm_def">A <font color="blue"><b>Java virtual machine (JVM)</b></font> is an abstract computing machine that enables a computer to run a Java program. JVM only works with bytecode. Hence you need to compile your Java application(.java) so that it can be converted to bytecode format (also known as the .class file). Which then will be used by JVM to run application.</string>
    <string name="basic_method"><b>Methods :</b></string>
    <string name="basic_method_def">A Java <font color="blue"><b>method</b></font> is a collection of statements that are grouped together to perform an operation. Think of a method as a subprogram that acts on data and often returns a value.</string>
    <string name="basic_obj_def">An <font color="blue"><b>object</b></font> is an instance of a class. Objects have states and behaviours. Example: A dog has states - colour, name, breed as well as behaviours -wagging, barking, eating.</string>
    <string name="basic_object"><b>Objects :</b></string>
    <string name="bitwise"><b>The Bitwise Operators :</b></string>
    <string name="bitwise_def">Bitwise operator works on bits and performs <font color="purple">bit-by-bit operation.</font> Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.\n The following table lists the bitwise operators:\n\n<font color="blue"><b>&amp;</b></font>\t\t\t\t\tBitwise and\n\n<font color="blue"><b>|</b></font>\t\t\t\t\tBitwise or\n\n<font color="blue"><b>^</b></font>\t\t\t\t\tBitwise XOR\n\n<font color="blue"><b>~</b></font>\t\t\t\t\tBitwise compliment\n\n<font color="blue"><b>&lt;&lt;</b></font>\t\t\t\t\tLeft shift\n\n<font color="blue"><b>>></b></font>\t\t\t\t\tRight shift\n\n<font color="blue"><b>>>></b></font>\t\t\t\t\tZero fill right shift</string>
    <string name="bottom_sheet_behavior" translatable="false">android.support.design.widget.BottomSheetBehavior</string>
    <string name="break_def">The break statement has two separate and distinct uses: exiting a loop, and exiting a switch statement. You cannot use a break anywhere but inside a loop or a switch statement.\nThe syntax of a break statement is very simple :</string>
    <string name="break_ex">
        <font color="purple">class</font> <font color="blue">BreakDance</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Break Statement</font>\");\n
        \t\t<font color="blue">for</font>(<font color="purple">int</font> i=1; i&lt;=10; i++)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">if</font>(i == 5)<font color="grey">{</font>\n
        \t\t\t\t\t<font color="purple">break</font>;\n
        \t\t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">value of i is : </font>\" + i);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="break_head"><b>Break Statement</b></string>
    <string name="break_output">
        Break Statement\n
        value of i is : 1\n
        value of i is : 2\n
        value of i is : 3\n
        value of i is : 4
    </string>
    <string name="break_syntax"><font color="purple">break</font>;</string>
    <string name="break_syntax_explained">Within any kind of a loop, break causes the loop to exit. There is very little point in having a \"bare\" break that unconditionally exits a loop. Almost always, the break is embedded in an <b>if statement</b>.\nLet\'s take a look at this example :</string>
    <string name="buzz_distributed">Java is designed for the distributed environment of the internet.</string>
    <string name="buzz_dynamic">Java programs carry with them substantial amounts of run-time information that is used to verify and resolve accesses to objects at run time.\n</string>
    <string name="buzz_interpret">Java implementations typically use a two-step compilation process. <font color="purple"><i>Java source code is compiled down to bytecode by the Java compiler. The bytecode is executed by Just-in-Time(JIT) compiler.</i></font></string>
    <string name="buzz_multi">Java supports multithreading which is not supported by C and C++. A thread is a light weight process. Multithreading increases CPU efficiency. <font color="purple"><i>A program can be divided into several threads and each thread can be executed concurrently or in parallel with the other threads.</i></font></string>
    <string name="buzz_neutral">Java is not tied to a specific machine or operating system architecture. Since <font color="purple"><i>Java applications can run on any kind of CPU, Java is architecture – neutral.</i></font></string>
    <string name="buzz_oop">Java follows modern, object-oriented programming philosophy(model).So, it supports all the features of object oriented model like:</string>
    <string name="buzz_perform">The Java bytecode is highly optimized for speed of execution.</string>
    <string name="buzz_portable">Applications written using Java are portable in the sense that they <font color="purple"><i>can be executed on any kind of computer containing any CPU or any operating system.</i></font></string>
    <string name="buzz_robust">A program or an application is said to be robust when it is able to give some response in any kind of context. <font color="purple"><i>Java encourages error-free programming by being strictly typed and performing run-time checks. It means that programs written in java will crash less often.</i></font> Java puts a lot of emphasis on garbage collection, memory allocation and exception handling.</string>
    <string name="buzz_secure">Java provides data security through encapsulation and we can write applets in Java which provides security. Java provides a secure means of creating Internet applications.</string>
    <string name="buzz_simple">Java is designed to be easy to learn. Java has a concise, cohesive set of features that makes it easy to learn and use.</string>
    <string name="buzzwords">Java Buzzwords or the features of Java played an important role in molding the final form of the language.\nThese features include:\n\n<font color="teal">• Simple\n• Secure\n• Portable\n• Object-oriented\n• Robust\n• Multithreaded\n• Architecture-Neutral\n• Interpreted\n• High performance\n• Distributed\n• Dynamic</font></string>
    <string name="byte_example"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">byte</font> a = 50 ;\n\t\t\t\t\t<font color="purple">byte</font> b = -60 ;</string>
    <string name="bytecode">When an application written in Java is compiled, it generates an intermediate code file called as \"<b>bytecode</b>\". Bytecode helps Java to achieve portability. Bytecode is a highly optimized set of instructions designed to be executed by the Java run-time system, which is called the Java Virtual Machine (JVM).</string>
    <string name="callsmain_def">The Java Virtual Machine (JVM) calls the main method in java. Main method in Java is the starting point of any standalone core Java application. JVM starts executing Java program from main method and the thread which executes main is called main thread in Java.</string>
    <string name="callsmain_head"><b>Who calls the main method in Java?</b></string>
    <string name="character_counter_pattern" translatable="false">%1$d / %2$d</string>
    <string name="class_def">A class is a blueprint from which individual objects are created. A class can contain fields and methoods to describe the behaviour of an object.</string>
    <string name="class_head"><b>Define class.</b></string>
    <string name="classvar_def">These are variables declared with in a class, outside any method, with the static keyword.</string>
    <string name="classvar_head"><b>What is a Class Variable?</b></string>
    <string name="cmd_def">The command line argument is the <font color="teal">argument passed to a program at the time when you run it</font>. To access the command-line argument inside a java program is quite easy, they are stored as string in String array passed to the args parameter of <font color="purple">main()</font> method.</string>
    <string name="cmd_ex">
        <font color="purple">class</font> <font color="blue">Cmd</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i=0; i &lt; args.length; i++)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(args[i]);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="cmd_output">10\n20\n30\n40</string>
    <string name="cmd_run">compile> javac Cmd.java\nrun> java Cmd 10 20 30 40</string>
    <string name="coder_kevin">Systrom was born in 1983 in Holliston, Massachusetts. Systrom attended Middlesex School in Concord, Massachusetts, where he was introduced to computer programming. He also once created programs that would prank his friends by appearing to hack their AOL Instant Messenger accounts. Systrom graduated in 2006 from Stanford University with a bachelor\'s degree in management science and engineering. After graduating Stanford, he joined Google as an associate product marketing manager. In 2010, Systrom co‑founded the photo-sharing and, then later, video-sharing social networking service Instagram with Mike Krieger in San Francisco, California.</string>
    <string name="coder_ruchi">Ruchi Sanghvi (born January 20, 1982) is an Indian computer engineer. She was the <i>first female engineer</i> hired by Facebook. Sanghvi transitioned from engineering to product management at Facebook, where she oversaw Facebook Platform and News Feed. Sanghvi was an early engineer at Facebook and one of the primary developers for News Feed. Prior to Facebook, she was a software engineer in the Real Time Communication Group at Oracle. Sanghvi holds a bachelor\'s and master\'s degree in electrical computer engineering from <i>Carnegie Mellon University</i>.</string>
    <string name="common_google_play_services_unknown_issue"><ns1:g id="app_name">%1$s</ns1:g> is having trouble with Google Play services. Please try again.</string>
    <string name="con_def">
        <font color="purple">class</font> <font color="blue">MyConstruct</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num;\n
        \t\t<font color="grey"><i>/* Creating a parameterized constructor */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> x)<font color="grey">{</font>\n
        \t\t\t\tnum = x;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the number is : </font>\" + num);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">MyConstruct</font> obj1 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(25);\n
        \t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(35);\n
        \t\tobj1.display();\n
        \t\tobj2.display():\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="con_head"><b>Constructor Example.</b></string>
    <string name="con_output">
        Value of the number is : 25\n
        Value of the number is : 35
    </string>
    <string name="conover_def">
        <font color="purple">class</font> <font color="blue">MyConstruct</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num1, num2, num3;\n
        \t\t<font color="grey"><i>/* Constructor with no parameter */</i></font>\n
        \t\tMyConstruct()<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Constructor with no parameters !!</font>\");\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="grey"><i>/* Constructor with one parameter */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> a)<font color="grey">{</font>\n
        \t\t\t\tnum1 = a;\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="magenta">\\n</font><font color="teal">Constructor with one parameter.</font>\");\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the number is : </font>\" + num1);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="grey"><i>/* Constructor with two parameters */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> x, <font color="purple">int</font> y)<font color="grey">{</font>\n
        \t\t\t\tnum2 = x;\n
        \t\t\t\tnum3 = y;\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="magenta">\\n</font><font color="teal">Constructor with two parameter.</font>\");\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the first number is : </font>\" + num2);\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the second number is : </font>\" + num3);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">MyConstruct</font> obj1 = <font color="purple">new</font> <font color="blue">MyConstruct</font>();\n
        \t\t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(<font color="purple">68</font>);\n
        \t\t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(<font color="purple">78,89</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="conover_head"><b>Constructor Overloading.</b></string>
    <string name="conover_output">
        Constructor with no parameters !!\n\n
        Constructor with one parameter.\n
        Value of the number is : 68\n\n
        Constructor with two parameter.\n
        Value of the first number is : 78\n
        Value of the second number is : 89
    </string>
    <string name="const_def">A constructor is a special method that is used to initialize an object.Every class has a constructor, if we don\'t explicitly declare a constructor for any java class the compiler builds a default constructor for that class.\n<font color="purple"><b>A constructor does not have any return type.</b></font>\n<font color="teal"><b>A constructor has same name as the class in which it resides.</b></font>\nLet us look at the code given below :</string>
    <string name="const_default_def">A constructor that have <font color="purple">no parameter</font> is known as default constructor.\nThe example given above is an example of a default constructor.</string>
    <string name="const_default_head">Default Constructor :</string>
    <string name="const_final_ex">
        <font color="purple">class</font> <font color="blue">MyConstruct</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num;\n
        \t\t<font color="grey"><i>/* Now creating a parameterized constructor */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> x)<font color="grey">{</font>\n
        \t\t\t\tnum = x;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="grey"><i>/* method to display the number */</i></font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the number is : </font>\" + num);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">MyConstruct</font> obj1 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(25);\n
        \t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(35);\n
        \t\tobj1.display();\n
        \t\tobj2.display():\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="const_final_output">
        Value of the number is : 25\n
        Value of the number is : 35
    </string>
    <string name="const_head"><b>Constructor</b></string>
    <string name="const_param_def">A constructor that have parameters is known as parameterized constructor.\nLet us look at the example given below :</string>
    <string name="const_param_head">Parameterized Constructor :</string>
    <string name="const_syntax">
        <font color="purple">class</font> <font color="blue">MyConstruct</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> x;\n
        \t\t<font color="grey">/* <i>Now creating the constructor</i> */</font>\n
        \t\tMyConstruct()<font color="grey">{</font>\n
        \t\t\t\tx = 10;\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="const_types">There are two types of constructors :\n• <font color="teal">Default</font> Constructor\n• <font color="teal">Parameterized</font> constructor</string>
    <string name="construct_def">A Constructor is a special method that has the same name as the class name. Constructor gets invoked when a new object is created. Every class has a constructor. If we do not explicitly write a constructor for a class the java compiler builds a default constructor for that class.</string>
    <string name="construct_head"><b>What do you mean by Constructor?</b></string>
    <string name="continue_def">The continue keyword can be used in any of the loop control structures. It causes the loop to immediately jump to the next iteration of the loop.\nThe Syntax of continue statement is as follows :</string>
    <string name="continue_ex">
        <font color="purple">class</font> <font color="blue">JustContinue</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Continue Statement</font>\");\n
        \t\t<font color="blue">for</font>(<font color="purple">int</font> i=1; i&lt;=10; i++)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">if</font>(i == 5)<font color="grey">{</font>\n
        \t\t\t\t\t<font color="purple">continue</font>;\n
        \t\t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">value of i is : </font>\" + i);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="continue_head"><b>Continue Statement</b></string>
    <string name="continue_output">
        Continue Statement\n
        value of i is : 1\n
        value of i is : 2\n
        value of i is : 3\n
        value of i is : 4\n
        value of i is : 6\n
        value of i is : 7\n
        value of i is : 8\n
        value of i is : 9\n
        value of i is : 10
    </string>
    <string name="continue_synt_ex">Let\'s take a look at this example below :</string>
    <string name="continue_syntax"><font color="purple">continue</font>;</string>
    <string name="cover_def">Constructor overloading is a technique in Java in which a class can have any number of constructors that differ in parameter lists.The compiler differentiates these constructors by taking into account the number of parameters in the list and their type.\nLet us look at the example given below :</string>
    <string name="cover_ex">
        <font color="purple">class</font> <font color="blue">MyConstruct</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num1, num2, num3;\n
        \t\t<font color="grey"><i>/* Constructor with no parameter */</i></font>\n
        \t\tMyConstruct()<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Constructor with no parameters !!</font>\");\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="grey"><i>/* Constructor with one parameter */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> a)<font color="grey">{</font>\n
        \t\t\t\tnum1 = a;\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="magenta">\\n</font><font color="teal">Constructor with one parameter.</font>\");\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the number is : </font>\" + num1);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="grey"><i>/* Constructor with two parameters */</i></font>\n
        \t\tMyConstruct(<font color="purple">int</font> x, <font color="purple">int</font> y)<font color="grey">{</font>\n
        \t\t\t\tnum2 = x;\n
        \t\t\t\tnum3 = y;\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="magenta">\\n</font><font color="teal">Constructor with two parameter.</font>\");\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the first number is : </font>\" + num2);\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Value of the second number is : </font>\" + num3);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">MyConstruct</font> obj1 = <font color="purple">new</font> <font color="blue">MyConstruct</font>();\n
        \t\t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(<font color="purple">68</font>);\n
        \t\t\t<font color="blue">MyConstruct</font> obj2 = <font color="purple">new</font> <font color="blue">MyConstruct</font>(<font color="purple">78,89</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="cover_final_output">
        Constructor with no parameters !!\n\n
        Constructor with one parameter.\n
        Value of the number is : 68\n\n
        Constructor with two parameter.\n
        Value of the first number is : 78\n
        Value of the second number is : 89
    </string>
    <string name="cover_head"><b>Constructor Overloading</b></string>
    <string name="data_boolean_def">• <font color="teal"><b>boolean :</b></font>\n\t\t\t\t\t\t\t\t\t\tBoolean data type represents <font color="blue">one bit</font> of information. There are only two possible values: <font color="blue">true</font> and <font color="blue">false</font>. This data type is used for simple flags that track true/false conditions. It\'s default value is false.</string>
    <string name="data_boolean_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">boolean</font> myflag = true ;</string>
    <string name="data_char_def">• <font color="teal"><b>char :</b></font>\n\t\t\t\t\t\t\t\t\t\tChar data type is a single <font color="blue">16-bit</font> Unicode character. Char data type is used to store any character. Minimum value is \'\\u0000\' (or 0) and maximum value is \'\\uffff\' (or 65,535).</string>
    <string name="data_char_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">char</font> mychar = \'A\' ;</string>
    <string name="data_double_def">• <font color="teal"><b>double :</b></font>\n\t\t\t\t\t\t\t\t\t\tDouble also comes under the category of Floating point types. double data type is a double-precision <font color="blue">64-bit</font> IEEE 754 floating point. This data type is generally used as the default data type for decimal values, generally the default choice. It\'s default value is 0.0d.</string>
    <string name="data_double_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">double</font> dval = 453.56 ;</string>
    <string name="data_float_def">• <font color="teal"><b>float :</b></font>\n\t\t\t\t\t\t\t\t\t\tFloat comes under the category of Floating point types. The floating-point types can represent numbers that have fractional components. Float data type is a single-precision <font color="blue">32-bit</font> IEEE 754 floating point. It\'s default value is 0.0f.</string>
    <string name="data_float_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">float</font> fval = 346.4f ;</string>
    <string name="data_int_def">• <font color="teal"><b>int :</b></font>\n\t\t\t\t\t\t\t\t\t\tInt data type is a <font color="blue">32-bit</font> signed two\'s complement integer. Minimum value that can be stored in it is - 2,147,483,648 (-2<sup>31</sup>) and the maximum value is 2,147,483,647 (2<sup>31</sup> -1). <font color="purple"><i>Int is generally used as the default data type for integral values unless there is a concern about memory.</i></font> It\'s default value is 0.</string>
    <string name="data_int_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">int</font> a = 200000 ;\n\t\t\t\t\t<font color="purple">int</font> b = -300000 ;</string>
    <string name="data_long_def">• <font color="teal"><b>long :</b></font>\n\t\t\t\t\t\t\t\t\t\tLong data type is a <font color="blue">64-bit</font> signed two\'s complement integer. Minimum value that can be stored in it is -9,223,372,036,854,775,808 (-2<sup>63</sup>) and the maximum value is 9,223,372,036,854,775,807 (2<sup>63</sup> -1). This type is used when a wider range than int is needed. It\'s default value is 0.</string>
    <string name="data_long_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">long</font> a = 2000000000 ;\n\t\t\t\t\t<font color="purple">long</font> b = -300000000 ;</string>
    <string name="data_primitive"><b>Primitive Data Types :</b></string>
    <string name="data_primitive_def">Primitive data types are <font color="blue">predefined data types</font> and are named by a keyword. The term primitive is used here to indicate that these types are not objects in an object-oriented sense, but rather, normal binary values. These primitive types are not objects because of efficiency concerns.\nJava supports eight primitive data types :\n\n• <font color="teal"><b>byte :</b></font>\n\t\t\t\t\t\t\t\t\t\tByte data type is an <font color="blue">8-bit</font> signed two\'s complement integer. Minimum value that can be stored in it is -128 (-2<sup>7</sup>) and the maximum value is 127 (2<sup>7</sup> -1). It\'s default value is 0.</string>
    <string name="data_primitive_def2">• <font color="teal"><b>short :</b></font>\n\t\t\t\t\t\t\t\t\t\tShort data type is a <font color="blue">16-bit</font> signed two\'s complement integer. Minimum value that can be stored in it is -32,768 (-2<sup>15</sup>) and the maximum value is 32,767 (2<sup>15</sup> -1). It\'s default value is 0.</string>
    <string name="data_short_ex"><font color="grey">For example :</font>\n\t\t\t\t\t<font color="purple">short</font> a = 2000 ;\n\t\t\t\t\t<font color="purple">short</font> b = -1000 ;</string>
    <string name="dataintro">Data types and operators are present at the foundation of any Programming language. Java supports a rich assortment of both data types and operators, making it suitable for any type of programming.\n\nThere are two data types in Java:\n‣ \t<font color="blue">Primitive data types</font>\n‣ \t<font color="blue">Non-Primitive data types</font></string>
    <string name="default_web_client_id" translatable="false">556170566341-vfpjoacpkouglbarfrvcrjhhdmj9966m.apps.googleusercontent.com</string>
    <string name="definherit_def">It is the process where one class acquires the properties of another. With the use of inheritance information is made manageable in hierarchical order.</string>
    <string name="definherit_head"><b>Define Inheritance.</b></string>
    <string name="dowhile_def">A do…while loop is similar to a while loop, except that a do…while loop is guaranteed to execute at least one time.\nSyntax of do…while loop is as follows :</string>
    <string name="dowhile_ex">
        <font color="purple">class</font> <font color="blue">MyDoWhile</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num = 10 ;\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">==DO WHILE LOOP==</font>\");\n
        \t\t<font color="blue">do</font><font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">value of num : </font>\" + num);\n
        \t\t num--;\n
        \t\t\t<font color="grey">}</font><font color="blue">while</font>(num >= 1);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="dowhile_head"><b>Do While Loop</b></string>
    <string name="dowhile_output">
        ==DO WHILE LOOP==\n
        value of num : 10\n
        value of num : 9\n
        value of num : 8\n
        value of num : 7\n
        value of num : 6\n
        value of num : 5\n
        value of num : 4\n
        value of num : 3\n
        value of num : 2\n
        value of num : 1
    </string>
    <string name="dowhile_syntax">
        <font color="blue">do</font><font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code to be executed</i></font>\n
        \t<font color="grey">}</font><font color="blue">while</font>(condition);
    </string>
    <string name="dowhile_syntax_explained"><font color="purple">Notice that the Boolean expression (condition) appears at the end of the loop, so the statements in the loop execute once before the condition is tested.</font>\n\nIf the condition is true, the control jumps back up to <b>do statement</b>, and the statements in the loop execute again. This process repeats until the condition is false.\nLet\'s take a look at this example :</string>
    <string name="drew">Drew Houston was born in Acton, Massachusetts in 1983. He graduated with a degree in Computer Science from the Massachusetts Institute of Technology.
        <b><i>He is the co-founder and CEO of Dropbox.</i></b> Dropbox has been called one of the 20 best startups of Silicon Valley. In June 2013, MIT invited Houston to serve as speaker at its annual commencement ceremonies. In his remarks, Houston gave this advice: <i>"They say that you're the average of the 5 people you spend the most time with. Think about that for a minute: who would be in your circle of 5?"</i>


    </string>
    <string name="dynamic_def">It is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.</string>
    <string name="dynamic_head"><b>Why Java is considered dynamic?</b></string>
    <string name="elena">Elena Silenok was born in Kaliningrad, Russia.She is the founder of Clothia.com and CEO of Sputnik Mobile. She has done MS in Computer Science from University of California, San Diego. She was a researcher at the Collaborative Association for Internet Data Analysis at San Diego Supercomputer Center (SDSC) and lead developer web traffic data at Bessemer Venture Partners.</string>
    <string name="encap_def">Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.\n\nEncapsulation can also be viewed as technique of making the fields in a class private and providing access to the fields via public methods. If a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. Therefore encapsulation is also referred to as <font color="teal">data hiding</font>.</string>
    <string name="encap_head"><b>What is Encapsulation?</b></string>
    <string name="encapsulate"><i>Encapsulation</i></string>
    <string name="encapsulation"><i><font color="purple">Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit</font></i>,  for example capsule i.e. mixed of several medicines. Java\'s basic unit of encapsulation is the class.</string>
    <string name="encapsulation_heading"><b>1. Encapsulation :</b></string>
    <string name="enhance_for_next">There is another version of for loop called <font color="purple">enhanced for loop</font>. We will learn about it after the introduction of arrays.</string>
    <string name="even_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">EvenOdd</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> a;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter a number\"</font>);\n
        \t\t\ta = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="blue">if</font>(a%2 == 0)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Entered number is Even.\"</font>);\n
        \t\t\t<font color="grey">}</font> <font color="blue">else</font><font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Entered number is Odd.\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="even_head"><b>Even or Odd.</b></string>
    <string name="even_output">
        Enter a number\n
        20\n
        Entered number is Even.
    </string>
    <string name="exampletemp"><font color="purple">set path=C:\\Program Files\\Java\\jdk1.8.0_60\\bin</font></string>
    <string name="exc_define">Exception Handling is the mechanism to handle runtime malfunctions. We need to handle such exceptions to prevent abrupt termination of program. <font color="teal">The term exception means exceptional condition, it is a problem that may arise during the execution of program.</font> A bunch of things can lead to exceptions, including programmer error, hardware failures, files that need to be opened cannot be found, resource exhaustion etc.</string>
    <string name="exc_ex_explain">\nThis will lead to an exception at runtime, hence the Java run-time system will construct an exception and then throw it. As we don\'t have any mechanism for handling exception in the above program, hence the default handler will handle the exception.\n</string>
    <string name="exc_three_throw">By default, when an exception condition occurs the system automatically throw an exception to inform user that there is something wrong. However we can also throw exception explicitly based on our own defined condition. Using <font color="teal"><b>\"throw keyword\"</b></font> we can throw checked, unchecked and user -defined exceptions. Let\'s have a look at the below example to understand it better.</string>
    <string name="exc_throw_ex">
        <font color="purple">class</font> <font color="blue">ThrowEx</font><font color="grey">{</font>\n
        \t\t<font color="purple">static void</font> validate(<font color="purple">int</font> age)<font color="grey">{</font>\n
        \t\t\t<font color="blue">if</font>(age &lt; 18)<font color="grey">{</font>\n
        \t\t\t\t<font color="purple">throw new</font> ArithmeticException(<font color="teal">\"Not Valid\"</font>);\n
        \t\t\t<font color="blue">else</font><font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"You are eligible to vote\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\tvalidate(12);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Rest of the code...\"</font>);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>

    </string>
    <string name="exc_two_def">
        In java, exception handling is done using five keywords :\n
        1. try\n
        2. catch\n
        3. throw\n
        4. throws\n
        5. finally\n
        \nException handling is done by transferring the execution of a program to an appropriate exception handler when exception occurs.
    </string>
    <string name="exc_two_try">Try is used to guard a block of code in which exception may occur. This block of code is called guarded region. A catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in guarded code, the catch block that follows the try is checked, if the type of exception that occured is listed in the catch block then the exception is handed over to the catch block which then handles it.</string>
    <string name="exc_types">• <b><i>Checked Exception :</i></b> The exception that can be predicted by the programmer at the compile time.Example : File that need to be opened is not found. These type of exceptions must be checked at compile time.\n
    \n• <b><i>Unchecked Exception :</i></b> Unchecked exceptions are the class that extends RuntimeException. Unchecked exception are ignored at compile time. Example : ArithmeticException, NullPointerException, Array Index out of Bound exception. Unchecked exceptions are checked at runtime.\n
        \n• <b><i>Error :</i></b> Errors are typically ignored in code because you can rarely do anything about an error. Example : if stack overflow occurs, an error will arise. This type of error cannot be handled in the code.


    </string>
    <string name="exception_def">An Exception is a problem that arises during the execution of a program. Exceptions are caught by handlers positioned along the thread\'s method invocation stack.</string>
    <string name="exception_head"><b>What is an Exception?</b></string>
    <string name="fact_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">Fact</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> fact=1, num;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter a number to find Factorial\\n\"</font>);\n
        \t\t\tnum = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i=1; i&lt;=num; i++)<font color="grey">{</font>\n
        \t\t\t\tfact = fact*i;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Factorial of \"</font>+ num + <font color="teal">\" is : \"</font> + fact);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="fact_head"><b>Factorial of a number.</b></string>
    <string name="fact_output">
        Enter a number to find Factorial\n\n
        5\n
        Factorial of 5 is : 120
    </string>
    <string name="features_architecture"><b>Architecture-neutral :</b></string>
    <string name="features_def">1. Object Oriented\n2. Platform Independent\n3. Robust\n4. Interpreted\n5. Multi-threaded</string>
    <string name="features_distri"><b>Distributed :</b></string>
    <string name="features_dynamic"><b>Dynamic :</b></string>
    <string name="features_head"><b>List any five features of Java.</b></string>
    <string name="features_intepreted"><b>Interpreted :</b></string>
    <string name="features_multithreaded"><b>Multithreaded :</b></string>
    <string name="features_objectoriented"><b>Object-oriented :</b></string>
    <string name="features_perform"><b>High Performance :</b></string>
    <string name="features_portable"><b>Portable :</b></string>
    <string name="features_robust"><b>Robust :</b></string>
    <string name="features_secure"><b>Secure :</b></string>
    <string name="features_simple"><b>Simple :</b></string>
    <string name="fibo_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">Fibo</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> n1=0, n2=1, n3, count;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter number upto which Fibonacci series to print: \\n\"</font>);\n
        \t\t\tcount = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="blue">System</font>.out.println(n1 + <font color="teal">\" \"</font> + n2);\n
        \t\t\t<font color="grey"><i>/*Loop starts from 2 because 0 and 1 are already printed*/</i></font>\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i=2; i&lt;count; i++)<font color="grey">{</font>\n
        \t\t\t\tn3 = n1+n2;\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\" \"</font> + n3);\n
        \t\t\t\tn1 = n2;\n
        \t\t\t\tn2 = n3;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="fibo_head"><b>Fibonacci Series.</b></string>
    <string name="fibo_output">
        Enter number upto which Fibonacci series to print:\n\n
        10\n
        0 1 1 2 3 5 8 13 21 34
    </string>
    <string name="final_def">
        <font color="purple">class</font> <font color="blue">FinalVar</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">final int</font> hoursInDay = 24;\n
        \t\t\t<font color="grey"><i>/*Now we can not change the value of hoursInDay as it is declared final*/</i></font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Hours in 7 days : \"</font> + hoursInDay*7);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="final_head"><b>Final Variable.</b></string>
    <string name="final_output">Hours in 7 days : 168</string>
    <string name="finalclass_def">Final classes are created so the methods implemented by that class cannot be overridden. It can\'t be inherited.</string>
    <string name="finalclass_head"><b>What is final class?</b></string>
    <string name="finalize_def">It is possible to define a method that will be called just before an object\'s final destruction by the garbage collector. This method is called finalize(), and it can be used to ensure that an object terminates cleanly.</string>
    <string name="finalize_head"><b>What is finalize() method?</b></string>
    <string name="finally_def">The finally block follows a try block or a catch block. <font color="teal">A finally block of code always executes, irrespective of occurrence of an Exception.</font> Using a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.\nA finally block appears at the end of the catch blocks(can also be used after try block) and has the following syntax −</string>
    <string name="finally_ex">
        <font color="purple">class</font> <font color="blue">ExcFinally</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\t<font color="purple">int</font> a[] = <font color="purple">new int</font>[2];\n
        \t\t\t<font color="blue">try</font><font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Accessing element number 3: \"</font> + a[3]);\n
        \t\t\t<font color="grey">}</font><font color="blue">catch</font>(ArrayIndexOutOfBoundsException e)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Exception thrown : \"</font> + e);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">finally</font><font color="grey">{</font>\n
        \t\t\t\ta[0] = 6;\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"First element value: \"</font> + a[0]);\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"The finally statement is executed\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="finally_output">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed</string>
    <string name="finally_syntax">
        <font color="blue">try</font><font color="grey">{</font>\n
        \t\t<font color="grey">// protected code</font>\n
        <font color="grey">}</font>\n<font color="blue">catch</font>(ExceptionType e)<font color="grey">{</font>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n
        \t\t<font color="grey">// catch block</font>\n
        <font color="grey">}</font>\n
        <font color="blue">finally</font><font color="grey">{</font>\n
        \t\t<font color="grey">// the finally block always executes</font>\n
        <font color="grey">}</font>
    </string>
    <string name="firebase_database_url" translatable="false">https://java-for-everyone.firebaseio.com</string>
    <string name="first_follow_steps">Let\'s run our first Java program.\nFollow the steps:\n1.Enter the program\n2.Compile the program\n3.Run the program\n\n• Enter the program in a text editor (For example: notepad, notepad++ or sublime text).\n\n• Save the file as <font color="purple">\'<b>Hello.java</b>\'</font> on the Desktop (or your desired location).\n\n• Now open Command Prompt and change the current directory to the directory where you have saved the <font color="purple"><b>.java</b></font> file.\n\n• In this case, to change the directory to Desktop write <font color="blue">cd Desktop</font>\n\n• Write the command <font color="blue">javac Hello.java</font> and press enter. This will compile your program.\n\n• The javac compiler creates a Hello.class file that contains the bytecode version of the program.\n\n• Now write <font color="blue">java Hello</font> and press enter to run your first Java program.</string>
    <string name="first_heading_understand"><b>Understanding first Java program :</b></string>
    <string name="first_understand">Our program starts with\n\t\t<font color="grey">/*\n\t\t\t This is a simple java program.\n\t\t\t Call this file Hello.java.\n*/\n</font>This is a comment. Like most other programming languages, Java lets you enter a remark into a program\'s source file. The contents of a comment are ignored by the compiler. Instead, a comment describes or explains the operation of the program to anyone who is reading its source code.
    \n\n• <b><font color="magenta">class</font></b> keyword is used to declare class in Java.
        \n\n• <b><font color="magenta">public</font></b> keyword is an access modifier which represents visibility, it means it is visible to all and can be accessed by code outside the class.
        \n\n• <b><font color="magenta">static</font></b> is a keyword, if we declare any method as static, it is known as static method. The core advantage of static method is that there is no need to create object to invoke the static method. The main method is executed by the JVM, so it doesn\'t require to create object to invoke the main method. So it saves memory.
        \n\n• <b><font color="magenta">void</font></b> is the return type of the method, it means it doesn\'t return any value.
        \n\n• <b><font color="magenta">main</font></b> is the method called when a Java application begins.It represents startup of the program.
        \n\n• <b><font color="magenta">String[] args</font></b> is used for command line argument.
        \n\n• <b><font color="magenta">System.out.println()</font></b> is used to print statement. It outputs the string \"Hello World!\" followed by a new line on the screen.
    </string>
    <string name="firstprog">
        <font color="grey">/*\n\t\t\t <i>This is a simple java program.\n\t\t\t Call this file Hello.java.</i>\n*/\n</font>
        <font color="purple">class</font> <font color="blue">Hello</font><font color="grey">{</font>
        <font color="purple">\n\t\t\t public static void</font> main(<font color="blue">String[] </font>args) <font color="grey">{</font>
        <font color="blue">\n\t\t\t\t System</font>.out.println(\"<font color="teal">Hello World!</font>\");
        <font color="grey">\n\t\t\t }</font>
        <font color="grey">\n\t }</font>
    </string>
    <string name="for_def">A for loop is a repetition control structure that allows you to efficiently write a loop that needs to be executed a specific number of times. \n<font color="purple">A for loop is useful when you know how many times a task is to be repeated.</font>\nSyntax of for loop is as follows :</string>
    <string name="for_ex">
        <font color="purple">class</font> <font color="blue">MyFor</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> ans, i, num = 2 ;\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Table of 2 :\\n</font>\");\n
        \t\t<font color="blue">for</font>(i=1; i&lt;=10; i++)<font color="grey">{</font>\n
        \t\t\t<font color="purple">ans </font>= num*i ;\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">2 x </font>\" + i + \" <font color="teal">=</font> \" + ans);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="for_loop"><b>For Loop :</b></string>
    <string name="for_output">
        Table of 2 :\n\n
        2 x 1 = 2\n
        2 x 2 = 4\n
        2 x 3 = 6\n
        2 x 4 = 8\n
        2 x 5 = 10\n
        2 x 6 = 12\n
        2 x 7 = 14\n
        2 x 8 = 16\n
        2 x 9 = 18\n
        2 x 10 = 20\n
    </string>
    <string name="for_syntax">
        <font color="blue">for</font>(initialization;condition;update)<font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code to be executed</i></font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="for_syntax_explained">The update statement allows you to update any loop control variables. You can increment or decrement the loop control variable.\nLet\'s take a look at this example :</string>
    <string name="foreach_def">Java 5 introduced a new for loop known as <font color="purple">foreach loop</font> or <font color="purple">enhanced for loop</font>, which enables you to traverse the complete array sequentially without using an index variable. The advantage of for-each loop is that it eliminates the possibility of bugs and makes the code more readable.\n\nSyntax :</string>
    <string name="foreach_ex">
        <font color="purple">class</font> <font color="blue">MyArray</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font>[] arr = <font color="grey">{</font>12,23,34,65,5,7<font color="grey">}</font>;\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i : arr)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(i);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="foreach_lets_ex">Now let us look at the following example :</string>
    <string name="foreach_one"><b>Foreach Loop</b></string>
    <string name="foreach_output">
        12\n
        23\n
        34\n
        65\n
        5\n
        7
    </string>
    <string name="foreach_syntax"><font color="blue">for</font>(<font color="purple">data_type</font> variable : array)<font color="grey">{</font>\n<font color="grey">\t\t\t//code goes here\n}</font></string>
    <string name="funover_def">If a class has multiple methods by same name but different parameters, it is known as Method Overloading.</string>
    <string name="funover_head"><b>What is Method overloading?</b></string>
    <string name="funoverr_def">If a subclass provides a specific implementation of a method that is already provided by its parent class, it is known as Method Overriding.</string>
    <string name="funoverr_head"><b>What is Method overriding?</b></string>
    <string name="gcm_defaultSenderId" translatable="false">556170566341</string>
    <string name="google_api_key" translatable="false">AIzaSyCk4B4diYkpxLTAahfV7dJxAWMxQ7w_eZ0</string>
    <string name="google_app_id" translatable="false">1:556170566341:android:3b273c32dcdc2b98</string>
    <string name="google_crash_reporting_api_key" translatable="false">AIzaSyCk4B4diYkpxLTAahfV7dJxAWMxQ7w_eZ0</string>
    <string name="google_storage_bucket" translatable="false">java-for-everyone.appspot.com</string>
    <string name="hello_blank_fragment">Java was conceived by <b><i>James Gosling</i></b>, Patrick Naughton, Chris Warth, Ed Frank, and Mike Sheridan at Sun Microsystems in 1991. This language was initially called <b><i>Oak</i></b> but was renamed <b><i>Java</i></b> in 1995.</string>
    <string name="hello_def">
        <font color="purple">class</font> <font color="blue">First</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Hello World !\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="hello_head"><b>Hello World !</b></string>
    <string name="hello_output">Hello World !</string>
    <string name="hello_world">Hello world!</string>
    <string name="hierin_def">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> color;\n
        \t\t<font color="purple">void</font> Vdisplay()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Vehicle class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> Cdisplay()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Red\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Car class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of car : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Bike</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Yellow\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Bike class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of Bike : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Car</font> c = <font color="purple">new</font> <font color="blue">Car</font>();\n
        \t\t\t<font color="blue">Bike</font> b = <font color="purple">new</font> <font color="blue">Bike</font>();\n
        \t\t\tc.Vdisplay();\n
        \t\t\tc.Cdisplay();\n
        \t\t\tb.display();\n
        \t\t\tb.Vdisplay();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="hierin_head"><b>Hierarchical Inheritance.</b></string>
    <string name="hierin_output">
        This is the Vehicle class\n
        This is the Car class\n
        Color of car : Red\n
        This is the Bike class\n
        Color of Bike : Yellow\n
        This is the Vehicle class
    </string>
    <string name="historyjava">Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms.

On 13 November 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).

On 8 May 2007, Sun finished the process, making all of Java\'s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.</string>
    <string name="ide_def">Netbeans, Eclipse, etc.</string>
    <string name="ide_head"><b>List two Java IDE\'s</b></string>
    <string name="if_def">The if statement in Java encloses a portion of code which is executed only if the applied condition is true. If statements only accept boolean expression as condition.\nSyntax of if statement is as follows :</string>
    <string name="if_else"><b>If-else Statement :</b></string>
    <string name="if_else_def">The if Else statement consists of one if condition and one else statement. It encloses a portion of code which is executed only if the <font color="blue">if</font> condition is true, if it is false then the <font color="blue">else</font> part of the code will be executed.\nSyntax of if_else statement is as follows :</string>
    <string name="if_else_ex">
        <font color="purple">class</font> <font color="blue">IfElseExample</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> num = 23 ;\n
        \t\t\t<font color="blue">if</font>(num%2 == 0) <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Even number</font>\") ;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">else</font> <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Odd number</font>\") ;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>
    </string>
    <string name="if_else_if_ladder"><b>If-else-if ladder :</b></string>
    <string name="if_else_output">Odd number</string>
    <string name="if_else_syntax"><font color="blue">if</font>(condition)<font color="grey">{</font>\n
    \t\t\t<font color="grey">//<i>code if condition is true</i></font>\n\t<font color="grey">}</font>\n
        <font color="blue">else</font><font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code if condition is false</i></font>\n
        <font color="grey">}</font>
    </string>
    <string name="if_ex"><font color="purple">class</font> <font color="blue">IfExample</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> age = 22 ;\n
        \t\t\t<font color="blue">if</font>(age > 18) <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Age is greater than 18</font>\") ;\n
        \t\t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="if_ex_output">Age is greater than 18</string>
    <string name="if_head"><b>If Statement :</b></string>
    <string name="if_lets_ex">Now let\'s take a look at this example :</string>
    <string name="if_syntax"><font color="blue">if</font>(condition)<font color="grey">{</font>\n
    \t\t\t<font color="grey">//<i>code to be executed</i></font>\n\t<font color="grey">}</font>
    </string>
    <string name="immutable_def">The String class is immutable, so that once it is created a String object can not be changed. Since String is immutable it can safely be shared between many threads, which is considered very important for multithreaded programming.</string>
    <string name="immutable_head"><b>Why String class is considered immutable?</b></string>
    <string name="inh_def">An interface is a collection of abstract methods. Interface is used to achieve complete abstraction in Java. A class implements an interface, thereby inheriting the abstract methods of the interface.</string>
    <string name="inh_head"><b>What is an Interface?</b></string>
    <string name="inherit"><i>Inheritance</i></string>
    <string name="inherit_def">Inheritance is one of the key features of Object Oriented Programming. <b>Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another.</b> With the use of inheritance the information is made manageable in a hierarchical order.\nThe class which inherits the properties of other is known as <font color="purple">subclass</font> (derived class, child class) and the class whose properties are inherited is known as <font color="purple">superclass</font> (base class, parent class). Inheritance represents the <b>IS-A</b> relationship, also known as parent-child relationship.\n\nSyntax :</string>
    <string name="inherit_ex">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> color;\n
        \t\t<font color="purple">void</font> Vdisplay()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Vehicle class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> Cdisplay()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Red\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Car class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of car : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">Car</font> c = <font color="purple">new</font> <font color="blue">Car</font>();\n
        \t\t\tc.Vdisplay();\n
        \t\t\tc.Cdisplay();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="inherit_head"><b>Inheritance</b></string>
    <string name="inherit_hierarchical">Hierarchical inheritance :</string>
    <string name="inherit_lets_ex">
        Now let us take a look at the following example :
    </string>
    <string name="inherit_more_inherit">In java programming, <b>multiple</b> and <b>hybrid</b> inheritance is supported through interface only. We will learn about interfaces later.</string>
    <string name="inherit_multilevel_syntax">
        <font color="purple">class</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">B</font> <font color="purple">extends</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">C</font> <font color="purple">extends</font> <font color="blue">B</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>
    </string>
    <string name="inherit_mutlilevel">Multilevel inheritance :</string>
    <string name="inherit_next">Next</string>
    <string name="inherit_output">
        This is the Vehicle class\n
        This is the Car class\n
        Color of car : Red
    </string>
    <string name="inherit_prev">Prev</string>
    <string name="inherit_single">Single inheritance :</string>
    <string name="inherit_single_syntax">
        <font color="purple">class</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">B</font> <font color="purple">extends</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>
    </string>
    <string name="inherit_syntax">
        <font color="purple">class</font> <font color="blue">super</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">sub</font> <font color="purple">extends</font> <font color="blue">super</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>
    </string>
    <string name="inherit_types_def">On the basis of class, there can be three types of inheritance in java :\n1. <font color="teal"><b>Single inheritance</b></font>\n2. <font color="teal"><b>Multilevel inheritance</b></font>\n3. <font color="teal"><b>Hierarchical inheritance</b></font></string>
    <string name="inherit_types_head"><b>Types of Inheritance :</b></string>
    <string name="inheritance">Inheritance can be defined as the <i><font color="purple">process where one class acquires the properties (methods and fields) of another class.</font></i> With the use of inheritance the information is made manageable in a hierarchical order. The class which inherits the properties of the other class is known as subclass(derived class, child class) and the class whose properties are inherited is known as superclass(base class, parent class).\n\n<b><font color="purple">extends</font></b> is the keyword used to inherit the properties of a class. Here is an example:\n</string>
    <string name="inhfeat_def">Features of Interface include :\n•Interface can not be instantiated.\n• An interface does not contain any constructors.\n• All of the methods in an interface are abstract. </string>
    <string name="inhfeat_head"><b>Give some features of Interface.</b></string>
    <string name="inhrit_hierarchical_syntax">
        <font color="purple">class</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">B</font> <font color="purple">extends</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">C</font> <font color="purple">extends</font> <font color="blue">A</font><font color="grey">{</font>\n
        \t\t\t.....\n
        \t\t\t.....\n
        <font color="grey">}</font>
    </string>
    <string name="instanceof_def">This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as :\n\n(<font color="purple">Object reference variable</font>) <font color="blue">instanceof</font> (<font color="purple">class/interface type</font>)\n<font color="grey">For example :</font>\n\n<font color="purple">String</font> name = \"James\" ;\n<font color="purple">boolean</font> result = name <font color="blue">instanceof</font> <font color="purple">String</font> ;</string>
    <string name="instanceoff"><b>instance of Operator :</b></string>
    <string name="instvar_def">Instance variables are variables within a class but outside any method. These variables are instantiated when the class is loaded.</string>
    <string name="instvar_head"><b>What is a Instance Variable?</b></string>
    <string name="inter_def">
        <font color="purple">interface</font> <font color="blue">Movable</font> <font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> AVERAGE-SPEED = 40;\n
        \t\t\t<font color="purple">void</font> move();\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Vehicle</font> <font color="purple">implements</font> <font color="blue">Movable</font><font color="grey">{</font>\n
        \t\t\t<font color="purple">public void</font> move()<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Average speed is : \"</font> + AVERAGE-SPEED);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Vehicle</font> obj = <font color="purple">new</font> <font color="blue">Vehicle</font>();\n
        \t\t\tobj.move();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="inter_head"><b>Interface Example.</b></string>
    <string name="inter_output">Average speed is : 40</string>
    <string name="interface_def">Interface is a pure abstract class. They are syntactically similar to classes, but you cannot create instance of an Interface and their methods are declared without any body. Interface is used to achieve complete abstraction in Java. Interface fields are public, static and final by default, and methods are public and abstract. The <b>interface</b> keyword is used to declare an interface.\nSyntax is as follows :</string>
    <string name="interface_final_ex">
        <font color="purple">interface</font> <font color="blue">Movable</font> <font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> AVERAGE-SPEED = 40;\n
        \t\t\t<font color="purple">void</font> move();\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Vehicle</font> <font color="purple">implements</font> <font color="blue">Movable</font><font color="grey">{</font>\n
        \t\t\t<font color="purple">public void</font> move()<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Average speed is : \"</font> + AVERAGE-SPEED);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Vehicle</font> obj = <font color="purple">new</font> <font color="blue">Vehicle</font>();\n
        \t\t\tobj.move();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="interface_first_ex">
        <font color="purple">interface</font> <font color="blue">Movable</font> <font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> AVERAGE-SPEED = 40;\n
        \t\t\t<font color="purple">void</font> move();\n
        <font color="grey">}</font>
    </string>
    <string name="interface_head"><b>Interface</b></string>
    <string name="interface_implement_head"><b>Interface implementation :</b></string>
    <string name="interface_lets_ex">Let\'s look at the example given below :</string>
    <string name="interface_output">Average speed is : 40</string>
    <string name="interface_syn">
        <font color="purple">interface</font> <font color="blue">interface_name</font> <font color="grey">{</font>\n
        <font color="grey">//code goes here</font>\n
        <font color="grey">}</font></string>
    <string name="ip_def">
        <font color="purple">import</font> java.net.<font color="blue">*</font>;\n
        <font color="purple">class</font> <font color="blue">MyIP</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">try</font><font color="grey">{</font>\n
        \t\t\t\t<font color="blue">InetAddress</font> ip = <font color="blue">InetAddress</font>.getByName(<font color="teal">\"www.shubhamsingh.me\"</font>);\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Host Name : \"</font> + ip.getHostName() );\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"IP Address : \"</font> + ip.getHostAddress() );\n
        \t\t\t<font color="grey">}</font>
        <font color="blue">catch</font>(Exception e)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(e);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="ip_head"><b>Display IP Address.</b></string>
    <string name="ip_output">
        Host Name : www.shubhamsingh.me\n
        IP Address : 166.62.10.136
    </string>
    <string name="javacodeoop">
    <font color="purple">class</font> <font color="blue">Father</font> <font color="grey">{</font>
        \n\n  <font color="grey">\t\t\t //<i>this is the parent class</i></font>
        \n <font color="grey">\t\t\t //<i>.........(code goes here)</i></font>\n\n<font color="grey">}</font>
        \n<font color="purple">class</font> <font color="blue">Daughter </font><font color="purple">extends</font><font color="blue"> Father</font> <font color="grey">{</font>
        \n\n   <font color="grey">\t\t\t /* <i>this is the child class which\n\t\t\t inherits from the parent class</i> */</font>
        \n <font color="grey">\t\t\t //<i>.........(code goes here)</i></font>\n\n<font color="grey">}</font>

    </string>
    <string name="javahistory">Somewhat surprisingly, the original impetus for Java was not the Internet! Instead, the primary motivation was the need for a platform-independent language that could be used to create software to be embedded in various consumer electronic devices, such as toasters, microwave ovens, and remote controls.The trouble was that (at that time) most computer languages were designed to be compiled for a specific target. For example, consider C++.
Although it was possible to compile a C++ program for just about any type of CPU, to do so required a full C++ compiler targeted for that CPU. The problem, however, is that compilers are expensive and time-consuming to create. In an attempt to find a better solution, Gosling and others worked on a portable, cross-platform language that could produce code that would
run on a variety of CPUs under differing environments. This effort ultimately led to the creation
of Java.\n</string>
    <string name="jdk"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</a></string>
    <string name="jdkexample"><font color="teal">JRE</font> <font color="grey">=</font> JVM <font color="grey">+</font> <i>Required Library to run Application.</i>\n\n<font color="teal">JDK</font> <font color="grey">=</font> JRE <font color="grey">+</font> <i>Required Library to develop Java Application.</i></string>
    <string name="jre_def">Java Runtime Environment is an implementation of the Java Virtual Machine which executes Java programs. It provides the minimum requirements for executing a Java application.</string>
    <string name="jre_head"><b>Define JRE i.e. Java Runtime Environment.</b></string>
    <string name="ladder_def">The if-else-if ladder statement executes one condition from multiple statements.\nSyntax of if-else-if ladder is as follows :</string>
    <string name="ladder_ex">
        <font color="purple">class</font> <font color="blue">IfElseLadder</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> marks = 73;\n
        \t\t<font color="blue">if</font>(marks >= 90) <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Seriously? what are you, a ninja?</font>\") ;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="blue">else if</font>(marks >= 80 &amp;&amp; marks &lt; 90 ) <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Nicely done !!</font>\") ;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="blue">else if</font>(marks >= 60 &amp;&amp; marks &lt; 80 ) <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">I see how it is !!</font>\") ;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="blue">else</font> <font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">No parties this semester !!</font>\") ;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
</string>
    <string name="ladder_output">I see how it is !!</string>
    <string name="ladder_syntax">
        <font color="blue">if</font>(condition 1)<font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code if condition 1 is true</i></font>\n\t<font color="grey">}</font>
        <font color="blue">else if</font>(condition 2)<font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code if condition 2 is true</i></font>\n
        \t<font color="grey">}</font>
        <font color="blue">else if</font>(condition 3)<font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code if condition 3 is true</i></font>\n
        \t<font color="grey">}</font>
        <font color="blue">else</font><font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code if all conditions are false</i></font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="letsSetJDK">Let\'s set up a few things before we run a program of JAVA.\n\nFirst of all you will have to download and install JDK. If you don\'t have installed it download it from here:</string>
    <string name="literals"><b>Literals</b></string>
    <string name="literals_def"><font color="purple">In Java, literals refer to fixed values that are represented in their human-readable form.</font> For example, <i>the number 100 is a literal.</i> Literals are also commonly called constants. They are syntactic representations of boolean, character, numeric, or string data. Literals provide a means of expressing specific values in your program. Literals can be assigned to any primitive type variable.\nFor example −</string>
    <string name="literals_def_ex"><font color="purple">int</font> a = 120 ;\n<font color="purple">char</font> b = \'A\' ;</string>
    <string name="literals_def_last">In above example, <font color="blue">120</font> and <font color="blue">A</font> are literals.</string>
    <string name="localv_def">Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and it will be destroyed when the method has completed.</string>
    <string name="localv_head"><b>What is a Local Variable?</b></string>
    <string name="logical"><b>The Logical Operators :</b></string>
    <string name="logical_def">The following table lists the logical operators :\n\n<font color="blue"><b>&amp;&amp;</b></font>\t\t\t\t\tLogical and\n\t\t\t\t\t\t (if both operands\n\t\t\t\t\t\t are non-zero,\n\t\t\t\t\t\t then the condition\n\t\t\t\t\t\t becomes true.)\n\n<font color="blue"><b>||</b></font>\t\t\t\t\tLogical or\n\t\t\t\t\t\t (if any of\n\t\t\t\t\t\t the operands are\n\t\t\t\t\t\t non-zero then,\n\t\t\t\t\t\t the condition becomes\n\t\t\t\t\t\t true.)\n\n<font color="blue"><b>!</b></font>\t\t\t\t\tLogical not\n\t\t\t\t\t\t (if a condition\n\t\t\t\t\t\t is true then\n\t\t\t\t\t\t logical not operator\n\t\t\t\t\t\t will make it\n\t\t\t\t\t\t false.)</string>
    <string name="loop_def">There may be a situation when you need to execute a block of code several number of times. In this chapter we will learn about loops !\nA loop in Java allows us to execute a statement or group of statements multiple times. Java programming language provides us with different types of loops. In this section we are going to learn about the for loop :</string>
    <string name="loop_in_java"><b>Loops in Java :</b></string>
    <string name="madewithlove">Made with ♡ in India</string>
    <string name="meth_def">
        <font color="purple">class</font> <font color="blue">MyMethod</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> name;\n
        \t\t<font color="purple">int</font> age;\n
        \t\t<font color="purple">void</font> set(<font color="blue">String</font> myname, <font color="purple">int</font> myage)<font color="grey">{</font>\n
        \t\t\tname = myname;\n
        \t\t\tage = myage;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Customer name : \"</font> + name);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Customer age : \"</font> + age + <font color="teal">\"\\n\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">MyMethod</font> obj1 = <font color="purple">new</font> <font color="blue">MyMethod</font>();\n
        \t\t\t<font color="blue">MyMethod</font> obj2 = <font color="purple">new</font> <font color="blue">MyMethod</font>();\n
        \t\t\tobj1.set(<font color="teal">\"Gaurav\"</font>, 20);\n
        \t\t\tobj2.set(<font color="teal">\"Lucky\"</font>, 18);\n
        \t\t\tobj1.display();\n
        \t\t\tobj2.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="meth_head"><b>Method Example.</b></string>
    <string name="meth_output">
        Customer name : Gaurav\n
        Customer age : 20\n\n
        Customer name : Lucky\n
        Customer age : 18

    </string>
    <string name="method_call_def">For using a method, <font color="purple">it must be called</font>. The process of method calling is simple. When a program invokes a method, the program control gets transferred to the called method. This called method then returns control to the caller.\nLet us take a look at the example given below.</string>
    <string name="method_call_head"><b>Calling a Method :</b></string>
    <string name="method_create_head"><b>Creating Methods :</b></string>
    <string name="method_def">A Java method is a <font color="purple">collection of statements that are grouped together to perform an operation</font>. In other words, you group Java operations (code) inside Java methods. In Java, methods and functions are really the same thing. In well-written Java code, each method performs only one task. Each method has a name, and it is this name that is used to call the method.</string>
    <string name="method_example_1">
        <font color="purple">public static void</font> myNum(<font color="purple">int</font> num)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> x;\n
        \t\tx = num;\n
        \t<font color="blue">System</font>.out.println(<font color="teal">\"Value : \"</font> + x);\n
        <font color="grey">}</font>
    </string>
    <string name="method_example_final">
        <font color="purple">public class</font> <font color="blue">MyMethod</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> myNum(<font color="purple">int</font> num)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> x;\n
        \t\t\tx = num;\n
        \t\t<font color="blue">System</font>.out.println(<font color="teal">\"Value of the argument passed is : \"</font> + x);\n
        \t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> a = 20;\n
        \t\t<font color="blue">System</font>.out.println(<font color="teal">\"I am main method!\"</font>);\n
        \t\t<font color="grey">// <i>Calling the method</i></font>\n
        \t\tmyNum(a);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="method_head"><b>Methods</b></string>
    <string name="method_output">
        I am main method!\nValue of the argument passed is : 20
    </string>
    <string name="method_syntax">Method definition consists of a method header and a method body.\nLet\'s take a look at the following syntax—</string>
    <string name="method_syntax_forreal">
        <font color="purple">modifier</font> <font color="blue">returnType</font> name (<font color="purple">Parameter List</font>)<font color="grey">{</font>\n
        \t\t\t<font color="grey">// <i>method body</i></font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="method_syntax_lets__understand">
        Let\'s understand the syntax shown above :\n
        • <font color="blue"><b>modifier</b></font> : It defines the access type of the method and <font color="purple">it is optional to use</font>.\n\n
        • <font color="blue"><b>returnType</b></font> : It specifies the type of data returned by the method. If the method does not return a value, its return type must be <font color="purple">void</font>.\n\n
        • <font color="blue"><b>name</b></font> : This is the name of the method. This can be any legal identifier other than those already used by other items within the current scope.\n\n
        • <font color="blue"><b>Parameter List</b></font> : It is a sequence of type and identifier pairs separated by commas. Parameters are essentially variables that receive the value of the arguments passed to the method when it is called. If the method has no parameters, the parameter list will be empty.\n\n
        Now for more clear understanding let us look at the example shown below :
    </string>
    <string name="methover_def">
         <font color="purple">class</font> <font color="blue">OverMethod</font><font color="grey">{</font>\n
        \t\tvoid myMethod(<font color="purple">int</font> x, <font color="purple">int</font> y)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = x+y;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t\tvoid myMethod(<font color="purple">int</font> x, <font color="purple">int</font> y, <font color="purple">int</font> z)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = x+y+z;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">OverMethod</font> myobj = <font color="purple">new</font> <font color="blue">OverMethod</font>();\n
        \t\tmyobj.myMethod(<font color="purple">45</font>, <font color="purple">35</font>);\n
        \t\tmyobj.myMethod(<font color="purple">55</font>, <font color="purple">65</font>, <font color="purple">25</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="methover_head"><b>Method Overloading.</b></string>
    <string name="methover_output">
        80\n
        145
    </string>
    <string name="methride_def">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"There is a ninja in my Vehicle\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"There is a zombie in my Car\"</font>);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Car</font> obj = <font color="purple">new</font> <font color="blue">Car</font>();\n
        \t\t\t\tobj.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="methride_head"><b>Method Overriding.</b></string>
    <string name="methride_output">There is a zombie in my Car</string>
    <string name="michael">Michael Arthur Sayman is a mobile application entrepreneur and software engineer.Michael was born in Miami, Florida in 1996. He lives in San Francisco currently and works at Facebook as the youngest full time engineer. He is best known for creating one of the fastest growing mobile game apps built by a teenager, 4 Snaps, which is a turn-based photo game, developed in his junior year of high school in 2013. He is currently the youngest Product Manager at Facebook. Michael started programming and published his first app under his own company at the age of 13. At the age of 16, Michael developed an app named <i>“4 Snaps”</i>.</string>
    <string name="misc_example"><font color="purple">variable</font> x <font color="grey">=</font> (expression) <font color="blue">?</font> value if true <font color="blue">:</font> value if false <font color="grey">;</font></string>
    <string name="misc_here_example">Following is the example :</string>
    <string name="misc_output">Output :</string>
    <string name="misc_real_ex">
        <font color="purple">class</font> <font color="blue">Mytest</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void main</font>(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t\t<font color="purple">int</font> a, b <font color="grey">;</font>\n
        \t\t\t\ta = 25<font color="grey"> ;</font>\n
        \t\t\t\tb = <font color="grey">(</font>a==5<font color="grey">)</font> ? 50 : 60 <font color="grey">;</font>\n
        \t\t\t\t<font color="purple">System</font>.out.println<font color="grey">(</font><font color="teal">\"value of b = \"</font><font color="grey"> +</font> b<font color="grey">)</font> <font color="grey">;</font>\n

        \t\t\t\tb = <font color="grey">(</font>a==25<font color="grey">)</font> ? 50 : 60 <font color="grey">;</font>\n
        \t\t\t\t<font color="purple">System</font>.out.println<font color="grey">(</font><font color="teal">\"value of b = \"</font><font color="grey"> +</font> b<font color="grey">)</font> <font color="grey">;</font>\n
        \t\t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="misc_real_output">value of b = 60\n\nvalue of b = 50</string>
    <string name="miscellaneous"><b>Miscellaneous Operators :</b></string>
    <string name="miscellaneous_def">There are few other operators supported by Java Language.\n\n<font color="teal"><b>Conditional Operator </b></font><font color="blue"><b>( ? : )</b></font>\n\t\t\t\t\t\t\t\t\t\t\tConditional operator is also known as the ternary operator. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide which value should be assigned to the variable.\nThe operator is written as :</string>
    <string name="mod_def">The access modifiers in java specifies <i>accessibility (scope)</i> of a variable, method, constructor or class.
        \nThere are four types of java access modifiers :
        \n\n1. Private
        \n2. Default
        \n3. Protected
        \n4. Public
        \n\nThere are many non-access modifiers such as static, abstract, synchronized, native, volatile, transient etc. Here, we will learn access modifiers.
    </string>
    <string name="mod_def_two">Variables that are declared private can be accessed outside the class, if public getter methods are present in the class. Using the private modifier is the main way that an object encapsulates itself and hides data from the outside world.
        \nLet\'s take a look at the simple example below :
    </string>
    <string name="mod_default_def">Default access modifier means we do not explicitly declare an access modifier for a class, field, method, etc. A variable or method declared without any access control modifier is available to any other class in the same package.\n\nIn the above example the <font color="blue">ItsPrivate</font> class has no access modifier declared and hence it has default access modifier.</string>
    <string name="mod_private_def">Methods, variables, and constructors that are declared private can <font color="purple"><b>only be accessed within the declared class itself.</b></font>
        \nPrivate access modifier is the most restrictive access level.
    </string>
    <string name="mod_private_example">
        <font color="purple">class</font> <font color="blue">ItsPrivate</font><font color="grey">{</font>\n
        \t\t<font color="purple">private</font> <font color="blue">String</font> myName;\n
        \t\t<font color="blue">void</font> setMyname(<font color="blue">String</font> myName)<font color="grey">{</font>\n
        \t\t\t<font color="purple">this.</font>myName = myName;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="blue">String</font> getMyname()<font color="grey">{</font>\n
        \t\t\t<font color="purple">return</font> myName;\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\t\n
        \t\t\t<font color="blue">ItsPrivate</font> obj = <font color="purple">new</font> <font color="blue">ItsPrivate</font>();\n
        \t\t\tobj.setMyname(<font color="teal">\"togetherBus\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(obj.getMyname());\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="mod_private_extra">Here, the <i>myName</i> variable of the <i>ItsPrivate</i> class is private, so there\'s no way for other classes to retrieve or set its value directly. So, to make this variable available to the outside world, we defined two methods: getMyname(), which returns the value of myName, and setMyname(String), which sets its value.</string>
    <string name="mod_private_output">togetherBus</string>
    <string name="mod_protected_def">The protected access modifier is accessible within package and outside the package but through inheritance only. The protected access modifier cannot be applied to class and interfaces.\nLet us take a look at the following example :</string>
    <string name="mod_protected_ex">
        <font color="purple">package</font> pack;\n
        <font color="purple">class</font> <font color="blue">ItsProtected</font><font color="grey">{</font>\n
        \t\t<font color="purple">protected</font> <font color="blue">void</font> display(<font color="blue">String</font> myName)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(myName);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n\n
        <font color="purple">package</font> mypack;\n
        <font color="purple">import</font> pack.*;\n
        <font color="purple">class</font> <font color="blue">IamMain</font> <font color="purple">extends</font> <font color="blue">ItsProtected</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\t\n
        \t\t\t<font color="blue">IamMain</font> obj = <font color="purple">new</font> <font color="blue">IamMain</font>();\n
        \t\t\tobj.display(<font color="teal">\"Welcome to togetherBus\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="mod_public_def">The public access modifier is accessible everywhere. It has the widest scope among all other modifiers.\nLet us take a look at the following example :</string>
    <string name="mod_public_ex">
        <font color="purple">package</font> pack;\n
        <font color="purple">public</font> <font color="purple">class</font> <font color="blue">IamPublic</font><font color="grey">{</font>\n
        \t\t<font color="purple">public</font> <font color="blue">void</font> display(<font color="blue">String</font> myName)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(myName);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n\n
        <font color="purple">package</font> mypack;\n
        <font color="purple">import</font> pack.*;\n
        <font color="purple">class</font> <font color="blue">IamMain</font> <font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\t\n
        \t\t\t<font color="blue">IamPublic</font> obj = <font color="purple">new</font> <font color="blue">IamPublic</font>();\n
        \t\t\tobj.display(<font color="teal">\"Hello there\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="mover_def">If a class have multiple methods by same name but different parameters, it is known as Method Overloading.\n\nThe argument list could differ in :\n<b><font color="purple">•</font> <font color="teal">Number of parameters</font>\n<font color="purple">•</font> <font color="teal">Data type of parameters</font></b>.\nIt is not sufficient for two methods to differ only in their return types. Of course, overloaded methods may differ in their return types, too.\n\nFollowing is an example of method overloading by <u>changing the number of parameters</u> :</string>
    <string name="mover_first_ex">
        <font color="purple">class</font> <font color="blue">OverMethod</font><font color="grey">{</font>\n
        \t\tvoid myMethod(<font color="purple">int</font> x, <font color="purple">int</font> y)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = x+y;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t\tvoid myMethod(<font color="purple">int</font> x, <font color="purple">int</font> y, <font color="purple">int</font> z)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = x+y+z;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">OverMethod</font> myobj = <font color="purple">new</font> <font color="blue">OverMethod</font>();\n
        \t\tmyobj.myMethod(<font color="purple">45</font>, <font color="purple">35</font>);\n
        \t\tmyobj.myMethod(<font color="purple">55</font>, <font color="purple">65</font>, <font color="purple">25</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="mover_first_output">
        80\n
        145
    </string>
    <string name="mover_head"><b>Method Overloading</b></string>
    <string name="mover_second_ex">
        <font color="purple">class</font> <font color="blue">OverMethod</font><font color="grey">{</font>\n
        \t\tvoid myMethod(<font color="purple">int</font> x, <font color="purple">int</font> y)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = x+y;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t\tvoid myMethod(<font color="purple">double</font> x, <font color="purple">double</font> y)<font color="grey">{</font>\n
        \t\t\t<font color="purple">double</font> sum = x+y;\n
        \t\t\t<font color="blue">System</font>.out.println(sum);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">OverMethod</font> myobj = <font color="purple">new</font> <font color="blue">OverMethod</font>();\n
        \t\tmyobj.myMethod(<font color="purple">15.5</font>, <font color="purple">20.3</font>);\n
        \t\tmyobj.myMethod(<font color="purple">31</font>, <font color="purple">50</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="mover_second_lets">Following is the example of method overloading by <u>changing the data type of parameters</u> :</string>
    <string name="mover_second_output">
        35.8\n
        81
    </string>
    <string name="multiin_def">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> color;\n
        \t\t<font color="purple">void</font> Vdisplay()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Vehicle class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> Cdisplay()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Red\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Car class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of car : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Sedan</font> <font color="purple">extends</font> <font color="blue">Car</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Grey\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Sedan class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of sedan : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">Sedan</font> s = <font color="purple">new</font> <font color="blue">Sedan</font>();\n
        \t\t\ts.Vdisplay();\n
        \t\t\ts.Cdisplay();\n
        \t\t\ts.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="multiin_head"><b>Multilevel Inheritance.</b></string>
    <string name="multiin_output">
        This is the Vehicle class\n
        This is the Car class\n
        Color of car : Red\n
        This is the Sedan class\n
        Color of sedan : Grey
    </string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="nested_if"><b>Nested if statements :</b></string>
    <string name="nested_if_def">It is always legal to nest if-else statements which means you can use one if or else if statement inside another if or else if statement.\nSyntax of nested-if statement is as follows :</string>
    <string name="nested_if_ex">
        <font color="purple">class</font> <font color="blue">NestedIfExample</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> x = 23, y = 30 ;\n
        \t\t<font color="blue">if</font>(x == 23) <font color="grey">{</font>\n
        \t\t\t<font color="blue">if</font>(y == 30) <font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">x = 23 and y = 30</font>\") ;\n
        \t\t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="nested_if_output">x = 23 and y = 30</string>
    <string name="nested_if_syntax">
        <font color="blue">if</font>(condition 1)<font color="grey">{</font>\n
        \t\t<font color="grey">//<i>Executes when the condition 1 is true</i></font>\n
        \t\t\t<font color="blue">if</font>(condition 2)<font color="grey">{</font>\n
        \t\t\t\t<font color="grey">//<i>Executes when the condition 2 is true</i></font>\n
        \t\t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="nextsteps">Now that you have installed JDK, you need to set the environment variables to point to correct installation directories.</string>
    <string name="nextsteps2">If you are having your java file outside the jdk/bin folder, it is necessary to set path of JDK.\n\nThere are two ways to set java path:\n\n1. <font color="purple">Temporary</font>\n\n2. <font color="purple">Permanent</font></string>
    <string name="non_primitive"><b>Non-Primitive Data Types :</b></string>
    <string name="non_primitive_def">Non-primitive data types are not defined by the programming language, but are instead created by the programmer. They are sometimes called <font color="blue">\"reference variables\"</font> or <font color="blue">\"object references\"</font>. Objects (Classes &amp; Interfaces) and Arrays are the reference or non-primitive data types in Java.\n\nFor Example:\n\t\t\t\t <font color="purple">String, int[], String[], etc.</font></string>
    <string name="non_q">What do you mean by synchronized Non Access Modifier?</string>
    <string name="non_q_ans">Java provides these modifiers for providing functionalities other than Access Modifiers, synchronized used to indicate that a method can be accessed by only one thread at a time.</string>
    <string name="oandc_class_def"> <font color="purple"><b>A class is a blueprint or a template for creating different objects which defines its properties and behaviors.</b></font> Thus, a class is essentially a set of plans that specify how to build an object. It is important to be clear on one issue: a class is a logical abstraction. It is not until an object of that class has been created that a physical representation of that class exists in memory.\nFollowing is a sample of a class :</string>
    <string name="oandc_class_head"><b>Classes in Java :</b></string>
    <string name="oandc_class_sample">
        <font color="purple">class</font> <font color="blue">Calc</font><font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> num1, num2, sum;\n
        \t\t\t<font color="purple">int</font> calculate()<font color="grey">{</font>\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="oandc_class_sample_def">A class can have any number of methods to access the value of various kinds of methods. In the above example, calculate(), display() are methods.</string>
    <string name="oandc_createObject_def">As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects. <font color="purple"><b>Instance variables and methods are accessed via created objects.</b></font>\nLet us look at the following snippet which contains syntax and example for creating an object :</string>
    <string name="oandc_createobject_syntax">
        <font color="grey">// <i>Syntax</i> :</font>\n
        <font color="blue">className</font> objName = <font color="purple">new</font> <font color="blue">className</font>();\n\n
        <font color="grey">// <i>Example</i> :</font>\n
        <font color="blue">Calc</font> obj1 = <font color="purple">new</font> <font color="blue">Calc</font>();
    </string>
    <string name="oandc_creatingObjects"><b>Creating an Object :</b></string>
    <string name="oandc_final_example">
        <font color="purple">class</font> <font color="blue">Calc</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num1, num2, sum;\n
        \t\t<font color="purple">void</font> calculate(<font color="purple">int</font> a, <font color="purple">int</font> b)<font color="grey">{</font>\n
        \t\t\tnum1 = a;\n
        \t\t\tnum2 = b;\n
        \t\t\tsum = num1 + num2;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">First number is : </font>\" + num1);\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Second number is : </font>\" + num2);\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Sum of the two numbers is : </font>\" + sum);\n
        \t\t<font color="grey">}</font>\n\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> x = 20, y = 30;\n
        \t\t<font color="grey">// <i>creating object</i></font>\n
        \t\t<font color="blue">Calc</font> obj1 = <font color="purple">new</font> <font color="blue">Calc</font>();\n
        \t\t<font color="grey">/* <i>call the method calculate</i> */</font>\n
        \t\t\tobj1.calculate(x, y);\n
        \t\t<font color="grey">/* <i>call the method display</i> */</font>\n
        \t\t\tobj1.display();\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="oandc_final_output">
        First number is : 20\n
        Second number is : 30\n
        Sum of the two numbers is : 50
    </string>
    <string name="oandc_lets_ex">In order to completely understand this lesson let us take a look at the following example :</string>
    <string name="oandc_obj"><b>Objects in Java :</b></string>
    <string name="oandc_obj_def">Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. <font color="purple"><b>An object is an instance of a class</b></font>.</string>
    <string name="object_def">Object is a runtime entity and it\'s state is stored in fields and behavior is shown via methods. Methods operate on an object\'s internal state and serve as the primary mechanism for object-to-object communication.</string>
    <string name="object_head"><b>What do you mean by Object?</b></string>
    <string name="obp_def">Object based programming languages follow all the features of OOPs except Inheritance. JavaScript is an example of object based programming language.</string>
    <string name="obp_head"><b>What is the difference between Object Oriented Programming language and Object Based Programming language?</b></string>
    <string name="oopdef"><i><font color="purple">Java is an Object-Oriented Programming language (OOP).</font></i> OOP is a powerful way to approach the job of programming. Prior to the invention of OOP, many projects were nearing (or exceeding) the point where the structured approach no longer works. Object-oriented methods were created to help programmers break through these barriers. Object-oriented programs work the other way around. They are organized around data, with the key principle being \“data controlling access to code.\” Features of Object-Oriented Programming are :</string>
    <string name="oopheading"><b>Object-Oriented Programming :</b></string>
    <string name="operators_arithmetic"><b>The Arithmetic Operators :</b></string>
    <string name="operators_def">Operator in java is a symbol that is used to perform an operation.\nWe can divide all the Java operators into the following groups:\n\n• Arithmetic Operators\n• Relational Operators\n• Bitwise Operators\n• Logical Operators\n• Assignment Operators\n• Miscellaneous Operators</string>
    <string name="operators_head"><b>Operators</b></string>
    <string name="operators_relational"><b>The Relational Operators :</b></string>
    <string name="override_def">When a method in a sub class has same name and type signature as a method in its super class, then the method in the subclass is said to override the method in the superclass.\n\t\t\t\t\t\t\tThe key benefit of overriding is the ability to define method that\'s specific to a particular subclass type. Method overriding is used for runtime polymorphism.\n\nLet us look at the following example :</string>
    <string name="override_ex">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"There is a ninja in my Vehicle\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"There is a zombie in my Car\"</font>);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Car</font> obj = <font color="purple">new</font> <font color="blue">Car</font>();\n
        \t\t\t\tobj.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="override_head"><b>Method Overriding</b></string>
    <string name="override_output">There is a zombie in my Car</string>
    <string name="override_rules">
        • The argument list should be exactly the same as that of the overridden method.\n
        • Method must have same name as in the parent class\n
        • A method declared final cannot be overridden.\n
        • A method declared static cannot be overridden but can be re-declared.\n
        • Constructors cannot be overridden.
    </string>
    <string name="override_rules_head"><b>Rules for Overriding :</b></string>
    <string name="pack_def">A Package can be defined as a grouping of related types (classes, interfaces, enumerations and annotations) providing access protection and name space management.</string>
    <string name="pack_head"><b>Define Packages in Java.</b></string>
    <string name="package_create_def">Creating a package in java is quite easy. Simply include a package command followed by name of the package as the first statement in java source file. There can be only one package statement in each source file, and it applies to all types in the file.\nTo compile the Java programs with package statements, you have to use -d option as shown below :</string>
    <string name="package_create_head"><b>Creating a Package :</b></string>
    <string name="package_def">Package are used in Java, in-order to avoid name conflicts and to control access of class, interface and enumeration etc. <font color="teal"><b>A Package can be defined as a grouping of related types (classes, interfaces, enumerations and sub-packages )</b></font> providing access protection and namespace management.\n\nPackage are categorized into two forms :\n• <font color="purple">Built-in Package:-Existing Java package for example java.lang, java.util etc.</font>\n\n• <font color="purple">User-defined-package:- Java package created by user to categorized classes and interface.</font></string>
    <string name="package_ex">
        <font color="purple">package</font> mypack;\n\n
        <font color="purple">class</font> <font color="blue">Pack</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is example of package\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="package_ex_head"><b>Example :</b></string>
    <string name="package_head"><b>Packages</b></string>
    <string name="package_import"><font color="purple"><b>import</b></font> keyword is used to import built-in and user-defined packages into your java source file. So that your class can refer to a class that is in another package by directly using its name.\nLet us look at the example given below :</string>
    <string name="package_import_ex">
        <font color="purple">import</font> java.util.Date;\n
        <font color="purple">class</font> <font color="blue">Myimport</font> <font color="purple">extends</font> <font color="blue">Date</font><font color="grey">{</font>\n
        \t\t\t<font color="grey">//code goes here</font>\n
        <font color="grey">}</font>
    </string>
    <string name="package_import_head"><b>import keyword :</b></string>
    <string name="package_output">This is example of package</string>
    <string name="package_syn"><font color="purple">javac</font> <font color="magenta">-d</font> Destination_folder file_name.java</string>
    <string name="palin_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">MyPalindrome</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> r, rev=0, temp, num;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter a number to check whether its palindrome or not\\n\"</font>);\n
        \t\t\tnum = scan.<font color="purple">nextInt</font>();\n
        \t\t\ttemp = num;\n
        \t\t\t<font color="blue">while</font>(num>0)<font color="grey">{</font>\n
        \t\t\t\tr = num%10;\n
        \t\t\t\trev = (sum*10)+r;\n
        \t\t\t\tnum = num/10;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">if</font>(temp == rev)\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Palindrome number\"</font>);\n
        \t\t\t<font color="blue">else</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Not Palindrome\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="palin_head"><b>Palindrome Number.</b></string>
    <string name="palin_output">
        Enter a number to check whether its palindrome or not\n\n
        565\n
        Palindrome number
    </string>
    <string name="permanentpath">For setting the permanent path of JDK, you need to follow these steps:\n\n<b>•</b> Right-click on <font color="blue">\'My Computer\'</font> and select <font color="purple">\'Properties\'.</font>\n\n<b>•</b> Click on <font color="blue">\'Advanced system settings\'</font> tab and then click on <font color="purple">\'Environment Variables\'</font> button.\n\n<b>•</b> Click on the <font color="blue">\'New\'</font> tab of User Variables.\n\n<b>•</b> Now write <font color="blue">\'Path\'</font> in variable name and write the <font color="purple">location of jdk/bin folder</font> in variable value.</string>
    <string name="platform_def">The source code (.java file) is compiled by the java compiler (javac) into a <b>bytecode</b> (.class file), this bytecode can be run on any machine having any OS installed on the machine pertaining to the particular OS.\n\nSo the JRE for Windows is different, for Linux-based OS it is different etc. but the bytecode generated on a windows machine can be run on a mac(for e.g.) with JRE, for mac installed.Therefore, though JRE is platform dependent, the bytecode is platform independent. Thus, java is platform independent.</string>
    <string name="platform_head"><b>How is Java platform independent ?</b></string>
    <string name="poly"><i>Polymorphism</i></string>
    <string name="polymorphism">\"Polymorphism (poly means \'many\' and morphs means \'forms\') is the<i><font color="purple"> ability of an object to take on many forms.\"</font></i> The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object. Any Java object that can pass more than one IS-A test is considered polymorphic.</string>
    <string name="prime_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">Prime</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> a, m=0, flag=0;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Program to check whether a number is Prime or not\\n\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter a number\"</font>);\n
        \t\t\ta = scan.<font color="purple">nextInt</font>();\n
        \t\t\tm=a/2;\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i=2; i&lt;=m; i++)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">if</font>(n%i == 0)<font color="grey">{</font>\n
        \t\t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Number is not Prime\"</font>);\n
        \t\t\t\t\tflag = 1;\n
        \t\t\t\t\tbreak;\n
        \t\t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">if</font>(flag == 0)\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Number is Prime\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
    </string>
    <string name="prime_head"><b>Prime number.</b></string>
    <string name="prime_output">
        Program to check whether a number is Prime or not.\n\n
        Enter a number\n
        17\n
        Number is Prime
    </string>
    <string name="printhello"><b>Program to print \'Hello World!\' :</b></string>
    <string name="prog_max_code">
        <font color="purple">import</font> java.util.<font color="blue">*</font>;\n
        <font color="purple">class</font> <font color="blue">Max</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter two numbers :\"</font>);\n
        \t\t\t<font color="purple">int</font> first = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="purple">int</font> second = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="blue">if</font>(first > second)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(first + <font color="teal">\" is greater than \"</font> + second);\n
        \t\t\t<font color="grey">}</font> <font color="blue">else if</font>(first == second)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"both numbers are equal\"</font>);\n
        \t\t\t<font color="grey">}</font> <font color="blue">else</font><font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(second + <font color="teal">\" is greater than \"</font> + first);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="prog_max_head">Find Maximum of two numbers.</string>
    <string name="prog_max_output">
        Enter two numbers :\n
        15\n
        10\n
        15 is greater than 10
    </string>
    <string name="relational_def">There are following relational operators supported by Java language :\n\n<font color="blue"><b>==</b></font>\t\t\t\t\tEqual to operator\n\t\t\t\t\t\t (if values of\n\t\t\t\t\t\t two operands are\n\t\t\t\t\t\t equal then condition\n\t\t\t\t\t\t becomes equal.)\n\n<font color="blue"><b>!=</b></font>\t\t\t\t\tNot equal to operator\n\t\t\t\t\t\t (if values of\n\t\t\t\t\t\t two operands are\n\t\t\t\t\t\t not equal then\n\t\t\t\t\t\t condition becomes true.)\n\n<font color="blue"><b>></b></font>\t\t\t\t\tGreater than operator\n\t\t\t\t\t\t (if value of\n\t\t\t\t\t\t left operand is\n\t\t\t\t\t\t greater than the\n\t\t\t\t\t\t value of right\n\t\t\t\t\t\t operand then condition\n\t\t\t\t\t\t becomes true.)\n\n<font color="blue"><b>&lt;</b></font>\t\t\t\t\tLess than operator\n\t\t\t\t\t\t (if value of\n\t\t\t\t\t\t left operand is\n\t\t\t\t\t\t less than the\n\t\t\t\t\t\t value of right\n\t\t\t\t\t\t operand then condition\n\t\t\t\t\t\t becomes true.)\n\n<font color="blue"><b>>=</b></font>\t\t\t\t\tGreater than or equal to\n\t\t\t\t\t\t (if value of\n\t\t\t\t\t\t left operand is\n\t\t\t\t\t\t greater than or\n\t\t\t\t\t\t equal to the\n\t\t\t\t\t\t value of right\n\t\t\t\t\t\t operand then condition\n\t\t\t\t\t\t becomes true.)\n\n<font color="blue"><b>&lt;=</b></font>\t\t\t\t\tLess than or equal to\n\t\t\t\t\t\t (if value of\n\t\t\t\t\t\t left operand is\n\t\t\t\t\t\t less than or\n\t\t\t\t\t\t equal to the\n\t\t\t\t\t\t value of right\n\t\t\t\t\t\t operand then condition\n\t\t\t\t\t\t becomes true.)</string>
    <string name="serial_def">Serialization is the process of writing the state of an object to a byte stream. Deserialization is the process of restoring these objects.</string>
    <string name="serial_head"><b>What is Serialization and deserialization?</b></string>
    <string name="setjava_setpemanent"><b>Set Permanent path :</b></string>
    <string name="setjava_settemp"><b>Set Temporary path :</b></string>
    <string name="setjava_setthepath"><b>Set the Path :</b></string>
    <string name="singlein_def">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> color;\n
        \t\t<font color="purple">void</font> Vdisplay()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Vehicle class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> Cdisplay()<font color="grey">{</font>\n
        \t\t\tcolor = <font color="teal">\"Red\"</font>;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This is the Car class\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Color of car : \"</font> + color);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">Car</font> c = <font color="purple">new</font> <font color="blue">Car</font>();\n
        \t\t\tc.Vdisplay();\n
        \t\t\tc.Cdisplay();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="singlein_head"><b>Single Inheritance.</b></string>
    <string name="singlein_output">
        This is the Vehicle class\n
        This is the Car class\n
        Color of car : Red
    </string>
    <string name="singleton_def">Singleton class control object creation, limiting the number to one but allowing the flexibility to create more objects if the situation changes.</string>
    <string name="singleton_head"><b>What is Singleton class?</b></string>
    <string name="static_def">
        <font color="purple">class</font> <font color="blue">FinalVar</font><font color="grey">{</font>\n
        \t\t<font color="grey"><i>/* We can access a static method directly without making object of the class */</i></font>\n
        \t\t<font color="purple">static void</font> add(<font color="purple">int</font> a, <font color="purple">int</font> b)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> sum = a+b;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Sum of the two numbers is : \"</font> + sum);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\tadd(<font color="purple">95,30</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
    </string>
    <string name="static_head"><b>Static Method.</b></string>
    <string name="static_output">Sum of the two numbers is : 125</string>
    <string name="staticvar_def">Class variables also known as static variables are declared with the <b>static</b> keyword in a class, but outside a method, constructor or a block.</string>
    <string name="staticvar_head"><b>What is a static variable?</b></string>
    <string name="status_bar_notification_info_overflow">999+</string>
    <string name="str_def">
        <font color="purple">class</font> <font color="blue">ToChar</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">String</font> s1 = <font color="teal">\"Shubham\"</font>;\n
        \t\t\t<font color="purple">char</font>[] s2;\n
        \t\t\ts2 = s1.toCharArray();\n
        \t\t\t<font color="blue">for</font>(<font color="purple">int</font> i=0; i&lt;s2.length; i++)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.print(s2[i]);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="str_head"><b>String to Character Array.</b></string>
    <string name="str_output">Shubham</string>
    <string name="string_concat_def">The String class includes a method for concatenating two strings :</string>
    <string name="string_concat_ex">
        <font color="purple">class</font> <font color="blue">StringConcat</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">String</font> str1 = \"<font color="teal">I love</font>\";\n
        \t\t<font color="blue">String</font> str2 = \"<font color="teal"> Java</font>\";\n
        \t\t<font color="blue">String</font> str3 = str1.concat(str2);\n
        \t\t<font color="blue">System</font>.out.println(str3);\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Love,</font>\" + \"<font color="teal"> togetherBus</font>\");\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="string_concat_head"><b>Concatenating Strings :</b></string>
    <string name="string_concat_output">
        I love Java\n
        Love, togetherBus
    </string>
    <string name="string_concat_secondway">Strings are more commonly concatenated with the <font color="purple">+</font> operator, as in :</string>
    <string name="string_concat_syntax1">
        string1.concat(string2);\n
        <font color="grey">/*We can also do this*/</font>\n
        \"<font color="teal">Hello</font> \".concat(\"<font color="teal">sunshine</font>\");
    </string>
    <string name="string_concat_syntax2">
        \"Hello,\" <font color="purple">+</font> \" world\" <font color="purple">+</font> \"!\"\n
        <font color="grey">/*Results in : Hello, world!*/</font>
    </string>
    <string name="string_create"><b>Creating Strings :</b></string>
    <string name="string_create_def">The most direct way to create a string is to write −</string>
    <string name="string_create_def_2">is same as :</string>
    <string name="string_def">Strings are a sequence of characters. Strings are widely used in Java programming and they are treated as objects.</string>
    <string name="string_final_ex">
        <font color="purple">class</font> <font color="blue">MyString</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="grey"><i>/*First way to create string (best way)*/</i></font>\n
        \t\t<font color="blue">String</font> s1 = \"<font color="teal">Hello World</font>\";\n
        \t\t<font color="grey"><i>/*Second way to create string*/</i></font>\n
        \t\t<font color="purple">char</font>[] ch = <font color="grey">{</font><font color="teal">\'t\',\'o\',\'g\',\'e\',\'t\',\'h\',\'e\',\'r\',\'B\',\'u\',\'s\'</font><font color="grey">}</font>;\n
        \t\t<font color="blue">String</font> s2 = <font color="purple">new</font> <font color="blue">String</font>(<font color="purple">ch</font>);\n
        \t\t<font color="grey"><i>/*Third way to create string*/</i></font>\n
        \t\t<font color="blue">String</font> s3 = <font color="purple">new</font> <font color="blue">String</font>(<font color="teal">\"I love Java\"</font>);\n
        \t\t<font color="blue">System</font>.out.println(<font color="purple">s1</font>);\n
        \t\t<font color="blue">System</font>.out.println(<font color="purple">s2</font>);\n
        \t\t<font color="blue">System</font>.out.println(<font color="purple">s3</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="string_final_output">
        Hello World\n
        togetherBus\n
        I love Java
    </string>
    <string name="string_head"><b>Strings</b></string>
    <string name="string_length_def">Methods used to obtain information about an object are known as <font color="purple">accessor methods</font>. One accessor method that you can use with strings is the <font color="purple"><b>length() method, which returns the number of characters contained in the string object.</b></font>\nThe following program is an example of length() method :</string>
    <string name="string_length_ex">
        <font color="purple">class</font> <font color="blue">StringLength</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">String</font> str = \"<font color="teal">I love togetherBus</font>\";\n
        \t\t<font color="purple">int</font> len = str.length();\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Length : </font>\"+<font color="purple">len</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="string_length_head"><b>String Length :</b></string>
    <string name="string_length_output">
        Length : 18
    </string>
    <string name="string_methods"><b>String Methods :</b></string>
    <string name="string_methods_def"><font color="black">Here is the list of few most commonly used methods supported by String class −</font>\n<b>char charAt(<font color="purple">int index</font>)</b>\n<font color="black">Returns the character at the specified index.</font>\n\n<b>String concat(<font color="purple">String str</font>)</b>\n<font color="black">Concatenates the specified string to the end of this string.</font>\n\n<b>boolean equals(<font color="purple">Object another</font>)</b>\n<font color="black">Checks the equality of string with given object.</font>\n\n<b>boolean equalsIgnoreCase(<font color="purple">String anotherString</font>)</b>\n<font color="black">Compares this String to another String, ignoring case considerations.</font>\n\n<b>int length()</b>\n<font color="black">Returns string length.</font>\n\n<b>boolean isEmpty()</b>\n<font color="black">Checks if string is empty.</font>\n\n<b>int indexOf(<font color="purple">int ch</font>)</b>\n<font color="black">Returns the index within this string of the first occurrence of the specified character.</font>\n\n<b>int indexOf(<font color="purple">String str</font>)</b>\n<font color="black">Returns the index within this string of the first occurrence of the specified substring.</font>\n\n<b>String toLowerCase()</b>\n<font color="black">Returns string in lowercase.</font>\n\n<b>String toUpperCase()</b>\n<font color="black">Returns string in uppercase.</font>\n\n<b>String trim()</b>\n<font color="black">Removes beginning and ending Whitespaces of this string.</font>\n\n<b>String substring(<font color="purple">int beginIndex</font>)</b>\n<font color="black">Returns substring for given begin index.</font>\n\n<b>String substring(<font color="purple">int beginIndex, int endIndex</font>)</b>\n<font color="black">Returns substring for given begin index and end index.</font></string>
    <string name="string_syntax">
        <font color="blue">String</font> mystr = \"<font color="teal">Hello World</font>\";
    </string>
    <string name="string_syntax_2">
        <font color="purple">char</font>[] ch = <font color="grey">{</font><font color="teal">\'H\',\'e\',\'l\',\'l\',\'o\',\' \',\'W\',\'o\',\'r\',\'l\',\'d\'</font><font color="grey">}</font>;\n
        \n<font color="blue">String</font> mystr = <font color="purple">new</font> <font color="blue">String</font>(<font color="purple">ch</font>);
    </string>
    <string name="string_syntax_def">As with any other object, you can create String objects by using the new keyword and a constructor.\nLet\'s take a look at the following example :</string>
    <string name="strings">\nGet\n started\n with\n J A V A\n</string>
    <string name="sum_def">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">Sum</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="purple">int</font> a,b,c;\n
        \t\t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Program to add two numbers\\n\"</font>);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter first number :\"</font>);\n
        \t\t\ta = scan.<font color="purple">nextInt</font>();\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Enter second number :\"</font>);\n
        \t\t\tb = scan.<font color="purple">nextInt</font>();\n
        \t\t\tc = a+b;\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Sum of two numbers is :\"</font> + c);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>

    </string>
    <string name="sum_head"><b>Sum of two numbers.</b></string>
    <string name="sum_output">
        Program to add two numbers\n\n
        Enter first number :\n
        25\n
        Enter second number :\n
        45\n
        Sum of two numbers is : 70
    </string>
    <string name="super_def">The super keyword in java is a reference variable that is used to refer immediate parent class of a class. In other words super keyword is used by a subclass whenever it need to refer to its immediate super class.</string>
    <string name="super_first_ex">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\tVehicle(int x)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Value of Vehicle is \"</font> + x);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\tCar(int y)<font color="grey">{</font>\n
        \t\t\t<font color="purple">super</font>(50000);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Value of Car is \"</font> + y);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Car</font> obj = <font color="purple">new</font> <font color="blue">Car</font>(70000);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="super_first_output">Value of Vehicle is 50000\nValue of Car is 70000</string>
    <string name="super_head"><b>Super keyword</b></string>
    <string name="super_second_lets">Let us look at the example where super() is used to invoke immediate parent class constructor :</string>
    <string name="super_second_output">Parent class\nChild class</string>
    <string name="super_third_ex">
        <font color="purple">class</font> <font color="blue">Parent</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Parent class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Child</font> <font color="purple">extends</font> <font color="blue">Parent</font><font color="grey">{</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="purple">super</font>.display();\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Child class\"</font>);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Child</font> obj = <font color="purple">new</font> <font color="blue">Child</font>();\n
        \t\t\t\tobj.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="super_third_lets">Let us look at the example where super us used to invoke immediate parent class method :</string>
    <string name="super_usage_def">
        1. super is used to refer immediate parent class instance variable.\n\n
        2. super() is used to invoke immediate parent class constructor.\n\n
        3. super is used to invoke immediate parent class method.
    </string>
    <string name="super_usage_head"><b>Usage of super keyword :</b></string>
    <string name="switch_def">A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each case.\nThe syntax of Switch statement is as follows :</string>
    <string name="switch_ex">
        <font color="purple">class</font> <font color="blue">SwitchMe</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">char</font> firstChar = \'T\';\n
        \t\t<font color="blue">switch</font>(firstChar)<font color="grey">{</font>\n
        \t\t\t<font color="purple">case</font> \'P\' :\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Your name starts with letter P</font>\");\n
        \t\t\t\tbreak;\n
        \t\t\t<font color="purple">case</font> \'S\' :\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Your name starts with letter S</font>\");\n
        \t\t\t\tbreak;\n
        \t\t\t<font color="purple">case</font> \'T\' :\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">T for togetherBus</font>\");\n
        \t\t\t\tbreak;\n
        \t\t\t<font color="purple">default</font> :\n
        \t\t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">Have a nice day !</font>\");\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="switch_ex_output">T for togetherBus</string>
    <string name="switch_head"><b>Switch Statement</b></string>
    <string name="switch_more">When a break statement is reached, the switch terminates, and the flow of control jumps to the next line following the switch statement.\n<font color="purple">Not every case needs to contain a break.</font>\nA switch statement can have an optional default case, which must appear at the end of the switch. The default case can be used for performing a task when none of the cases is true. No break is needed in the default case.\n\nLet\'s take a look at this example :</string>
    <string name="switch_syntax">
        <font color="blue">switch</font>(expression)<font color="grey">{</font>\n
        \t\t<font color="purple">case</font> value1 :\n
        \t\t\t<font color="grey">//<i>statements</i></font>\n
        \t\t\tbreak;\n
        \t\t<font color="purple">case</font> value2 :\n
        \t\t\t<font color="grey">//<i>statements</i></font>\n
        \t\t\tbreak;\n
        \t\t<font color="purple">case</font> value3 :\n
        \t\t\t<font color="grey">//<i>statements</i></font>\n
        \t\t\tbreak;\n
        \t\t<font color="purple">default</font> :\n
        \t\t\t<font color="grey">//<i>statements</i></font>\n
        \t<font color="grey">}</font>

    </string>
    <string name="tempsteps">To set the temporary path of JDK, you need to follow following steps:\n\n<b>•</b> Open command prompt\n<b>•</b> Copy the path of jdk/bin directory\n<b>•</b> Write in command prompt:\n         \t\t\t\t\t\t\t\t\t<font color="blue">set path=copied_path\n</font>           For example:</string>
    <string name="throw_output">Exception in thread main java.lang.ArithmeticException:Not Valid</string>
    <string name="throws_def">Any method that is capable of causing exceptions must list all the exceptions possible during its execution, so that anyone calling that method gets a prior knowledge about which exceptions are to be handled. A method can do so by using the <font color="teal"><b>throws keyword</b></font>.\n\n<i>Syntax :</i></string>
    <string name="throws_ex">
        <font color="purple">class</font> <font color="blue">ThrowsEx</font><font color="grey">{</font>\n
        \t\t<font color="purple">static void</font> check() <font color="blue">throws</font> ArithmeticException<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Inside check function\"</font>);\n
        \t\t\t<font color="blue">throw</font> <font color="purple">new</font> ArithmeticException(<font color="teal">\"demo\"</font>);\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\t<font color="blue">try</font><font color="grey">{</font>\n
        \t\t\t\tcheck();\n
        \t\t\t<font color="grey">}</font><font color="blue">catch</font>(ArithmeticException e)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"caught \"</font> + e);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="throws_output">Inside check function\ncaught java.lang.ArithmeticException: demo</string>
    <string name="throws_syntax">
        <font color="purple">type</font> method_name(parameter_list) <font color="blue">throws</font> exception_list\n<font color="grey">{</font>\n
        \t\t <font color="grey">// definition of method</font>\n
        <font color="grey">}</font>
    </string>
    <string name="tip1">If you are saving the java source file inside the jdk/bin directory, path is not required to be set because all the tools will be available in the current directory.</string>
    <string name="title_activity_about_me">AboutMe</string>
    <string name="title_activity_main2">Table of Contents</string>
    <string name="title_activity_program_eight">Program_eight</string>
    <string name="title_activity_program_eighteen">Program_eighteen</string>
    <string name="title_activity_program_eleven">Program_eleven</string>
    <string name="title_activity_program_fifteen">Program_fifteen</string>
    <string name="title_activity_program_first">Program_first</string>
    <string name="title_activity_program_five">Program_five</string>
    <string name="title_activity_program_four">Program_four</string>
    <string name="title_activity_program_fourteen">Program_fourteen</string>
    <string name="title_activity_program_nine">Program_nine</string>
    <string name="title_activity_program_nineteen">Program_nineteen</string>
    <string name="title_activity_program_second">Program_second</string>
    <string name="title_activity_program_seven">Program_seven</string>
    <string name="title_activity_program_seventeen">Program_seventeen</string>
    <string name="title_activity_program_six">Program_six</string>
    <string name="title_activity_program_sixteen">Program_sixteen</string>
    <string name="title_activity_program_ten">Program_ten</string>
    <string name="title_activity_program_third">Program_third</string>
    <string name="title_activity_program_thirteen">Program_thirteen</string>
    <string name="title_activity_program_twelve">Program_twelve</string>
    <string name="title_activity_program_twenty">Program_twenty</string>
    <string name="title_activity_program_twentyone">Program_twentyone</string>
    <string name="title_activity_program_twentytwo">Program_twentytwo</string>
    <string name="title_activity_programs">Programs</string>
    <string name="title_activity_qand">Q &amp; A</string>
    <string name="title_activity_qand_a_10">QandA_10</string>
    <string name="title_activity_qand_a_eight">QandA_eight</string>
    <string name="title_activity_qand_a_eighteen">QandA_eighteen</string>
    <string name="title_activity_qand_a_eleven">QandA_eleven</string>
    <string name="title_activity_qand_a_fifteen">QandA_fifteen</string>
    <string name="title_activity_qand_a_fifth">QandA_fifth</string>
    <string name="title_activity_qand_a_first"><b>Q &amp; A</b></string>
    <string name="title_activity_qand_a_four">QandA_four</string>
    <string name="title_activity_qand_a_fourteen">QandA_fourteen</string>
    <string name="title_activity_qand_a_nine">QandA_nine</string>
    <string name="title_activity_qand_a_nineteen">QandA_nineteen</string>
    <string name="title_activity_qand_a_second">QandA_second</string>
    <string name="title_activity_qand_a_seven">QandA_seven</string>
    <string name="title_activity_qand_a_seventeen">QandA_seventeen</string>
    <string name="title_activity_qand_a_six">QandA_six</string>
    <string name="title_activity_qand_a_sixteen">QandA_sixteen</string>
    <string name="title_activity_qand_a_ten">QandA_ten</string>
    <string name="title_activity_qand_a_third">QandA_third</string>
    <string name="title_activity_qand_a_thirteen">QandA_thirteen</string>
    <string name="title_activity_qand_a_thirty">QandA_thirty</string>
    <string name="title_activity_qand_a_thirtyfive">QandA_thirtyfive</string>
    <string name="title_activity_qand_a_thirtyfour">QandA_thirtyfour</string>
    <string name="title_activity_qand_a_thirtyone">QandA_thirtyone</string>
    <string name="title_activity_qand_a_thirtythree">QandA_thirtythree</string>
    <string name="title_activity_qand_a_thirtytwo">QandA_thirtytwo</string>
    <string name="title_activity_qand_a_twelve">QandA_twelve</string>
    <string name="title_activity_qand_a_twenty">QandA_twenty</string>
    <string name="title_activity_qand_a_twentyeight">QandA_twentyeight</string>
    <string name="title_activity_qand_a_twentyfive">QandA_twentyfive</string>
    <string name="title_activity_qand_a_twentyfour">QandA_twentyfour</string>
    <string name="title_activity_qand_a_twentynine">QandA_twentynine</string>
    <string name="title_activity_qand_a_twentyone">QandA_twentyone</string>
    <string name="title_activity_qand_a_twentyseven">QandA_twentyseven</string>
    <string name="title_activity_qand_a_twentysix">QandA_twentysix</string>
    <string name="title_activity_qand_a_twentythree">QandA_twentythree</string>
    <string name="title_activity_qand_a_twentytwo">QandA_twentytwo</string>
    <string name="title_activity_ques_ans">QuesAns</string>
    <string name="title_section1">1. Java : Overview</string>
    <string name="title_section10">10. If-else Statement</string>
    <string name="title_section11">11. Switch Statement</string>
    <string name="title_section12">12. The For Loop</string>
    <string name="title_section13">13. While Loop</string>
    <string name="title_section14">14. Do While Loop</string>
    <string name="title_section15">15. Break Statement</string>
    <string name="title_section16">16. Continue Statement</string>
    <string name="title_section17">17. Methods in Java</string>
    <string name="title_section18">18. Objects and Classes</string>
    <string name="title_section19">19. Getting User Input</string>
    <string name="title_section2">2. The Java Buzzwords</string>
    <string name="title_section20">20. Constructors in Java</string>
    <string name="title_section21">21. Constructor Overloading</string>
    <string name="title_section22">22. Method Overloading</string>
    <string name="title_section23">23. Strings in Java</string>
    <string name="title_section24">24. Arrays</string>
    <string name="title_section25">25. Foreach Loop</string>
    <string name="title_section26">26. Inheritance</string>
    <string name="title_section27">27. Method Overriding</string>
    <string name="title_section28">28. Super keyword</string>
    <string name="title_section29">29. Abstract Class and Methods</string>
    <string name="title_section3">3. Object-Oriented Programming</string>
    <string name="title_section30">30. Interface</string>
    <string name="title_section31">31. Packages in Java</string>
    <string name="title_section32">32. Access Modifiers</string>
    <string name="title_section33">33. Command Line Arguments</string>
    <string name="title_section34">34. Exception Handling in Java : I</string>
    <string name="title_section35">35. Exception Handling in Java : II</string>
    <string name="title_section36">36. Exception Handling in Java : III</string>
    <string name="title_section37">37. Exception Handling in Java : IV</string>
    <string name="title_section4">4. Set up your JAVA</string>
    <string name="title_section5">5. First Java Program</string>
    <string name="title_section6">6. Java Basic Definitions</string>
    <string name="title_section7">7. Data types &amp; Literals</string>
    <string name="title_section8">8. Operators in Java</string>
    <string name="title_section9">9. Variables in Java</string>
    <string name="try_ex">
        <font color="purple">class</font> <font color="blue">Except</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\t<font color="purple">int</font> a,b,c;\n
        \t\t\t<font color="blue">try</font><font color="grey">{</font>\n
        \t\t\t\ta = 0;\n
        \t\t\t\tb = 20;\n
        \t\t\t\tc = b/a;\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This line will not be executed\"</font>);\n
        \t\t\t<font color="grey">}</font><font color="blue">catch</font>(ArithmeticException e)<font color="grey">{</font>\n
        \t\t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Please do not divide a number by zero !!\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"This will execute after the exception is handled\"</font>);\n
        \t\t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>

    </string>
    <string name="try_output">
        Please do not divide a number by zero !!\nThis will execute after the exception is handled
    </string>
    <string name="uncaught">When we don\'t handle the exceptions, they lead to unexpected program termination. Lets take an example for better understanding.</string>
    <string name="uncaught_ex">
        <font color="purple">class</font> <font color="blue">UncaughtException</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\t\t\t\t\n
        \t\t\t<font color="purple">int</font> x = 0;\n
        \t\t\t<font color="purple">int</font> y = 5/x; <font color="grey">//dividing by zero will lead to exception\n</font>
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="useabs_def">It refers to the ability to make a class abstract in OOP. It helps to reduce the complexity and also improve the maintainability of the system.</string>
    <string name="useabs_head"><b>What is Abstraction?</b></string>
    <string name="usepoly_def">Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.</string>
    <string name="usepoly_head"><b>What is Polymorphism?</b></string>
    <string name="user_assign_value_scanner"><font color="purple">int</font> num = Sname.<font color="purple">nextInt</font>();</string>
    <string name="user_final_ex">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">MyCalc</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="blue">Scanner</font> scan = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);\n
        \t\t<font color="purple">int</font> num1, num2, sum;\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">-: Program to add two numbers :-</font><font color="magenta">\\n</font>\");\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Enter the first number : </font>\");\n
        \t\t<font color="grey">/* <i>Taking first input from user</i> */</font>\n
        \t\tnum1 = scan.<font color="purple">nextInt</font>();\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Enter the second number : </font>\");\n
        \t\t<font color="grey">/* <i>Taking second input from user</i> */</font>\n
        \t\tnum2 = scan.<font color="purple">nextInt</font>();\n
        \t\tsum = num1 + num2;\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">Result of addition : </font>\" + sum);\n
        \t\t<font color="grey">}</font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="user_final_output">
        -: Program to add two numbers :-\n\n
        Enter the first number :\n
        23\n
        Enter the second number :\n
        27\n
        Result of addition : 50
    </string>
    <string name="user_head_scanner">Scanner Class in Java :</string>
    <string name="user_import_Scanner">As already said, Java has a number of predefined classes which we can use. These predefined classes are organised in the form of packages. For now, <u>you can think of a package as a simple collection of classes.</u> <font color="purple"><b>Before we can use the class, we need to either import the entire package or the class.</b></font>\nWe import the Scanner class using the following line.</string>
    <string name="user_input_def">In previous programs we have initialized the variables all by ourselves and then printed out the result which we already knew. <font color="purple">Wouldn\'t it be better if you could ask your friend to enter his own values and then based on those values you can produce certain output.</font> There are different ways to do it in Java. But here, we shall look at one simple way by using the <font color="blue">Scanner class</font>.</string>
    <string name="user_input_green_def">One of the strengths of Java is the huge libraries of code available to you. This is code that has been written to do specific jobs. All you need to do is to reference which library you want to use, and then call a method into action.</string>
    <string name="user_lets_ex">In a similar way, we can accept other data types from the user. The following code shows the complete program which accepts two numbers from the user and adds them and displays the result.</string>
    <string name="user_lets_ex1">We created the object of Scanner class above with an identifier <font color="teal"><b>Sname</b></font>. Suppose, we want to accept an integer and store it in the variable num, we write the following statement :</string>
    <string name="user_more_syntax">The import statement needs to go just above the Class statement :</string>
    <string name="user_obj_of_scanner">This tells java that you want to use a particular class in a particular library - the Scanner class, which is located in the java.util library. The next thing you need to do is to <font color="purple"><b>create an object from the Scanner class.</b></font> (A class is just a bunch of code. It doesn\'t do anything until you create a new object from it.)\nTo create a new Scanner Object we use the following syntax :</string>
    <string name="user_obj_scanner_syntax">
        <font color="blue">Scanner</font> Sname = <font color="purple">new</font> <font color="blue">Scanner</font>(System.in);
    </string>
    <string name="user_scanner_syntax"><font color="purple">import</font> java.util.<font color="blue">Scanner</font>;</string>
    <string name="user_syntax_explained">Note that <b><font color="teal">Sname</font> is an identifier</b>- a variable name and therefore you can give any name that you want. The object we\'re creating is from the Scanner class. In between round brackets we have to tell java that this will be System Input (System.in).\n\nThe Scanner class has several methods which are used to take different types of inputs. They are listed in the table below : </string>
    <string name="user_syntax_part_2">
        <font color="purple">import</font> java.util.<font color="blue">Scanner</font>;\n
        <font color="purple">class</font> <font color="blue">MyClass</font><font color="grey">{</font>\n
        \n
        \t<font color="grey">}</font>
    </string>
    <string name="usesuper_def">If the method overrides one of its superclass\'s methods, overridden method can be invoked through the use of super keyword. It can be used to refer immediate parent class instance variable and it (<font color="purple">super()</font>) can also be used to invoke immediate parent class constructor.</string>
    <string name="usesuper_head"><b>When super keyword is used?</b></string>
    <string name="var_class"><b>Class Variables :</b></string>
    <string name="var_class_def">Class variables are also known as static variables. <font color="purple">Class variables are declared with the static keyword in a class, but outside a method, constructor or a block.</font> There would only be one copy of each class variable per class, regardless of how many objects are created from it.</string>
    <string name="var_ex_init_explained">Here, <font color="blue">value</font> is the value that is given to variable when variable is created. The value must be compatible with the specified type.\n\nFollowing are valid examples of variable declaration and initialization in Java −</string>
    <string name="var_final_example"><font color="purple">int</font> count = 20, x = 5 <font color="grey">;</font>\n<font color="purple">int</font> a, b, c <font color="grey">;</font>\n<font color="purple">double</font> num = 2.2345 <font color="grey">;</font>\n<font color="purple">char</font> mychar = \'B\' <font color="grey">;</font></string>
    <string name="var_instance"><b>Instance Variables :</b></string>
    <string name="var_instance_def"><font color="purple">Instance variables are declared in a class, but outside a method, constructor or any block.</font> Access modifiers can be used for instance variables. Instance variables are created when an object is created and destroyed when the object is destroyed. <font color="purple">The instance variables are visible for all methods, constructors and block in the class.</font> Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null.</string>
    <string name="var_local_def">Local variables are declared in methods, constructors, or blocks. Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block. <i>Access modifiers cannot be used for local variables.</i> <font color="purple">Local variables are visible only within the declared method, constructor, or block.</font></string>
    <string name="var_local_head"><b>Local Variables :</b></string>
    <string name="var_types">There are three kinds of variables in Java :\n• <font color="blue">Local variables</font>\n• <font color="blue">Instance variables</font>\n• <font color="blue">Class/static variables</font></string>
    <string name="variable_def"><font color="purple">Variable is a name of memory location.</font> In other words, a variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable\'s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.\nYou must declare all variables before they can be used. Following is the basic form of a variable declaration −</string>
    <string name="variable_ex"><font color="purple">data_type</font> var-name <font color="grey">;</font></string>
    <string name="variable_ex_explained">Here <font color="blue">data_type</font> is one of Java\'s datatypes and <font color="blue">var-name</font> is the name of the variable.\nBelow is the general form of initializing of a variable :</string>
    <string name="variable_ex_initialize"><font color="purple">data_type</font> var-name = value <font color="grey">;</font></string>
    <string name="variable_head"><b>Variables</b></string>
    <string name="variable_types_def">A class consist of Local variable, instance variables and class variables.</string>
    <string name="variable_types_head"><b>What kind of variables a class can consist of?</b></string>
    <string name="vehicle_def">
        <font color="purple">class</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="blue">String</font> regno;\n
        \t\t<font color="purple">int</font> model;\n
        \t\tVehicle(<font color="blue">String</font> r, <font color="purple">int</font> m)<font color="grey">{</font>\n
        \t\t\tregno = r;\n
        \t\t\tmodel = m;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Registration number : \"</font> + regno);\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Model number : \"</font> + model);\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Bike</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> wheels;\n
        \t\tBike(<font color="blue">String</font> r, <font color="purple">int</font> m, <font color="purple">int</font> n)<font color="grey">{</font>\n
        \t\t\t<font color="purple">super</font>(r,m);\n
        \t\t\twheels = n;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"-: Bike :-\"</font>);\n
        \t\t\t<font color="purple">super</font>.display();\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Number of wheels : \"</font> + wheels);\n
        \t\t\t<font color="blue">System</font>.out.println();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">AutoRickshaw</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> wheels;\n
        \t\tAutoRickshaw(<font color="blue">String</font> r, <font color="purple">int</font> m, <font color="purple">int</font> n)<font color="grey">{</font>\n
        \t\t\t<font color="purple">super</font>(r,m);\n
        \t\t\twheels = n;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"-: AutoRickshaw :-\"</font>);\n
        \t\t\t<font color="purple">super</font>.display();\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Number of wheels : \"</font> + wheels);\n
        \t\t\t<font color="blue">System</font>.out.println();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">Car</font> <font color="purple">extends</font> <font color="blue">Vehicle</font><font color="grey">{</font>\n
        \t\t<font color="purple">int</font> wheels;\n
        \t\tCar(<font color="blue">String</font> r, <font color="purple">int</font> m, <font color="purple">int</font> n)<font color="grey">{</font>\n
        \t\t\t<font color="purple">super</font>(r,m);\n
        \t\t\twheels = n;\n
        \t\t<font color="grey">}</font>\n
        \t\t<font color="purple">void</font> display()<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"-: Car :-\"</font>);\n
        \t\t\t<font color="purple">super</font>.display();\n
        \t\t\t<font color="blue">System</font>.out.println(<font color="teal">\"Number of wheels : \"</font> + wheels);\n
        \t\t\t<font color="blue">System</font>.out.println();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>\n
        <font color="purple">class</font> <font color="blue">MyMain</font><font color="grey">{</font>\n
        \t\t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t\t<font color="blue">Bike</font> obj1 = <font color="purple">new</font> <font color="blue">Bike</font>(<font color="teal">\"JG4HG\"</font>,6,2);\n
        \t\t\t<font color="blue">AutoRickshaw</font> obj2 = <font color="purple">new</font> <font color="blue">AutoRickshaw</font>(<font color="teal">\"NF4NF\"</font>,5,3);\n
        \t\t\t<font color="blue">Car</font> obj3 = <font color="purple">new</font> <font color="blue">Car</font>(<font color="teal">\"OND3P\"</font>,9,4);\n
        \t\t\tobj1.display();\n
        \t\t\tobj2.display();\n
        \t\t\tobj3.display();\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="vehicle_head"><b>Vehicle Class Hierarchy.</b></string>
    <string name="vehicle_output">
        -: Bike :-\n
        Registration number : JG4HG\n
        Model number : 6\n
        Number of wheels : 2\n\n
        -: AutoRickshaw :-\n
        Registration number : NF4NF\n
        Model number : 5\n
        Number of wheels : 3\n\n
        -: Car :-\n
        Registration number : OND3P\n
        Model number : 9\n
        Number of wheels : 4
    </string>
    <string name="while_def">A while loop in Java programming language repeatedly executes a target statement as long as a given condition is true.\nSyntax of while loop is follows :</string>
    <string name="while_ex">
        <font color="purple">class</font> <font color="blue">MyWhile</font><font color="grey">{</font>\n
        \t<font color="purple">public static void</font> main(<font color="blue">String[]</font> args)<font color="grey">{</font>\n
        \t\t<font color="purple">int</font> num = 10 ;\n
        \t\t<font color="blue">System</font>.out.println(\"<font color="teal">== WHILE LOOP ==</font>\");\n
        \t\t<font color="blue">while</font>(num >= 1)<font color="grey">{</font>\n
        \t\t\t<font color="blue">System</font>.out.println(\"<font color="teal">value of num : </font>\" + num);\n
        \t\t num--;\n
        \t\t\t<font color="grey">}</font>\n
        \t\t<font color="grey">}</font>\n
        <font color="grey">}</font>
    </string>
    <string name="while_head"><b>While Loop</b></string>
    <string name="while_output">
        == WHILE LOOP ==\n
        value of num : 10\n
        value of num : 9\n
        value of num : 8\n
        value of num : 7\n
        value of num : 6\n
        value of num : 5\n
        value of num : 4\n
        value of num : 3\n
        value of num : 2\n
        value of num : 1
    </string>
    <string name="while_syntax">
        <font color="blue">while</font>(condition)<font color="grey">{</font>\n
        \t\t\t<font color="grey">//<i>code to be executed</i></font>\n
        \t<font color="grey">}</font>
    </string>
    <string name="while_syntax_explain">The condition may be any expression, and true is any non zero value. When executing, if the <font color="purple">condition</font> result is true, then the code inside the loop will be executed. This will continue as long as the expression result is true. When the <font color="purple">condition</font> becomes false, program control passes to the line immediately following the loop.\nLet\'s take a look at this example :</string>
    <string name="whypack_def">Packages are used in Java in-order to prevent naming conflicts, to control access, to make searching/locating and usage of classes, interfaces, enumerations and annotations, etc., easier.</string>
    <string name="whypack_head"><b>Why Packages are used in Java?</b></string>
    <string name="wrapper_def">These are classes that allow primitive types to be accessed as objects. Example: Integer, Character, Double, Boolean etc.</string>
    <string name="wrapper_head"><b>What are Wrapper classes?</b></string>
    <style name="AlertDialog.AppCompat" parent="Base.AlertDialog.AppCompat"/>
    <style name="AlertDialog.AppCompat.Light" parent="Base.AlertDialog.AppCompat.Light"/>
    <style name="Animation.AppCompat.Dialog" parent="Base.Animation.AppCompat.Dialog"/>
    <style name="Animation.AppCompat.DropDownUp" parent="Base.Animation.AppCompat.DropDownUp"/>
    <style name="Animation.Design.BottomSheetDialog" parent="Animation.AppCompat.Dialog">
        <item name="android:windowEnterAnimation">@anim/design_bottom_sheet_slide_in</item>
        <item name="android:windowExitAnimation">@anim/design_bottom_sheet_slide_out</item>
    </style>
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">


    </style>
    <style name="Base.AlertDialog.AppCompat" parent="android:Widget">
        <item name="android:layout">@layout/abc_alert_dialog_material</item>
        <item name="listLayout">@layout/abc_select_dialog_material</item>
        <item name="listItemLayout">@layout/select_dialog_item_material</item>
        <item name="multiChoiceItemLayout">@layout/select_dialog_multichoice_material</item>
        <item name="singleChoiceItemLayout">@layout/select_dialog_singlechoice_material</item>
    </style>
    <style name="Base.AlertDialog.AppCompat.Light" parent="Base.AlertDialog.AppCompat"/>
    <style name="Base.Animation.AppCompat.Dialog" parent="android:Animation">
        <item name="android:windowEnterAnimation">@anim/abc_popup_enter</item>
        <item name="android:windowExitAnimation">@anim/abc_popup_exit</item>
    </style>
    <style name="Base.Animation.AppCompat.DropDownUp" parent="android:Animation">
        <item name="android:windowEnterAnimation">@anim/abc_grow_fade_in_from_bottom</item>
        <item name="android:windowExitAnimation">@anim/abc_shrink_fade_out_from_bottom</item>
    </style>
    <style name="Base.CardView" parent="android:Widget">
        <item name="cardCornerRadius">@dimen/cardview_default_radius</item>
        <item name="cardElevation">@dimen/cardview_default_elevation</item>
        <item name="cardMaxElevation">@dimen/cardview_default_elevation</item>
        <item name="cardUseCompatPadding">false</item>
        <item name="cardPreventCornerOverlap">true</item>
    </style>
    <style name="Base.DialogWindowTitle.AppCompat" parent="android:Widget">
        <item name="android:maxLines">1</item>
        <item name="android:scrollHorizontally">true</item>
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Title</item>
    </style>
    <style name="Base.DialogWindowTitleBackground.AppCompat" parent="android:Widget">
        <item name="android:background">@null</item>
        <item name="android:paddingLeft">?attr/dialogPreferredPadding</item>
        <item name="android:paddingRight">?attr/dialogPreferredPadding</item>
        <item name="android:paddingTop">@dimen/abc_dialog_padding_top_material</item>
    </style>
    <style name="Base.TextAppearance.AppCompat" parent="android:TextAppearance">
        <item name="android:textColor">?android:textColorPrimary</item>
        <item name="android:textColorHint">?android:textColorHint</item>
        <item name="android:textColorHighlight">?android:textColorHighlight</item>
        <item name="android:textColorLink">?android:textColorLink</item>
        <item name="android:textSize">@dimen/abc_text_size_body_1_material</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Body1">
        <item name="android:textSize">@dimen/abc_text_size_body_1_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Body2">
        <item name="android:textSize">@dimen/abc_text_size_body_2_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Button">
        <item name="android:textSize">@dimen/abc_text_size_button_material</item>
        <item name="textAllCaps">true</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Caption">
        <item name="android:textSize">@dimen/abc_text_size_caption_material</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Display1">
        <item name="android:textSize">@dimen/abc_text_size_display_1_material</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Display2">
        <item name="android:textSize">@dimen/abc_text_size_display_2_material</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Display3">
        <item name="android:textSize">@dimen/abc_text_size_display_3_material</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Display4">
        <item name="android:textSize">@dimen/abc_text_size_display_4_material</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Headline">
        <item name="android:textSize">@dimen/abc_text_size_headline_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Inverse">
        <item name="android:textColor">?android:attr/textColorPrimaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Large">
        <item name="android:textSize">@dimen/abc_text_size_large_material</item>
        <item name="android:textColor">?android:attr/textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Large.Inverse">
        <item name="android:textColor">?android:attr/textColorPrimaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Light.Widget.PopupMenu.Large" parent="TextAppearance.AppCompat.Menu">
    </style>
    <style name="Base.TextAppearance.AppCompat.Light.Widget.PopupMenu.Small" parent="TextAppearance.AppCompat.Menu">
    </style>
    <style name="Base.TextAppearance.AppCompat.Medium">
        <item name="android:textSize">@dimen/abc_text_size_medium_material</item>
        <item name="android:textColor">?android:attr/textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Medium.Inverse">
        <item name="android:textColor">?android:attr/textColorSecondaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Menu">
        <item name="android:textSize">@dimen/abc_text_size_menu_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.SearchResult" parent="">
        <item name="android:textStyle">normal</item>
        <item name="android:textColor">?android:textColorPrimary</item>
        <item name="android:textColorHint">?android:textColorHint</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.SearchResult.Subtitle">
        <item name="android:textSize">14sp</item>
        <item name="android:textColor">?android:textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.SearchResult.Title">
        <item name="android:textSize">18sp</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Small">
        <item name="android:textSize">@dimen/abc_text_size_small_material</item>
        <item name="android:textColor">?android:attr/textColorTertiary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Small.Inverse">
        <item name="android:textColor">?android:attr/textColorTertiaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Subhead">
        <item name="android:textSize">@dimen/abc_text_size_subhead_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Subhead.Inverse">
        <item name="android:textColor">?android:attr/textColorPrimaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Title">
        <item name="android:textSize">@dimen/abc_text_size_title_material</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Title.Inverse">
        <item name="android:textColor">?android:attr/textColorPrimaryInverse</item>
        <item name="android:textColorHint">?android:attr/textColorHintInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionBar.Menu" parent="TextAppearance.AppCompat.Button">
        <item name="android:textColor">?attr/actionMenuTextColor</item>
        <item name="textAllCaps">@bool/abc_config_actionMenuItemAllCaps</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionBar.Subtitle" parent="TextAppearance.AppCompat.Subhead">
        <item name="android:textSize">@dimen/abc_text_size_subtitle_material_toolbar</item>
        <item name="android:textColor">?android:attr/textColorSecondary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse" parent="TextAppearance.AppCompat.Subhead.Inverse">
        <item name="android:textSize">@dimen/abc_text_size_subtitle_material_toolbar</item>
        <item name="android:textColor">?android:attr/textColorSecondaryInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionBar.Title" parent="TextAppearance.AppCompat.Title">
        <item name="android:textSize">@dimen/abc_text_size_title_material_toolbar</item>
        <item name="android:textColor">?android:attr/textColorPrimary</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse" parent="TextAppearance.AppCompat.Title.Inverse">
        <item name="android:textSize">@dimen/abc_text_size_title_material_toolbar</item>
        <item name="android:textColor">?android:attr/textColorPrimaryInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionMode.Subtitle" parent="TextAppearance.AppCompat.Widget.ActionBar.Subtitle"/>
    <style name="Base.TextAppearance.AppCompat.Widget.ActionMode.Title" parent="TextAppearance.AppCompat.Widget.ActionBar.Title"/>
    <style name="Base.TextAppearance.AppCompat.Widget.Button" parent="TextAppearance.AppCompat.Button"/>
    <style name="Base.TextAppearance.AppCompat.Widget.Button.Inverse" parent="TextAppearance.AppCompat.Button">
        <item name="android:textColor">?android:textColorPrimaryInverse</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.DropDownItem" parent="android:TextAppearance.Small">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.PopupMenu.Large" parent="TextAppearance.AppCompat.Menu">
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.PopupMenu.Small" parent="TextAppearance.AppCompat.Menu">
    </style>
    <style name="Base.TextAppearance.AppCompat.Widget.Switch" parent="TextAppearance.AppCompat.Button"/>
    <style name="Base.TextAppearance.AppCompat.Widget.TextView.SpinnerItem" parent="TextAppearance.AppCompat.Menu"/>
    <style name="Base.TextAppearance.Widget.AppCompat.ExpandedMenu.Item" parent="android:TextAppearance.Medium">
        <item name="android:textColor">?android:attr/textColorPrimaryDisableOnly</item>
    </style>
    <style name="Base.TextAppearance.Widget.AppCompat.Toolbar.Subtitle" parent="TextAppearance.AppCompat.Widget.ActionBar.Subtitle">
    </style>
    <style name="Base.TextAppearance.Widget.AppCompat.Toolbar.Title" parent="TextAppearance.AppCompat.Widget.ActionBar.Title">
    </style>
    <style name="Base.Theme.AppCompat" parent="Base.V7.Theme.AppCompat">
    </style>
    <style name="Base.Theme.AppCompat.CompactMenu" parent="">
        <item name="android:itemTextAppearance">?android:attr/textAppearanceMedium</item>
        <item name="android:listViewStyle">@style/Widget.AppCompat.ListView.Menu</item>
        <item name="android:windowAnimationStyle">@style/Animation.AppCompat.DropDownUp</item>
    </style>
    <style name="Base.Theme.AppCompat.Dialog" parent="Base.V7.Theme.AppCompat.Dialog"/>
    <style name="Base.Theme.AppCompat.Dialog.Alert">
        <item name="windowMinWidthMajor">@dimen/abc_dialog_min_width_major</item>
        <item name="windowMinWidthMinor">@dimen/abc_dialog_min_width_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.Dialog.FixedSize">
        <item name="windowFixedWidthMajor">@dimen/abc_dialog_fixed_width_major</item>
        <item name="windowFixedWidthMinor">@dimen/abc_dialog_fixed_width_minor</item>
        <item name="windowFixedHeightMajor">@dimen/abc_dialog_fixed_height_major</item>
        <item name="windowFixedHeightMinor">@dimen/abc_dialog_fixed_height_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.Dialog.MinWidth">
        <item name="windowMinWidthMajor">@dimen/abc_dialog_min_width_major</item>
        <item name="windowMinWidthMinor">@dimen/abc_dialog_min_width_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.DialogWhenLarge" parent="Theme.AppCompat"/>
    <style name="Base.Theme.AppCompat.Light" parent="Base.V7.Theme.AppCompat.Light">
    </style>
    <style name="Base.Theme.AppCompat.Light.DarkActionBar" parent="Base.Theme.AppCompat.Light">
        <item name="actionBarPopupTheme">@style/ThemeOverlay.AppCompat.Light</item>
        <item name="actionBarWidgetTheme">@null</item>
        <item name="actionBarTheme">@style/ThemeOverlay.AppCompat.Dark.ActionBar</item>

        <!-- Panel attributes -->
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_dark</item>

        <item name="colorPrimaryDark">@color/primary_dark_material_dark</item>
        <item name="colorPrimary">@color/primary_material_dark</item>
    </style>
    <style name="Base.Theme.AppCompat.Light.Dialog" parent="Base.V7.Theme.AppCompat.Light.Dialog"/>
    <style name="Base.Theme.AppCompat.Light.Dialog.Alert">
        <item name="windowMinWidthMajor">@dimen/abc_dialog_min_width_major</item>
        <item name="windowMinWidthMinor">@dimen/abc_dialog_min_width_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.Light.Dialog.FixedSize">
        <item name="windowFixedWidthMajor">@dimen/abc_dialog_fixed_width_major</item>
        <item name="windowFixedWidthMinor">@dimen/abc_dialog_fixed_width_minor</item>
        <item name="windowFixedHeightMajor">@dimen/abc_dialog_fixed_height_major</item>
        <item name="windowFixedHeightMinor">@dimen/abc_dialog_fixed_height_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.Light.Dialog.MinWidth">
        <item name="windowMinWidthMajor">@dimen/abc_dialog_min_width_major</item>
        <item name="windowMinWidthMinor">@dimen/abc_dialog_min_width_minor</item>
    </style>
    <style name="Base.Theme.AppCompat.Light.DialogWhenLarge" parent="Theme.AppCompat.Light"/>
    <style name="Base.ThemeOverlay.AppCompat" parent="Platform.ThemeOverlay.AppCompat"/>
    <style name="Base.ThemeOverlay.AppCompat.ActionBar">
        <item name="colorControlNormal">?android:attr/textColorPrimary</item>
        <item name="searchViewStyle">@style/Widget.AppCompat.SearchView.ActionBar</item>
    </style>
    <style name="Base.ThemeOverlay.AppCompat.Dark" parent="Platform.ThemeOverlay.AppCompat.Dark">
        <item name="android:windowBackground">@color/background_material_dark</item>
        <item name="android:colorForeground">@color/foreground_material_dark</item>
        <item name="android:colorForegroundInverse">@color/foreground_material_light</item>
        <item name="android:colorBackground">@color/background_material_dark</item>
        <item name="android:colorBackgroundCacheHint">@color/abc_background_cache_hint_selector_material_dark</item>

        <item name="android:textColorPrimary">@color/abc_primary_text_material_dark</item>
        <item name="android:textColorPrimaryInverse">@color/abc_primary_text_material_light</item>
        <item name="android:textColorPrimaryDisableOnly">@color/abc_primary_text_disable_only_material_dark</item>
        <item name="android:textColorSecondary">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorSecondaryInverse">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorTertiary">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorTertiaryInverse">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorHint">@color/hint_foreground_material_dark</item>
        <item name="android:textColorHintInverse">@color/hint_foreground_material_light</item>
        <item name="android:textColorHighlight">@color/highlighted_text_material_dark</item>

        <item name="colorControlNormal">?android:attr/textColorSecondary</item>
        <item name="colorControlHighlight">@color/ripple_material_dark</item>
        <item name="colorButtonNormal">@color/button_material_dark</item>
        <item name="colorSwitchThumbNormal">@color/switch_thumb_material_dark</item>

        <!-- Used by MediaRouter -->
        <item name="isLightTheme">false</item>
    </style>
    <style name="Base.ThemeOverlay.AppCompat.Dark.ActionBar">
        <item name="colorControlNormal">?android:attr/textColorPrimary</item>
        <item name="searchViewStyle">@style/Widget.AppCompat.SearchView.ActionBar</item>
    </style>
    <style name="Base.ThemeOverlay.AppCompat.Light" parent="Platform.ThemeOverlay.AppCompat.Light">
        <item name="android:windowBackground">@color/background_material_light</item>
        <item name="android:colorForeground">@color/foreground_material_light</item>
        <item name="android:colorForegroundInverse">@color/foreground_material_dark</item>
        <item name="android:colorBackground">@color/background_material_light</item>
        <item name="android:colorBackgroundCacheHint">@color/abc_background_cache_hint_selector_material_light</item>

        <item name="android:textColorPrimary">@color/abc_primary_text_material_light</item>
        <item name="android:textColorPrimaryInverse">@color/abc_primary_text_material_dark</item>
        <item name="android:textColorSecondary">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorSecondaryInverse">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorTertiary">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorTertiaryInverse">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorPrimaryDisableOnly">@color/abc_primary_text_disable_only_material_light</item>
        <item name="android:textColorPrimaryInverseDisableOnly">@color/abc_primary_text_disable_only_material_dark</item>
        <item name="android:textColorHint">@color/hint_foreground_material_light</item>
        <item name="android:textColorHintInverse">@color/hint_foreground_material_dark</item>
        <item name="android:textColorHighlight">@color/highlighted_text_material_light</item>

        <item name="colorControlNormal">?android:attr/textColorSecondary</item>
        <item name="colorControlHighlight">@color/ripple_material_light</item>
        <item name="colorButtonNormal">@color/button_material_light</item>
        <item name="colorSwitchThumbNormal">@color/switch_thumb_material_light</item>

        <!-- Used by MediaRouter -->
        <item name="isLightTheme">true</item>
    </style>
    <style name="Base.V7.Theme.AppCompat" parent="Platform.AppCompat">
        <item name="windowNoTitle">false</item>
        <item name="windowActionBar">true</item>
        <item name="windowActionBarOverlay">false</item>
        <item name="windowActionModeOverlay">false</item>
        <item name="actionBarPopupTheme">@null</item>

        <!-- Used by MediaRouter -->
        <item name="isLightTheme">false</item>

        <item name="selectableItemBackground">@drawable/abc_item_background_holo_dark</item>
        <item name="selectableItemBackgroundBorderless">?attr/selectableItemBackground</item>
        <item name="borderlessButtonStyle">@style/Widget.AppCompat.Button.Borderless</item>
        <item name="homeAsUpIndicator">@drawable/abc_ic_ab_back_mtrl_am_alpha</item>

        <item name="dividerVertical">@drawable/abc_list_divider_mtrl_alpha</item>
        <item name="dividerHorizontal">@drawable/abc_list_divider_mtrl_alpha</item>

        <!-- Action Bar Styles -->
        <item name="actionBarTabStyle">@style/Widget.AppCompat.ActionBar.TabView</item>
        <item name="actionBarTabBarStyle">@style/Widget.AppCompat.ActionBar.TabBar</item>
        <item name="actionBarTabTextStyle">@style/Widget.AppCompat.ActionBar.TabText</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>
        <item name="actionOverflowMenuStyle">@style/Widget.AppCompat.PopupMenu.Overflow</item>
        <item name="actionBarStyle">@style/Widget.AppCompat.ActionBar.Solid</item>
        <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
        <item name="actionBarWidgetTheme">@null</item>
        <item name="actionBarTheme">@style/ThemeOverlay.AppCompat.ActionBar</item>
        <item name="actionBarSize">@dimen/abc_action_bar_default_height_material</item>
        <item name="actionBarDivider">?attr/dividerVertical</item>
        <item name="actionBarItemBackground">?attr/selectableItemBackgroundBorderless</item>
        <item name="actionMenuTextAppearance">@style/TextAppearance.AppCompat.Widget.ActionBar.Menu</item>
        <item name="actionMenuTextColor">?android:attr/textColorPrimaryDisableOnly</item>

        <!-- Dropdown Spinner Attributes -->
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Spinner.DropDown.ActionBar</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.ActionMode</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_material</item>
        <item name="actionModeSplitBackground">?attr/colorPrimaryDark</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_ab_back_mtrl_am_alpha</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.ActionButton.CloseMode</item>

        <item name="actionModeCutDrawable">@drawable/abc_ic_menu_cut_mtrl_alpha</item>
        <item name="actionModeCopyDrawable">@drawable/abc_ic_menu_copy_mtrl_am_alpha</item>
        <item name="actionModePasteDrawable">@drawable/abc_ic_menu_paste_mtrl_am_alpha</item>
        <item name="actionModeSelectAllDrawable">@drawable/abc_ic_menu_selectall_mtrl_alpha</item>
        <item name="actionModeShareDrawable">@drawable/abc_ic_menu_share_mtrl_alpha</item>

        <!-- Panel attributes -->
        <item name="panelMenuListWidth">@dimen/abc_panel_menu_list_width</item>
        <item name="panelMenuListTheme">@style/Theme.AppCompat.CompactMenu</item>
        <item name="panelBackground">@drawable/abc_menu_hardkey_panel_mtrl_mult</item>
        <item name="android:panelBackground">@android:color/transparent</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_dark</item>

        <!-- List attributes -->
        <item name="textAppearanceListItem">@style/TextAppearance.AppCompat.Subhead</item>
        <item name="textAppearanceListItemSmall">@style/TextAppearance.AppCompat.Subhead</item>
        <item name="listPreferredItemHeight">64dp</item>
        <item name="listPreferredItemHeightSmall">48dp</item>
        <item name="listPreferredItemHeightLarge">80dp</item>
        <item name="listPreferredItemPaddingLeft">@dimen/abc_list_item_padding_horizontal_material</item>
        <item name="listPreferredItemPaddingRight">@dimen/abc_list_item_padding_horizontal_material</item>

        <!-- Spinner styles -->
        <item name="spinnerStyle">@style/Widget.AppCompat.Spinner</item>
        <item name="android:spinnerItemStyle">@style/Widget.AppCompat.TextView.SpinnerItem</item>
        <item name="android:dropDownListViewStyle">@style/Widget.AppCompat.ListView.DropDown</item>

        <!-- Required for use of support_simple_spinner_dropdown_item.xml -->
        <item name="spinnerDropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
        <item name="dropdownListPreferredItemHeight">?attr/listPreferredItemHeightSmall</item>

        <!-- Popup Menu styles -->
        <item name="popupMenuStyle">@style/Widget.AppCompat.PopupMenu</item>
        <item name="textAppearanceLargePopupMenu">@style/TextAppearance.AppCompat.Widget.PopupMenu.Large</item>
        <item name="textAppearanceSmallPopupMenu">@style/TextAppearance.AppCompat.Widget.PopupMenu.Small</item>
        <item name="listPopupWindowStyle">@style/Widget.AppCompat.ListPopupWindow</item>
        <item name="dropDownListViewStyle">?android:attr/dropDownListViewStyle</item>

        <!-- SearchView attributes -->
        <item name="searchViewStyle">@style/Widget.AppCompat.SearchView</item>
        <item name="android:dropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
        <item name="textColorSearchUrl">@color/abc_search_url_text</item>
        <item name="textAppearanceSearchResultTitle">@style/TextAppearance.AppCompat.SearchResult.Title</item>
        <item name="textAppearanceSearchResultSubtitle">@style/TextAppearance.AppCompat.SearchResult.Subtitle</item>

        <!-- ShareActionProvider attributes -->
        <item name="activityChooserViewStyle">@style/Widget.AppCompat.ActivityChooserView</item>

        <!-- Toolbar styles -->
        <item name="toolbarStyle">@style/Widget.AppCompat.Toolbar</item>
        <item name="toolbarNavigationButtonStyle">@style/Widget.AppCompat.Toolbar.Button.Navigation</item>

        <item name="editTextStyle">@style/Widget.AppCompat.EditText</item>
        <item name="editTextBackground">@drawable/abc_edit_text_material</item>
        <item name="editTextColor">?android:attr/textColorPrimary</item>
        <item name="autoCompleteTextViewStyle">@style/Widget.AppCompat.AutoCompleteTextView</item>

        <!-- Color palette -->
        <item name="colorPrimaryDark">@color/primary_dark_material_dark</item>
        <item name="colorPrimary">@color/primary_material_dark</item>
        <item name="colorAccent">@color/accent_material_dark</item>

        <item name="colorControlNormal">?android:attr/textColorSecondary</item>
        <item name="colorControlActivated">?attr/colorAccent</item>
        <item name="colorControlHighlight">@color/ripple_material_dark</item>
        <item name="colorButtonNormal">@color/button_material_dark</item>
        <item name="colorSwitchThumbNormal">@color/switch_thumb_material_dark</item>
        <item name="controlBackground">?attr/selectableItemBackgroundBorderless</item>

        <item name="drawerArrowStyle">@style/Widget.AppCompat.DrawerArrowToggle</item>

        <item name="checkboxStyle">@style/Widget.AppCompat.CompoundButton.CheckBox</item>
        <item name="radioButtonStyle">@style/Widget.AppCompat.CompoundButton.RadioButton</item>
        <item name="switchStyle">@style/Widget.AppCompat.CompoundButton.Switch</item>

        <item name="ratingBarStyle">@style/Widget.AppCompat.RatingBar</item>
        <item name="ratingBarStyleIndicator">@style/Widget.AppCompat.RatingBar.Indicator</item>
        <item name="ratingBarStyleSmall">@style/Widget.AppCompat.RatingBar.Small</item>
        <item name="seekBarStyle">@style/Widget.AppCompat.SeekBar</item>

        <!-- Button styles -->
        <item name="buttonStyle">@style/Widget.AppCompat.Button</item>
        <item name="buttonStyleSmall">@style/Widget.AppCompat.Button.Small</item>
        <item name="android:textAppearanceButton">@style/TextAppearance.AppCompat.Widget.Button</item>

        <item name="imageButtonStyle">@style/Widget.AppCompat.ImageButton</item>

        <item name="buttonBarStyle">@style/Widget.AppCompat.ButtonBar</item>
        <item name="buttonBarButtonStyle">@style/Widget.AppCompat.Button.ButtonBar.AlertDialog</item>
        <item name="buttonBarPositiveButtonStyle">?attr/buttonBarButtonStyle</item>
        <item name="buttonBarNegativeButtonStyle">?attr/buttonBarButtonStyle</item>
        <item name="buttonBarNeutralButtonStyle">?attr/buttonBarButtonStyle</item>

        <!-- Dialog attributes -->
        <item name="dialogTheme">@style/Theme.AppCompat.Dialog</item>
        <item name="dialogPreferredPadding">@dimen/abc_dialog_padding_material</item>

        <item name="alertDialogTheme">@style/Theme.AppCompat.Dialog.Alert</item>
        <item name="alertDialogStyle">@style/AlertDialog.AppCompat</item>
        <item name="alertDialogCenterButtons">false</item>
        <item name="textColorAlertDialogListItem">@color/abc_primary_text_material_dark</item>
        <item name="listDividerAlertDialog">@null</item>

        <!-- Define these here; ContextThemeWrappers around themes that define them should
             always clear these values. -->
        <item name="windowFixedWidthMajor">0dp</item>
        <item name="windowFixedWidthMinor">0dp</item>
        <item name="windowFixedHeightMajor">0dp</item>
        <item name="windowFixedHeightMinor">0dp</item>
    </style>
    <style name="Base.V7.Theme.AppCompat.Dialog" parent="Base.Theme.AppCompat">
        <item name="android:colorBackground">@color/background_floating_material_dark</item>
        <item name="android:colorBackgroundCacheHint">@null</item>

        <item name="android:windowFrame">@null</item>
        <item name="android:windowTitleStyle">@style/RtlOverlay.DialogWindowTitle.AppCompat</item>
        <item name="android:windowTitleBackgroundStyle">@style/Base.DialogWindowTitleBackground.AppCompat</item>
        <item name="android:windowBackground">@drawable/abc_dialog_material_background_dark</item>
        <item name="android:windowIsFloating">true</item>
        <item name="android:backgroundDimEnabled">true</item>
        <item name="android:windowContentOverlay">@null</item>
        <item name="android:windowAnimationStyle">@style/Animation.AppCompat.Dialog</item>
        <item name="android:windowSoftInputMode">stateUnspecified|adjustPan</item>

        <item name="windowActionBar">false</item>
        <item name="windowActionModeOverlay">true</item>

        <item name="listPreferredItemPaddingLeft">24dip</item>
        <item name="listPreferredItemPaddingRight">24dip</item>

        <item name="android:listDivider">@null</item>
    </style>
    <style name="Base.V7.Theme.AppCompat.Light" parent="Platform.AppCompat.Light">
        <item name="windowNoTitle">false</item>
        <item name="windowActionBar">true</item>
        <item name="windowActionBarOverlay">false</item>
        <item name="windowActionModeOverlay">false</item>
        <item name="actionBarPopupTheme">@null</item>

        <!-- Used by MediaRouter -->
        <item name="isLightTheme">true</item>

        <item name="selectableItemBackground">@drawable/abc_item_background_holo_light</item>
        <item name="selectableItemBackgroundBorderless">?attr/selectableItemBackground</item>
        <item name="borderlessButtonStyle">@style/Widget.AppCompat.Button.Borderless</item>
        <item name="homeAsUpIndicator">@drawable/abc_ic_ab_back_mtrl_am_alpha</item>

        <item name="dividerVertical">@drawable/abc_list_divider_mtrl_alpha</item>
        <item name="dividerHorizontal">@drawable/abc_list_divider_mtrl_alpha</item>

        <!-- Action Bar Styles -->
        <item name="actionBarTabStyle">@style/Widget.AppCompat.Light.ActionBar.TabView</item>
        <item name="actionBarTabBarStyle">@style/Widget.AppCompat.Light.ActionBar.TabBar</item>
        <item name="actionBarTabTextStyle">@style/Widget.AppCompat.Light.ActionBar.TabText</item>
        <item name="actionButtonStyle">@style/Widget.AppCompat.Light.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.Light.ActionButton.Overflow</item>
        <item name="actionOverflowMenuStyle">@style/Widget.AppCompat.Light.PopupMenu.Overflow</item>
        <item name="actionBarStyle">@style/Widget.AppCompat.Light.ActionBar.Solid</item>
        <item name="actionBarSplitStyle">?attr/actionBarStyle</item>
        <item name="actionBarWidgetTheme">@null</item>
        <item name="actionBarTheme">@style/ThemeOverlay.AppCompat.ActionBar</item>
        <item name="actionBarSize">@dimen/abc_action_bar_default_height_material</item>
        <item name="actionBarDivider">?attr/dividerVertical</item>
        <item name="actionBarItemBackground">?attr/selectableItemBackgroundBorderless</item>
        <item name="actionMenuTextAppearance">@style/TextAppearance.AppCompat.Widget.ActionBar.Menu</item>
        <item name="actionMenuTextColor">?android:attr/textColorPrimaryDisableOnly</item>

        <!-- Action Mode -->
        <item name="actionModeStyle">@style/Widget.AppCompat.ActionMode</item>
        <item name="actionModeBackground">@drawable/abc_cab_background_top_material</item>
        <item name="actionModeSplitBackground">?attr/colorPrimaryDark</item>
        <item name="actionModeCloseDrawable">@drawable/abc_ic_ab_back_mtrl_am_alpha</item>
        <item name="actionModeCloseButtonStyle">@style/Widget.AppCompat.ActionButton.CloseMode</item>

        <item name="actionModeCutDrawable">@drawable/abc_ic_menu_cut_mtrl_alpha</item>
        <item name="actionModeCopyDrawable">@drawable/abc_ic_menu_copy_mtrl_am_alpha</item>
        <item name="actionModePasteDrawable">@drawable/abc_ic_menu_paste_mtrl_am_alpha</item>
        <item name="actionModeSelectAllDrawable">@drawable/abc_ic_menu_selectall_mtrl_alpha</item>
        <item name="actionModeShareDrawable">@drawable/abc_ic_menu_share_mtrl_alpha</item>

        <!-- Dropdown Spinner Attributes -->
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Light.Spinner.DropDown.ActionBar</item>

        <!-- Panel attributes -->
        <item name="panelMenuListWidth">@dimen/abc_panel_menu_list_width</item>
        <item name="panelMenuListTheme">@style/Theme.AppCompat.CompactMenu</item>
        <item name="panelBackground">@drawable/abc_menu_hardkey_panel_mtrl_mult</item>
        <item name="android:panelBackground">@android:color/transparent</item>
        <item name="listChoiceBackgroundIndicator">@drawable/abc_list_selector_holo_light</item>

        <!-- List attributes -->
        <item name="textAppearanceListItem">@style/TextAppearance.AppCompat.Subhead</item>
        <item name="textAppearanceListItemSmall">@style/TextAppearance.AppCompat.Subhead</item>
        <item name="listPreferredItemHeight">64dp</item>
        <item name="listPreferredItemHeightSmall">48dp</item>
        <item name="listPreferredItemHeightLarge">80dp</item>
        <item name="listPreferredItemPaddingLeft">@dimen/abc_list_item_padding_horizontal_material</item>
        <item name="listPreferredItemPaddingRight">@dimen/abc_list_item_padding_horizontal_material</item>

        <!-- Spinner styles -->
        <item name="spinnerStyle">@style/Widget.AppCompat.Spinner</item>
        <item name="android:spinnerItemStyle">@style/Widget.AppCompat.TextView.SpinnerItem</item>
        <item name="android:dropDownListViewStyle">@style/Widget.AppCompat.ListView.DropDown</item>

        <!-- Required for use of support_simple_spinner_dropdown_item.xml -->
        <item name="spinnerDropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
        <item name="dropdownListPreferredItemHeight">?attr/listPreferredItemHeightSmall</item>

        <!-- Popup Menu styles -->
        <item name="popupMenuStyle">@style/Widget.AppCompat.Light.PopupMenu</item>
        <item name="textAppearanceLargePopupMenu">@style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Large</item>
        <item name="textAppearanceSmallPopupMenu">@style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Small</item>
        <item name="listPopupWindowStyle">@style/Widget.AppCompat.ListPopupWindow</item>
        <item name="dropDownListViewStyle">?android:attr/dropDownListViewStyle</item>

        <!-- SearchView attributes -->
        <item name="searchViewStyle">@style/Widget.AppCompat.Light.SearchView</item>
        <item name="android:dropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
        <item name="textColorSearchUrl">@color/abc_search_url_text</item>
        <item name="textAppearanceSearchResultTitle">@style/TextAppearance.AppCompat.SearchResult.Title</item>
        <item name="textAppearanceSearchResultSubtitle">@style/TextAppearance.AppCompat.SearchResult.Subtitle</item>

        <!-- ShareActionProvider attributes -->
        <item name="activityChooserViewStyle">@style/Widget.AppCompat.ActivityChooserView</item>

        <!-- Toolbar styles -->
        <item name="toolbarStyle">@style/Widget.AppCompat.Toolbar</item>
        <item name="toolbarNavigationButtonStyle">@style/Widget.AppCompat.Toolbar.Button.Navigation</item>

        <item name="editTextStyle">@style/Widget.AppCompat.EditText</item>
        <item name="editTextBackground">@drawable/abc_edit_text_material</item>
        <item name="editTextColor">?android:attr/textColorPrimary</item>
        <item name="autoCompleteTextViewStyle">@style/Widget.AppCompat.AutoCompleteTextView</item>

        <!-- Color palette -->
        <item name="colorPrimaryDark">@color/primary_dark_material_light</item>
        <item name="colorPrimary">@color/primary_material_light</item>
        <item name="colorAccent">@color/accent_material_light</item>

        <item name="colorControlNormal">?android:attr/textColorSecondary</item>
        <item name="colorControlActivated">?attr/colorAccent</item>
        <item name="colorControlHighlight">@color/ripple_material_light</item>
        <item name="colorButtonNormal">@color/button_material_light</item>
        <item name="colorSwitchThumbNormal">@color/switch_thumb_material_light</item>
        <item name="controlBackground">?attr/selectableItemBackgroundBorderless</item>

        <item name="drawerArrowStyle">@style/Widget.AppCompat.DrawerArrowToggle</item>

        <item name="checkboxStyle">@style/Widget.AppCompat.CompoundButton.CheckBox</item>
        <item name="radioButtonStyle">@style/Widget.AppCompat.CompoundButton.RadioButton</item>
        <item name="switchStyle">@style/Widget.AppCompat.CompoundButton.Switch</item>

        <item name="ratingBarStyle">@style/Widget.AppCompat.RatingBar</item>
        <item name="ratingBarStyleIndicator">@style/Widget.AppCompat.RatingBar.Indicator</item>
        <item name="ratingBarStyleSmall">@style/Widget.AppCompat.RatingBar.Small</item>
        <item name="seekBarStyle">@style/Widget.AppCompat.SeekBar</item>

        <!-- Button styles -->
        <item name="buttonStyle">@style/Widget.AppCompat.Button</item>
        <item name="buttonStyleSmall">@style/Widget.AppCompat.Button.Small</item>
        <item name="android:textAppearanceButton">@style/TextAppearance.AppCompat.Widget.Button</item>

        <item name="imageButtonStyle">@style/Widget.AppCompat.ImageButton</item>

        <item name="buttonBarStyle">@style/Widget.AppCompat.ButtonBar</item>
        <item name="buttonBarButtonStyle">@style/Widget.AppCompat.Button.ButtonBar.AlertDialog</item>
        <item name="buttonBarPositiveButtonStyle">?attr/buttonBarButtonStyle</item>
        <item name="buttonBarNegativeButtonStyle">?attr/buttonBarButtonStyle</item>
        <item name="buttonBarNeutralButtonStyle">?attr/buttonBarButtonStyle</item>

        <!-- Dialog attributes -->
        <item name="dialogTheme">@style/Theme.AppCompat.Light.Dialog</item>
        <item name="dialogPreferredPadding">@dimen/abc_dialog_padding_material</item>

        <item name="alertDialogTheme">@style/Theme.AppCompat.Light.Dialog.Alert</item>
        <item name="alertDialogStyle">@style/AlertDialog.AppCompat.Light</item>
        <item name="alertDialogCenterButtons">false</item>
        <item name="textColorAlertDialogListItem">@color/abc_primary_text_material_light</item>
        <item name="listDividerAlertDialog">@null</item>

        <!-- Define these here; ContextThemeWrappers around themes that define them should
             always clear these values. -->
        <item name="windowFixedWidthMajor">0dp</item>
        <item name="windowFixedWidthMinor">0dp</item>
        <item name="windowFixedHeightMajor">0dp</item>
        <item name="windowFixedHeightMinor">0dp</item>
    </style>
    <style name="Base.V7.Theme.AppCompat.Light.Dialog" parent="Base.Theme.AppCompat.Light">
        <item name="android:colorBackground">@color/background_floating_material_light</item>
        <item name="android:colorBackgroundCacheHint">@null</item>

        <item name="android:windowFrame">@null</item>
        <item name="android:windowTitleStyle">@style/RtlOverlay.DialogWindowTitle.AppCompat</item>
        <item name="android:windowTitleBackgroundStyle">@style/Base.DialogWindowTitleBackground.AppCompat</item>
        <item name="android:windowBackground">@drawable/abc_dialog_material_background_light</item>
        <item name="android:windowIsFloating">true</item>
        <item name="android:backgroundDimEnabled">true</item>
        <item name="android:windowContentOverlay">@null</item>
        <item name="android:windowAnimationStyle">@style/Animation.AppCompat.Dialog</item>
        <item name="android:windowSoftInputMode">stateUnspecified|adjustPan</item>

        <item name="windowActionBar">false</item>
        <item name="windowActionModeOverlay">true</item>

        <item name="listPreferredItemPaddingLeft">24dip</item>
        <item name="listPreferredItemPaddingRight">24dip</item>

        <item name="android:listDivider">@null</item>
    </style>
    <style name="Base.V7.Widget.AppCompat.AutoCompleteTextView" parent="android:Widget.AutoCompleteTextView">
        <item name="android:dropDownSelector">?attr/listChoiceBackgroundIndicator</item>
        <item name="android:popupBackground">@drawable/abc_popup_background_mtrl_mult</item>
        <item name="android:background">?attr/editTextBackground</item>
        <item name="android:textColor">?attr/editTextColor</item>
        <item name="android:textAppearance">?android:attr/textAppearanceMediumInverse</item>
    </style>
    <style name="Base.V7.Widget.AppCompat.EditText" parent="android:Widget.EditText">
        <item name="android:background">?attr/editTextBackground</item>
        <item name="android:textColor">?attr/editTextColor</item>
        <item name="android:textAppearance">?android:attr/textAppearanceMediumInverse</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionBar" parent="">
        <item name="displayOptions">showTitle</item>
        <item name="divider">?attr/dividerVertical</item>
        <item name="height">?attr/actionBarSize</item>

        <item name="titleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionBar.Title</item>
        <item name="subtitleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionBar.Subtitle</item>

        <item name="background">@null</item>
        <item name="backgroundStacked">@null</item>
        <item name="backgroundSplit">@null</item>

        <item name="actionButtonStyle">@style/Widget.AppCompat.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.ActionButton.Overflow</item>

        <item name="android:gravity">center_vertical</item>
        <item name="contentInsetStart">@dimen/abc_action_bar_content_inset_material</item>
        <item name="contentInsetEnd">@dimen/abc_action_bar_content_inset_material</item>
        <item name="elevation">8dp</item>
        <item name="popupTheme">?attr/actionBarPopupTheme</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionBar.Solid">
        <item name="background">?attr/colorPrimary</item>
        <item name="backgroundStacked">?attr/colorPrimary</item>
        <item name="backgroundSplit">?attr/colorPrimary</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionBar.TabBar" parent="">
        <item name="divider">?attr/actionBarDivider</item>
        <item name="showDividers">middle</item>
        <item name="dividerPadding">8dip</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionBar.TabText" parent="">
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Medium</item>
        <item name="android:textColor">?android:attr/textColorPrimary</item>
        <item name="android:textSize">12sp</item>
        <item name="android:textStyle">bold</item>
        <item name="android:ellipsize">marquee</item>
        <item name="android:maxLines">2</item>
        <item name="android:maxWidth">180dp</item>
        <item name="textAllCaps">true</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionBar.TabView" parent="">
        <item name="android:background">@drawable/abc_tab_indicator_material</item>
        <item name="android:gravity">center_horizontal</item>
        <item name="android:paddingLeft">16dip</item>
        <item name="android:paddingRight">16dip</item>
        <item name="android:layout_width">0dip</item>
        <item name="android:layout_weight">1</item>
        <item name="android:minWidth">80dip</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionButton" parent="RtlUnderlay.Widget.AppCompat.ActionButton">
        <item name="android:background">?attr/actionBarItemBackground</item>
        <item name="android:minWidth">@dimen/abc_action_button_min_width_material</item>
        <item name="android:minHeight">@dimen/abc_action_button_min_height_material</item>
        <item name="android:scaleType">center</item>
        <item name="android:gravity">center</item>
        <item name="android:maxLines">2</item>
        <item name="textAllCaps">@bool/abc_config_actionMenuItemAllCaps</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionButton.CloseMode">
        <item name="android:background">?attr/controlBackground</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionButton.Overflow" parent="RtlUnderlay.Widget.AppCompat.ActionButton.Overflow">
        <item name="android:src">@drawable/abc_ic_menu_moreoverflow_mtrl_alpha</item>
        <item name="android:background">?attr/actionBarItemBackground</item>
        <item name="android:contentDescription">@string/abc_action_menu_overflow_description</item>
        <item name="android:minWidth">@dimen/abc_action_button_min_width_overflow_material</item>
        <item name="android:minHeight">@dimen/abc_action_button_min_height_material</item>
    </style>
    <style name="Base.Widget.AppCompat.ActionMode" parent="">
        <item name="background">?attr/actionModeBackground</item>
        <item name="backgroundSplit">?attr/actionModeSplitBackground</item>
        <item name="height">?attr/actionBarSize</item>
        <item name="titleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionMode.Title</item>
        <item name="subtitleTextStyle">@style/TextAppearance.AppCompat.Widget.ActionMode.Subtitle</item>
        <item name="closeItemLayout">@layout/abc_action_mode_close_item_material</item>
    </style>
    <style name="Base.Widget.AppCompat.ActivityChooserView" parent="">
        <item name="android:gravity">center</item>
        <item name="android:background">@drawable/abc_ab_share_pack_mtrl_alpha</item>
        <item name="divider">?attr/dividerVertical</item>
        <item name="showDividers">middle</item>
        <item name="dividerPadding">6dip</item>
    </style>
    <style name="Base.Widget.AppCompat.AutoCompleteTextView" parent="Base.V7.Widget.AppCompat.AutoCompleteTextView"/>
    <style name="Base.Widget.AppCompat.Button" parent="android:Widget">
        <item name="android:background">@drawable/abc_btn_default_mtrl_shape</item>
        <item name="android:textAppearance">?android:attr/textAppearanceButton</item>
        <item name="android:minHeight">48dip</item>
        <item name="android:minWidth">88dip</item>
        <item name="android:focusable">true</item>
        <item name="android:clickable">true</item>
        <item name="android:gravity">center_vertical|center_horizontal</item>
    </style>
    <style name="Base.Widget.AppCompat.Button.Borderless">
        <item name="android:background">@drawable/abc_btn_borderless_material</item>
    </style>
    <style name="Base.Widget.AppCompat.Button.Borderless.Colored">
        <item name="android:textColor">?attr/colorAccent</item>
    </style>
    <style name="Base.Widget.AppCompat.Button.ButtonBar.AlertDialog" parent="Widget.AppCompat.Button.Borderless.Colored">
        <item name="android:minWidth">64dp</item>
        <item name="android:maxLines">2</item>
        <item name="android:minHeight">@dimen/abc_alert_dialog_button_bar_height</item>
    </style>
    <style name="Base.Widget.AppCompat.Button.Colored">
        <item name="android:background">@drawable/abc_btn_colored_material</item>
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Widget.Button.Inverse</item>
    </style>
    <style name="Base.Widget.AppCompat.Button.Small">
        <item name="android:minHeight">48dip</item>
        <item name="android:minWidth">48dip</item>
    </style>
    <style name="Base.Widget.AppCompat.ButtonBar" parent="android:Widget">
        <item name="android:background">@null</item>
    </style>
    <style name="Base.Widget.AppCompat.ButtonBar.AlertDialog"/>
    <style name="Base.Widget.AppCompat.CompoundButton.CheckBox" parent="android:Widget.CompoundButton.CheckBox">
        <item name="android:button">?android:attr/listChoiceIndicatorMultiple</item>
        <item name="android:background">?attr/controlBackground</item>
    </style>
    <style name="Base.Widget.AppCompat.CompoundButton.RadioButton" parent="android:Widget.CompoundButton.RadioButton">
        <item name="android:button">?android:attr/listChoiceIndicatorSingle</item>
        <item name="android:background">?attr/controlBackground</item>
    </style>
    <style name="Base.Widget.AppCompat.CompoundButton.Switch" parent="android:Widget.CompoundButton">
        <item name="track">@drawable/abc_switch_track_mtrl_alpha</item>
        <item name="android:thumb">@drawable/abc_switch_thumb_material</item>
        <item name="switchTextAppearance">@style/TextAppearance.AppCompat.Widget.Switch</item>
        <item name="android:background">?attr/controlBackground</item>
        <item name="showText">false</item>
        <item name="switchPadding">@dimen/abc_switch_padding</item>
        <item name="android:textOn">@string/abc_capital_on</item>
        <item name="android:textOff">@string/abc_capital_off</item>
    </style>
    <style name="Base.Widget.AppCompat.DrawerArrowToggle" parent="Base.Widget.AppCompat.DrawerArrowToggle.Common">
        <item name="barLength">18dp</item>
        <item name="gapBetweenBars">3dp</item>
        <item name="drawableSize">24dp</item>
    </style>
    <style name="Base.Widget.AppCompat.DrawerArrowToggle.Common" parent="">
        <item name="color">?android:attr/textColorSecondary</item>
        <item name="spinBars">true</item>
        <item name="thickness">2dp</item>
        <item name="arrowShaftLength">16dp</item>
        <item name="arrowHeadLength">8dp</item>
    </style>
    <style name="Base.Widget.AppCompat.DropDownItem.Spinner" parent="">
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Widget.DropDownItem</item>
        <item name="android:paddingLeft">8dp</item>
        <item name="android:paddingRight">8dp</item>
        <item name="android:gravity">center_vertical</item>
    </style>
    <style name="Base.Widget.AppCompat.EditText" parent="Base.V7.Widget.AppCompat.EditText"/>
    <style name="Base.Widget.AppCompat.ImageButton" parent="android:Widget.ImageButton">
        <item name="android:background">@drawable/abc_btn_default_mtrl_shape</item>
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar" parent="Base.Widget.AppCompat.ActionBar">
        <item name="actionButtonStyle">@style/Widget.AppCompat.Light.ActionButton</item>
        <item name="actionOverflowButtonStyle">@style/Widget.AppCompat.Light.ActionButton.Overflow</item>
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar.Solid">
        <item name="background">?attr/colorPrimary</item>
        <item name="backgroundStacked">?attr/colorPrimary</item>
        <item name="backgroundSplit">?attr/colorPrimary</item>
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar.TabBar" parent="Base.Widget.AppCompat.ActionBar.TabBar">
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar.TabText" parent="Base.Widget.AppCompat.ActionBar.TabText">
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar.TabText.Inverse" parent="Base.Widget.AppCompat.Light.ActionBar.TabText">
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Medium.Inverse</item>
    </style>
    <style name="Base.Widget.AppCompat.Light.ActionBar.TabView" parent="Base.Widget.AppCompat.ActionBar.TabView">
        <item name="android:background">@drawable/abc_tab_indicator_material</item>
    </style>
    <style name="Base.Widget.AppCompat.Light.PopupMenu" parent="@style/Widget.AppCompat.ListPopupWindow">
    </style>
    <style name="Base.Widget.AppCompat.Light.PopupMenu.Overflow">
        <item name="overlapAnchor">true</item>
        <item name="android:dropDownHorizontalOffset">-4dip</item>
    </style>
    <style name="Base.Widget.AppCompat.ListPopupWindow" parent="">
        <item name="android:dropDownSelector">?attr/listChoiceBackgroundIndicator</item>
        <item name="android:popupBackground">@drawable/abc_popup_background_mtrl_mult</item>
        <item name="android:dropDownVerticalOffset">0dip</item>
        <item name="android:dropDownHorizontalOffset">0dip</item>
        <item name="android:dropDownWidth">wrap_content</item>
    </style>
    <style name="Base.Widget.AppCompat.ListView" parent="android:Widget.ListView">
        <item name="android:listSelector">?attr/listChoiceBackgroundIndicator</item>
    </style>
    <style name="Base.Widget.AppCompat.ListView.DropDown">
        <item name="android:divider">@null</item>
    </style>
    <style name="Base.Widget.AppCompat.ListView.Menu" parent="android:Widget.ListView.Menu">
        <item name="android:listSelector">?attr/listChoiceBackgroundIndicator</item>
        <item name="android:divider">?attr/dividerHorizontal</item>
    </style>
    <style name="Base.Widget.AppCompat.PopupMenu" parent="@style/Widget.AppCompat.ListPopupWindow">
    </style>
    <style name="Base.Widget.AppCompat.PopupMenu.Overflow">
        <item name="overlapAnchor">true</item>
        <item name="android:dropDownHorizontalOffset">-4dip</item>
    </style>
    <style name="Base.Widget.AppCompat.PopupWindow" parent="android:Widget.PopupWindow">
    </style>
    <style name="Base.Widget.AppCompat.ProgressBar" parent="android:Widget.ProgressBar">
        <item name="android:minWidth">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:maxWidth">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:minHeight">@dimen/abc_action_bar_progress_bar_size</item>
        <item name="android:maxHeight">@dimen/abc_action_bar_progress_bar_size</item>
    </style>
    <style name="Base.Widget.AppCompat.ProgressBar.Horizontal" parent="android:Widget.ProgressBar.Horizontal">
    </style>
    <style name="Base.Widget.AppCompat.RatingBar" parent="android:Widget.RatingBar">
        <item name="android:progressDrawable">@drawable/abc_ratingbar_full_material</item>
        <item name="android:indeterminateDrawable">@drawable/abc_ratingbar_full_material</item>
    </style>
    <style name="Base.Widget.AppCompat.RatingBar.Indicator" parent="android:Widget.RatingBar">
        <item name="android:progressDrawable">@drawable/abc_ratingbar_indicator_material</item>
        <item name="android:indeterminateDrawable">@drawable/abc_ratingbar_indicator_material</item>
        <item name="android:minHeight">36dp</item>
        <item name="android:maxHeight">36dp</item>
        <item name="android:isIndicator">true</item>
        <item name="android:thumb">@null</item>
    </style>
    <style name="Base.Widget.AppCompat.RatingBar.Small" parent="android:Widget.RatingBar">
        <item name="android:progressDrawable">@drawable/abc_ratingbar_small_material</item>
        <item name="android:indeterminateDrawable">@drawable/abc_ratingbar_small_material</item>
        <item name="android:minHeight">16dp</item>
        <item name="android:maxHeight">16dp</item>
        <item name="android:isIndicator">true</item>
        <item name="android:thumb">@null</item>
    </style>
    <style name="Base.Widget.AppCompat.SearchView" parent="android:Widget">
        <item name="layout">@layout/abc_search_view</item>
        <item name="queryBackground">@drawable/abc_textfield_search_material</item>
        <item name="submitBackground">@drawable/abc_textfield_search_material</item>
        <item name="closeIcon">@drawable/abc_ic_clear_mtrl_alpha</item>
        <item name="searchIcon">@drawable/abc_ic_search_api_mtrl_alpha</item>
        <item name="searchHintIcon">@drawable/abc_ic_search_api_mtrl_alpha</item>
        <item name="goIcon">@drawable/abc_ic_go_search_api_mtrl_alpha</item>
        <item name="voiceIcon">@drawable/abc_ic_voice_search_api_mtrl_alpha</item>
        <item name="commitIcon">@drawable/abc_ic_commit_search_api_mtrl_alpha</item>
        <item name="suggestionRowLayout">@layout/abc_search_dropdown_item_icons_2line</item>
    </style>
    <style name="Base.Widget.AppCompat.SearchView.ActionBar">
        <item name="queryBackground">@null</item>
        <item name="submitBackground">@null</item>
        <item name="searchHintIcon">@null</item>
        <item name="defaultQueryHint">@string/abc_search_hint</item>
    </style>
    <style name="Base.Widget.AppCompat.SeekBar" parent="android:Widget">
        <item name="android:indeterminateOnly">false</item>
        <item name="android:progressDrawable">@drawable/abc_seekbar_track_material</item>
        <item name="android:indeterminateDrawable">@drawable/abc_seekbar_track_material</item>
        <item name="android:thumb">@drawable/abc_seekbar_thumb_material</item>
        <item name="android:focusable">true</item>
        <item name="android:paddingLeft">16dip</item>
        <item name="android:paddingRight">16dip</item>
    </style>
    <style name="Base.Widget.AppCompat.Spinner" parent="Platform.Widget.AppCompat.Spinner">
        <item name="android:background">@drawable/abc_spinner_mtrl_am_alpha</item>
        <item name="android:popupBackground">@drawable/abc_popup_background_mtrl_mult</item>
        <item name="android:dropDownSelector">?attr/listChoiceBackgroundIndicator</item>
        <item name="android:dropDownVerticalOffset">0dip</item>
        <item name="android:dropDownHorizontalOffset">0dip</item>
        <item name="android:dropDownWidth">wrap_content</item>
        <item name="android:clickable">true</item>
        <item name="android:gravity">left|start|center_vertical</item>
        <item name="overlapAnchor">true</item>
    </style>
    <style name="Base.Widget.AppCompat.Spinner.Underlined">
        <item name="android:background">@drawable/abc_spinner_textfield_background_material</item>
    </style>
    <style name="Base.Widget.AppCompat.TextView.SpinnerItem" parent="android:Widget.TextView.SpinnerItem">
        <item name="android:textAppearance">@style/TextAppearance.AppCompat.Widget.TextView.SpinnerItem</item>
        <item name="android:paddingLeft">8dp</item>
        <item name="android:paddingRight">8dp</item>
    </style>
    <style name="Base.Widget.AppCompat.Toolbar" parent="android:Widget">
        <item name="titleTextAppearance">@style/TextAppearance.Widget.AppCompat.Toolbar.Title</item>
        <item name="subtitleTextAppearance">@style/TextAppearance.Widget.AppCompat.Toolbar.Subtitle</item>
        <item name="android:minHeight">?attr/actionBarSize</item>
        <item name="titleMargins">4dp</item>
        <item name="maxButtonHeight">@dimen/abc_action_bar_default_height_material</item>
        <item name="collapseIcon">?attr/homeAsUpIndicator</item>
        <item name="collapseContentDescription">@string/abc_toolbar_collapse_description</item>
        <item name="contentInsetStart">16dp</item>
        <item name="android:paddingLeft">@dimen/abc_action_bar_default_padding_start_material</item>
        <item name="android:paddingRight">@dimen/abc_action_bar_default_padding_end_material</item>
    </style>
    <style name="Base.Widget.AppCompat.Toolbar.Button.Navigation" parent="android:Widget">
        <item name="android:background">?attr/controlBackground</item>
        <item name="android:minWidth">56dp</item>
        <item name="android:scaleType">center</item>
    </style>
    <style name="Base.Widget.Design.TabLayout" parent="android:Widget">
        <item name="tabMaxWidth">@dimen/design_tab_max_width</item>
        <item name="tabIndicatorColor">?attr/colorAccent</item>
        <item name="tabIndicatorHeight">2dp</item>
        <item name="tabPaddingStart">12dp</item>
        <item name="tabPaddingEnd">12dp</item>
        <item name="tabBackground">?attr/selectableItemBackground</item>
        <item name="tabTextAppearance">@style/TextAppearance.Design.Tab</item>
        <item name="tabSelectedTextColor">?android:textColorPrimary</item>
    </style>
    <style name="CardView" parent="Base.CardView">
    </style>
    <style name="CardView.Dark">
        <item name="cardBackgroundColor">@color/cardview_dark_background</item>
    </style>
    <style name="CardView.Light">
        <item name="cardBackgroundColor">@color/cardview_light_background</item>
    </style>
    <style name="Platform.AppCompat" parent="android:Theme">
        <item name="android:windowNoTitle">true</item>

        <!-- Window colors -->
        <item name="android:colorForeground">@color/foreground_material_dark</item>
        <item name="android:colorForegroundInverse">@color/foreground_material_light</item>
        <item name="android:colorBackground">@color/background_material_dark</item>
        <item name="android:colorBackgroundCacheHint">@color/abc_background_cache_hint_selector_material_dark</item>
        <item name="android:disabledAlpha">@dimen/abc_disabled_alpha_material_dark</item>
        <item name="android:backgroundDimAmount">0.6</item>
        <item name="android:windowBackground">@color/background_material_dark</item>

        <!-- Text colors -->
        <item name="android:textColorPrimary">@color/abc_primary_text_material_dark</item>
        <item name="android:textColorPrimaryInverse">@color/abc_primary_text_material_light</item>
        <item name="android:textColorPrimaryDisableOnly">@color/abc_primary_text_disable_only_material_dark</item>
        <item name="android:textColorSecondary">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorSecondaryInverse">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorTertiary">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorTertiaryInverse">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorHint">@color/hint_foreground_material_dark</item>
        <item name="android:textColorHintInverse">@color/hint_foreground_material_light</item>
        <item name="android:textColorHighlight">@color/highlighted_text_material_dark</item>
        <item name="android:textColorLink">?attr/colorAccent</item>

        <!-- Text styles -->
        <item name="android:textAppearance">@style/TextAppearance.AppCompat</item>
        <item name="android:textAppearanceInverse">@style/TextAppearance.AppCompat.Inverse</item>
        <item name="android:textAppearanceLarge">@style/TextAppearance.AppCompat.Large</item>
        <item name="android:textAppearanceLargeInverse">@style/TextAppearance.AppCompat.Large.Inverse</item>
        <item name="android:textAppearanceMedium">@style/TextAppearance.AppCompat.Medium</item>
        <item name="android:textAppearanceMediumInverse">@style/TextAppearance.AppCompat.Medium.Inverse</item>
        <item name="android:textAppearanceSmall">@style/TextAppearance.AppCompat.Small</item>
        <item name="android:textAppearanceSmallInverse">@style/TextAppearance.AppCompat.Small.Inverse</item>

        <item name="android:listChoiceIndicatorSingle">@drawable/abc_btn_radio_material</item>
        <item name="android:listChoiceIndicatorMultiple">@drawable/abc_btn_check_material</item>
    </style>
    <style name="Platform.AppCompat.Light" parent="android:Theme.Light">
        <item name="android:windowNoTitle">true</item>

        <!-- Window colors -->
        <item name="android:colorForeground">@color/foreground_material_light</item>
        <item name="android:colorForegroundInverse">@color/foreground_material_dark</item>
        <item name="android:colorBackground">@color/background_material_light</item>
        <item name="android:colorBackgroundCacheHint">@color/abc_background_cache_hint_selector_material_light</item>
        <item name="android:disabledAlpha">@dimen/abc_disabled_alpha_material_light</item>
        <item name="android:backgroundDimAmount">0.6</item>
        <item name="android:windowBackground">@color/background_material_light</item>

        <!-- Text colors -->
        <item name="android:textColorPrimary">@color/abc_primary_text_material_light</item>
        <item name="android:textColorPrimaryInverse">@color/abc_primary_text_material_dark</item>
        <item name="android:textColorSecondary">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorSecondaryInverse">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorTertiary">@color/abc_secondary_text_material_light</item>
        <item name="android:textColorTertiaryInverse">@color/abc_secondary_text_material_dark</item>
        <item name="android:textColorPrimaryDisableOnly">@color/abc_primary_text_disable_only_material_light</item>
        <item name="android:textColorPrimaryInverseDisableOnly">@color/abc_primary_text_disable_only_material_dark</item>
        <item name="android:textColorHint">@color/hint_foreground_material_light</item>
        <item name="android:textColorHintInverse">@color/hint_foreground_material_dark</item>
        <item name="android:textColorHighlight">@color/highlighted_text_material_light</item>
        <item name="android:textColorLink">?attr/colorAccent</item>

        <!-- Text styles -->
        <item name="android:textAppearance">@style/TextAppearance.AppCompat</item>
        <item name="android:textAppearanceInverse">@style/TextAppearance.AppCompat.Inverse</item>
        <item name="android:textAppearanceLarge">@style/TextAppearance.AppCompat.Large</item>
        <item name="android:textAppearanceLargeInverse">@style/TextAppearance.AppCompat.Large.Inverse</item>
        <item name="android:textAppearanceMedium">@style/TextAppearance.AppCompat.Medium</item>
        <item name="android:textAppearanceMediumInverse">@style/TextAppearance.AppCompat.Medium.Inverse</item>
        <item name="android:textAppearanceSmall">@style/TextAppearance.AppCompat.Small</item>
        <item name="android:textAppearanceSmallInverse">@style/TextAppearance.AppCompat.Small.Inverse</item>

        <item name="android:listChoiceIndicatorSingle">@drawable/abc_btn_radio_material</item>
        <item name="android:listChoiceIndicatorMultiple">@drawable/abc_btn_check_material</item>
    </style>
    <style name="Platform.ThemeOverlay.AppCompat" parent=""/>
    <style name="Platform.ThemeOverlay.AppCompat.Dark">
        <!-- Action Bar styles -->
        <item name="actionBarItemBackground">@drawable/abc_item_background_holo_dark</item>
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Spinner.DropDown.ActionBar</item>
        <item name="selectableItemBackground">@drawable/abc_item_background_holo_dark</item>

        <!-- SearchView styles -->
        <item name="android:autoCompleteTextViewStyle">@style/Widget.AppCompat.AutoCompleteTextView</item>
        <item name="android:dropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
    </style>
    <style name="Platform.ThemeOverlay.AppCompat.Light">
        <item name="actionBarItemBackground">@drawable/abc_item_background_holo_light</item>
        <item name="actionDropDownStyle">@style/Widget.AppCompat.Light.Spinner.DropDown.ActionBar</item>
        <item name="selectableItemBackground">@drawable/abc_item_background_holo_light</item>

        <!-- SearchView attributes -->
        <item name="android:autoCompleteTextViewStyle">@style/Widget.AppCompat.Light.AutoCompleteTextView</item>
        <item name="android:dropDownItemStyle">@style/Widget.AppCompat.DropDownItem.Spinner</item>
    </style>
    <style name="Platform.Widget.AppCompat.Spinner" parent="android:Widget.Spinner"/>
    <style name="RtlOverlay.DialogWindowTitle.AppCompat" parent="Base.DialogWindowTitle.AppCompat">
    </style>
    <style name="RtlOverlay.Widget.AppCompat.ActionBar.TitleItem" parent="android:Widget">
        <item name="android:layout_gravity">center_vertical|left</item>
        <item name="android:paddingRight">8dp</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.DialogTitle.Icon" parent="android:Widget">
        <item name="android:layout_marginRight">8dp</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.PopupMenuItem" parent="android:Widget">
        <item name="android:paddingRight">16dp</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.PopupMenuItem.InternalGroup" parent="android:Widget">
        <item name="android:layout_marginLeft">16dp</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.PopupMenuItem.Text" parent="android:Widget">
        <item name="android:layout_alignParentLeft">true</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.Search.DropDown" parent="android:Widget">
        <item name="android:paddingLeft">@dimen/abc_dropdownitem_text_padding_left</item>
        <item name="android:paddingRight">4dp</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.Search.DropDown.Icon1" parent="android:Widget">
        <item name="android:layout_alignParentLeft">true</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.Search.DropDown.Icon2" parent="android:Widget">
        <item name="android:layout_toLeftOf">@id/edit_query</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.Search.DropDown.Query" parent="android:Widget">
        <item name="android:layout_alignParentRight">true</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.Search.DropDown.Text" parent="Base.Widget.AppCompat.DropDownItem.Spinner">
        <item name="android:layout_toLeftOf">@android:id/icon2</item>
        <item name="android:layout_toRightOf">@android:id/icon1</item>
    </style>
    <style name="RtlOverlay.Widget.AppCompat.SearchView.MagIcon" parent="android:Widget">
        <item name="android:layout_marginLeft">@dimen/abc_dropdownitem_text_padding_left</item>
    </style>
    <style name="RtlUnderlay.Widget.AppCompat.ActionButton" parent="android:Widget">
        <item name="android:paddingLeft">12dp</item>
        <item name="android:paddingRight">12dp</item>
    </style>
    <style name="RtlUnderlay.Widget.AppCompat.ActionButton.Overflow" parent="Base.Widget.AppCompat.ActionButton">
        <item name="android:paddingLeft">@dimen/abc_action_bar_overflow_padding_start_material</item>
        <item name="android:paddingRight">@dimen/abc_action_bar_overflow_padding_end_material</item>
    </style>
    <style name="TextAppearance.AppCompat" parent="Base.TextAppearance.AppCompat"/>
    <style name="TextAppearance.AppCompat.Body1" parent="Base.TextAppearance.AppCompat.Body1"/>
    <style name="TextAppearance.AppCompat.Body2" parent="Base.TextAppearance.AppCompat.Body2"/>
    <style name="TextAppearance.AppCompat.Button" parent="Base.TextAppearance.AppCompat.Button"/>
    <style name="TextAppearance.AppCompat.Caption" parent="Base.TextAppearance.AppCompat.Caption"/>
    <style name="TextAppearance.AppCompat.Display1" parent="Base.TextAppearance.AppCompat.Display1"/>
    <style name="TextAppearance.AppCompat.Display2" parent="Base.TextAppearance.AppCompat.Display2"/>
    <style name="TextAppearance.AppCompat.Display3" parent="Base.TextAppearance.AppCompat.Display3"/>
    <style name="TextAppearance.AppCompat.Display4" parent="Base.TextAppearance.AppCompat.Display4"/>
    <style name="TextAppearance.AppCompat.Headline" parent="Base.TextAppearance.AppCompat.Headline"/>
    <style name="TextAppearance.AppCompat.Inverse" parent="Base.TextAppearance.AppCompat.Inverse"/>
    <style name="TextAppearance.AppCompat.Large" parent="Base.TextAppearance.AppCompat.Large"/>
    <style name="TextAppearance.AppCompat.Large.Inverse" parent="Base.TextAppearance.AppCompat.Large.Inverse"/>
    <style name="TextAppearance.AppCompat.Light.SearchResult.Subtitle" parent="TextAppearance.AppCompat.SearchResult.Subtitle"/>
    <style name="TextAppearance.AppCompat.Light.SearchResult.Title" parent="TextAppearance.AppCompat.SearchResult.Title"/>
    <style name="TextAppearance.AppCompat.Light.Widget.PopupMenu.Large" parent="Base.TextAppearance.AppCompat.Light.Widget.PopupMenu.Large">
    </style>
    <style name="TextAppearance.AppCompat.Light.Widget.PopupMenu.Small" parent="Base.TextAppearance.AppCompat.Light.Widget.PopupMenu.Small">
    </style>
    <style name="TextAppearance.AppCompat.Medium" parent="Base.TextAppearance.AppCompat.Medium"/>
    <style name="TextAppearance.AppCompat.Medium.Inverse" parent="Base.TextAppearance.AppCompat.Medium.Inverse"/>
    <style name="TextAppearance.AppCompat.Menu" parent="Base.TextAppearance.AppCompat.Menu"/>
    <style name="TextAppearance.AppCompat.SearchResult.Subtitle" parent="Base.TextAppearance.AppCompat.SearchResult.Subtitle">
    </style>
    <style name="TextAppearance.AppCompat.SearchResult.Title" parent="Base.TextAppearance.AppCompat.SearchResult.Title">
    </style>
    <style name="TextAppearance.AppCompat.Small" parent="Base.TextAppearance.AppCompat.Small"/>
    <style name="TextAppearance.AppCompat.Small.Inverse" parent="Base.TextAppearance.AppCompat.Small.Inverse"/>
    <style name="TextAppearance.AppCompat.Subhead" parent="Base.TextAppearance.AppCompat.Subhead"/>
    <style name="TextAppearance.AppCompat.Subhead.Inverse" parent="Base.TextAppearance.AppCompat.Subhead.Inverse"/>
    <style name="TextAppearance.AppCompat.Title" parent="Base.TextAppearance.AppCompat.Title"/>
    <style name="TextAppearance.AppCompat.Title.Inverse" parent="Base.TextAppearance.AppCompat.Title.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Menu" parent="Base.TextAppearance.AppCompat.Widget.ActionBar.Menu">
    </style>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Subtitle" parent="Base.TextAppearance.AppCompat.Widget.ActionBar.Subtitle"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse" parent="Base.TextAppearance.AppCompat.Widget.ActionBar.Subtitle.Inverse">
    </style>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Title" parent="Base.TextAppearance.AppCompat.Widget.ActionBar.Title"/>
    <style name="TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse" parent="Base.TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse">
    </style>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Subtitle" parent="Base.TextAppearance.AppCompat.Widget.ActionMode.Subtitle">
    </style>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Subtitle.Inverse" parent="TextAppearance.AppCompat.Widget.ActionMode.Subtitle"/>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Title" parent="Base.TextAppearance.AppCompat.Widget.ActionMode.Title">
    </style>
    <style name="TextAppearance.AppCompat.Widget.ActionMode.Title.Inverse" parent="TextAppearance.AppCompat.Widget.ActionMode.Title"/>
    <style name="TextAppearance.AppCompat.Widget.Button" parent="Base.TextAppearance.AppCompat.Widget.Button"/>
    <style name="TextAppearance.AppCompat.Widget.Button.Inverse" parent="Base.TextAppearance.AppCompat.Widget.Button.Inverse"/>
    <style name="TextAppearance.AppCompat.Widget.DropDownItem" parent="Base.TextAppearance.AppCompat.Widget.DropDownItem">
    </style>
    <style name="TextAppearance.AppCompat.Widget.PopupMenu.Large" parent="Base.TextAppearance.AppCompat.Widget.PopupMenu.Large">
    </style>
    <style name="TextAppearance.AppCompat.Widget.PopupMenu.Small" parent="Base.TextAppearance.AppCompat.Widget.PopupMenu.Small">
    </style>
    <style name="TextAppearance.AppCompat.Widget.Switch" parent="Base.TextAppearance.AppCompat.Widget.Switch"/>
    <style name="TextAppearance.AppCompat.Widget.TextView.SpinnerItem" parent="Base.TextAppearance.AppCompat.Widget.TextView.SpinnerItem"/>
    <style name="TextAppearance.Design.CollapsingToolbar.Expanded" parent="TextAppearance.AppCompat.Display1">
        <item name="android:textColor">?android:attr/textColorPrimary</item>
    </style>
    <style name="TextAppearance.Design.Counter" parent="TextAppearance.AppCompat.Caption"/>
    <style name="TextAppearance.Design.Counter.Overflow" parent="TextAppearance.AppCompat.Caption">
        <item name="android:textColor">?attr/textColorError</item>
    </style>
    <style name="TextAppearance.Design.Error" parent="TextAppearance.AppCompat.Caption">
        <item name="android:textColor">?attr/textColorError</item>
    </style>
    <style name="TextAppearance.Design.Hint" parent="TextAppearance.AppCompat.Caption">
        <item name="android:textColor">?attr/colorControlActivated</item>
    </style>
    <style name="TextAppearance.Design.Snackbar.Message" parent="android:TextAppearance">
        <item name="android:textSize">@dimen/design_snackbar_text_size</item>
        <item name="android:textColor">?android:textColorPrimary</item>
    </style>
    <style name="TextAppearance.Design.Tab" parent="TextAppearance.AppCompat.Button">
        <item name="android:textSize">@dimen/design_tab_text_size</item>
        <item name="android:textColor">?android:textColorSecondary</item>
        <item name="textAllCaps">true</item>
    </style>
    <style name="TextAppearance.StatusBar.EventContent" parent=""/>
    <style name="TextAppearance.StatusBar.EventContent.Info" parent=""/>
    <style name="TextAppearance.StatusBar.EventContent.Line2" parent=""/>
    <style name="TextAppearance.StatusBar.EventContent.Time" parent=""/>
    <style name="TextAppearance.StatusBar.EventContent.Title" parent=""/>
    <style name="TextAppearance.Widget.AppCompat.ExpandedMenu.Item" parent="Base.TextAppearance.Widget.AppCompat.ExpandedMenu.Item">
    </style>
    <style name="TextAppearance.Widget.AppCompat.Toolbar.Subtitle" parent="Base.TextAppearance.Widget.AppCompat.Toolbar.Subtitle">
    </style>
    <style name="TextAppearance.Widget.AppCompat.Toolbar.Title" parent="Base.TextAppearance.Widget.AppCompat.Toolbar.Title">
    </style>
    <style name="Theme.AppCompat" parent="Base.Theme.AppCompat"/>
    <style name="Theme.AppCompat.CompactMenu" parent="Base.Theme.AppCompat.CompactMenu"/>
    <style name="Theme.AppCompat.DayNight" parent="Theme.AppCompat.Light"/>
    <style name="Theme.AppCompat.DayNight.DarkActionBar" parent="Theme.AppCompat.Light.DarkActionBar"/>
    <style name="Theme.AppCompat.DayNight.Dialog" parent="Theme.AppCompat.Light.Dialog"/>
    <style name="Theme.AppCompat.DayNight.Dialog.Alert" parent="Theme.AppCompat.Light.Dialog.Alert"/>
    <style name="Theme.AppCompat.DayNight.Dialog.MinWidth" parent="Theme.AppCompat.Light.Dialog.MinWidth"/>
    <style name="Theme.AppCompat.DayNight.DialogWhenLarge" parent="Theme.AppCompat.Light.DialogWhenLarge"/>
    <style name="Theme.AppCompat.DayNight.NoActionBar" parent="Theme.AppCompat.Light.NoActionBar"/>
    <style name="Theme.AppCompat.Dialog" parent="Base.Theme.AppCompat.Dialog"/>
    <style name="Theme.AppCompat.Dialog.Alert" parent="Base.Theme.AppCompat.Dialog.Alert"/>
    <style name="Theme.AppCompat.Dialog.MinWidth" parent="Base.Theme.AppCompat.Dialog.MinWidth"/>
    <style name="Theme.AppCompat.DialogWhenLarge" parent="Base.Theme.AppCompat.DialogWhenLarge">
    </style>
    <style name="Theme.AppCompat.Light" parent="Base.Theme.AppCompat.Light"/>
    <style name="Theme.AppCompat.Light.DarkActionBar" parent="Base.Theme.AppCompat.Light.DarkActionBar"/>
    <style name="Theme.AppCompat.Light.Dialog" parent="Base.Theme.AppCompat.Light.Dialog"/>
    <style name="Theme.AppCompat.Light.Dialog.Alert" parent="Base.Theme.AppCompat.Light.Dialog.Alert"/>
    <style name="Theme.AppCompat.Light.Dialog.MinWidth" parent="Base.Theme.AppCompat.Light.Dialog.MinWidth"/>
    <style name="Theme.AppCompat.Light.DialogWhenLarge" parent="Base.Theme.AppCompat.Light.DialogWhenLarge">
    </style>
    <style name="Theme.AppCompat.Light.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>
    <style name="Theme.AppCompat.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>
    <style name="Theme.Design" parent="Theme.AppCompat">
        <item name="textColorError">@color/design_textinput_error_color_dark</item>
    </style>
    <style name="Theme.Design.BottomSheetDialog" parent="Theme.AppCompat.Dialog">
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:windowAnimationStyle">@style/Animation.Design.BottomSheetDialog</item>
        <item name="bottomSheetStyle">@style/Widget.Design.BottomSheet.Modal</item>
    </style>
    <style name="Theme.Design.Light" parent="Theme.AppCompat.Light">
        <item name="textColorError">@color/design_textinput_error_color_light</item>
    </style>
    <style name="Theme.Design.Light.BottomSheetDialog" parent="Theme.AppCompat.Light.Dialog">
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:windowAnimationStyle">@style/Animation.Design.BottomSheetDialog</item>
        <item name="bottomSheetStyle">@style/Widget.Design.BottomSheet.Modal</item>
    </style>
    <style name="Theme.Design.Light.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>
    <style name="Theme.Design.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>
    <style name="ThemeOverlay.AppCompat" parent="Base.ThemeOverlay.AppCompat"/>
    <style name="ThemeOverlay.AppCompat.ActionBar" parent="Base.ThemeOverlay.AppCompat.ActionBar"/>
    <style name="ThemeOverlay.AppCompat.Dark" parent="Base.ThemeOverlay.AppCompat.Dark"/>
    <style name="ThemeOverlay.AppCompat.Dark.ActionBar" parent="Base.ThemeOverlay.AppCompat.Dark.ActionBar"/>
    <style name="ThemeOverlay.AppCompat.Light" parent="Base.ThemeOverlay.AppCompat.Light"/>
    <style name="Widget.AppCompat.ActionBar" parent="Base.Widget.AppCompat.ActionBar">
    </style>
    <style name="Widget.AppCompat.ActionBar.Solid" parent="Base.Widget.AppCompat.ActionBar.Solid">
    </style>
    <style name="Widget.AppCompat.ActionBar.TabBar" parent="Base.Widget.AppCompat.ActionBar.TabBar">
    </style>
    <style name="Widget.AppCompat.ActionBar.TabText" parent="Base.Widget.AppCompat.ActionBar.TabText">
    </style>
    <style name="Widget.AppCompat.ActionBar.TabView" parent="Base.Widget.AppCompat.ActionBar.TabView">
    </style>
    <style name="Widget.AppCompat.ActionButton" parent="Base.Widget.AppCompat.ActionButton"/>
    <style name="Widget.AppCompat.ActionButton.CloseMode" parent="Base.Widget.AppCompat.ActionButton.CloseMode"/>
    <style name="Widget.AppCompat.ActionButton.Overflow" parent="Base.Widget.AppCompat.ActionButton.Overflow"/>
    <style name="Widget.AppCompat.ActionMode" parent="Base.Widget.AppCompat.ActionMode">
    </style>
    <style name="Widget.AppCompat.ActivityChooserView" parent="Base.Widget.AppCompat.ActivityChooserView">
    </style>
    <style name="Widget.AppCompat.AutoCompleteTextView" parent="Base.Widget.AppCompat.AutoCompleteTextView">
    </style>
    <style name="Widget.AppCompat.Button" parent="Base.Widget.AppCompat.Button"/>
    <style name="Widget.AppCompat.Button.Borderless" parent="Base.Widget.AppCompat.Button.Borderless"/>
    <style name="Widget.AppCompat.Button.Borderless.Colored" parent="Base.Widget.AppCompat.Button.Borderless.Colored"/>
    <style name="Widget.AppCompat.Button.ButtonBar.AlertDialog" parent="Base.Widget.AppCompat.Button.ButtonBar.AlertDialog"/>
    <style name="Widget.AppCompat.Button.Colored" parent="Base.Widget.AppCompat.Button.Colored"/>
    <style name="Widget.AppCompat.Button.Small" parent="Base.Widget.AppCompat.Button.Small"/>
    <style name="Widget.AppCompat.ButtonBar" parent="Base.Widget.AppCompat.ButtonBar"/>
    <style name="Widget.AppCompat.ButtonBar.AlertDialog" parent="Base.Widget.AppCompat.ButtonBar.AlertDialog"/>
    <style name="Widget.AppCompat.CompoundButton.CheckBox" parent="Base.Widget.AppCompat.CompoundButton.CheckBox"/>
    <style name="Widget.AppCompat.CompoundButton.RadioButton" parent="Base.Widget.AppCompat.CompoundButton.RadioButton"/>
    <style name="Widget.AppCompat.CompoundButton.Switch" parent="Base.Widget.AppCompat.CompoundButton.Switch"/>
    <style name="Widget.AppCompat.DrawerArrowToggle" parent="Base.Widget.AppCompat.DrawerArrowToggle">
        <item name="color">?attr/colorControlNormal</item>
    </style>
    <style name="Widget.AppCompat.DropDownItem.Spinner" parent="RtlOverlay.Widget.AppCompat.Search.DropDown.Text"/>
    <style name="Widget.AppCompat.EditText" parent="Base.Widget.AppCompat.EditText"/>
    <style name="Widget.AppCompat.ImageButton" parent="Base.Widget.AppCompat.ImageButton"/>
    <style name="Widget.AppCompat.Light.ActionBar" parent="Base.Widget.AppCompat.Light.ActionBar">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.Solid" parent="Base.Widget.AppCompat.Light.ActionBar.Solid">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.Solid.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabBar" parent="Base.Widget.AppCompat.Light.ActionBar.TabBar">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.TabBar.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionBar.TabText" parent="Base.Widget.AppCompat.Light.ActionBar.TabText">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.TabText.Inverse" parent="Base.Widget.AppCompat.Light.ActionBar.TabText.Inverse">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.TabView" parent="Base.Widget.AppCompat.Light.ActionBar.TabView">
    </style>
    <style name="Widget.AppCompat.Light.ActionBar.TabView.Inverse"/>
    <style name="Widget.AppCompat.Light.ActionButton" parent="Widget.AppCompat.ActionButton"/>
    <style name="Widget.AppCompat.Light.ActionButton.CloseMode" parent="Widget.AppCompat.ActionButton.CloseMode"/>
    <style name="Widget.AppCompat.Light.ActionButton.Overflow" parent="Widget.AppCompat.ActionButton.Overflow"/>
    <style name="Widget.AppCompat.Light.ActionMode.Inverse" parent="Widget.AppCompat.ActionMode"/>
    <style name="Widget.AppCompat.Light.ActivityChooserView" parent="Widget.AppCompat.ActivityChooserView"/>
    <style name="Widget.AppCompat.Light.AutoCompleteTextView" parent="Widget.AppCompat.AutoCompleteTextView"/>
    <style name="Widget.AppCompat.Light.DropDownItem.Spinner" parent="Widget.AppCompat.DropDownItem.Spinner"/>
    <style name="Widget.AppCompat.Light.ListPopupWindow" parent="Widget.AppCompat.ListPopupWindow"/>
    <style name="Widget.AppCompat.Light.ListView.DropDown" parent="Widget.AppCompat.ListView.DropDown"/>
    <style name="Widget.AppCompat.Light.PopupMenu" parent="Base.Widget.AppCompat.Light.PopupMenu">
    </style>
    <style name="Widget.AppCompat.Light.PopupMenu.Overflow" parent="Base.Widget.AppCompat.Light.PopupMenu.Overflow">
    </style>
    <style name="Widget.AppCompat.Light.SearchView" parent="Widget.AppCompat.SearchView"/>
    <style name="Widget.AppCompat.Light.Spinner.DropDown.ActionBar" parent="Widget.AppCompat.Spinner.DropDown.ActionBar"/>
    <style name="Widget.AppCompat.ListPopupWindow" parent="Base.Widget.AppCompat.ListPopupWindow">
    </style>
    <style name="Widget.AppCompat.ListView" parent="Base.Widget.AppCompat.ListView"/>
    <style name="Widget.AppCompat.ListView.DropDown" parent="Base.Widget.AppCompat.ListView.DropDown"/>
    <style name="Widget.AppCompat.ListView.Menu" parent="Base.Widget.AppCompat.ListView.Menu">
    </style>
    <style name="Widget.AppCompat.PopupMenu" parent="Base.Widget.AppCompat.PopupMenu">
    </style>
    <style name="Widget.AppCompat.PopupMenu.Overflow" parent="Base.Widget.AppCompat.PopupMenu.Overflow">
    </style>
    <style name="Widget.AppCompat.PopupWindow" parent="Base.Widget.AppCompat.PopupWindow">
    </style>
    <style name="Widget.AppCompat.ProgressBar" parent="Base.Widget.AppCompat.ProgressBar">
    </style>
    <style name="Widget.AppCompat.ProgressBar.Horizontal" parent="Base.Widget.AppCompat.ProgressBar.Horizontal">
    </style>
    <style name="Widget.AppCompat.RatingBar" parent="Base.Widget.AppCompat.RatingBar"/>
    <style name="Widget.AppCompat.RatingBar.Indicator" parent="Base.Widget.AppCompat.RatingBar.Indicator"/>
    <style name="Widget.AppCompat.RatingBar.Small" parent="Base.Widget.AppCompat.RatingBar.Small"/>
    <style name="Widget.AppCompat.SearchView" parent="Base.Widget.AppCompat.SearchView"/>
    <style name="Widget.AppCompat.SearchView.ActionBar" parent="Base.Widget.AppCompat.SearchView.ActionBar"/>
    <style name="Widget.AppCompat.SeekBar" parent="Base.Widget.AppCompat.SeekBar"/>
    <style name="Widget.AppCompat.Spinner" parent="Base.Widget.AppCompat.Spinner"/>
    <style name="Widget.AppCompat.Spinner.DropDown"/>
    <style name="Widget.AppCompat.Spinner.DropDown.ActionBar"/>
    <style name="Widget.AppCompat.Spinner.Underlined" parent="Base.Widget.AppCompat.Spinner.Underlined"/>
    <style name="Widget.AppCompat.TextView.SpinnerItem" parent="Base.Widget.AppCompat.TextView.SpinnerItem"/>
    <style name="Widget.AppCompat.Toolbar" parent="Base.Widget.AppCompat.Toolbar"/>
    <style name="Widget.AppCompat.Toolbar.Button.Navigation" parent="Base.Widget.AppCompat.Toolbar.Button.Navigation"/>
    <style name="Widget.Design.AppBarLayout" parent="android:Widget">
        <item name="elevation">@dimen/design_appbar_elevation</item>
        <item name="android:background">?attr/colorPrimary</item>
    </style>
    <style name="Widget.Design.BottomSheet.Modal" parent="android:Widget">
        <item name="android:background">?android:attr/colorBackground</item>
        <item name="android:elevation">@dimen/design_bottom_sheet_modal_elevation</item>
        <item name="behavior_peekHeight">@dimen/design_bottom_sheet_modal_peek_height</item>
        <item name="behavior_hideable">true</item>
    </style>
    <style name="Widget.Design.CollapsingToolbar" parent="android:Widget">
        <item name="expandedTitleMargin">32dp</item>
        <item name="statusBarScrim">?attr/colorPrimaryDark</item>
    </style>
    <style name="Widget.Design.CoordinatorLayout" parent="android:Widget">
        <item name="statusBarBackground">?attr/colorPrimaryDark</item>
    </style>
    <style name="Widget.Design.FloatingActionButton" parent="android:Widget">
        <item name="android:background">@drawable/design_fab_background</item>
        <item name="backgroundTint">?attr/colorAccent</item>
        <item name="fabSize">normal</item>
        <item name="elevation">@dimen/design_fab_elevation</item>
        <item name="pressedTranslationZ">@dimen/design_fab_translation_z_pressed</item>
        <item name="rippleColor">?attr/colorControlHighlight</item>
        <item name="borderWidth">@dimen/design_fab_border_width</item>
    </style>
    <style name="Widget.Design.NavigationView" parent="">
        <item name="elevation">@dimen/design_navigation_elevation</item>
        <item name="android:background">?android:attr/windowBackground</item>
        <item name="android:fitsSystemWindows">true</item>
        <item name="android:maxWidth">@dimen/design_navigation_max_width</item>
    </style>
    <style name="Widget.Design.ScrimInsetsFrameLayout" parent="">
        <item name="insetForeground">#4000</item>
    </style>
    <style name="Widget.Design.Snackbar" parent="android:Widget">
        <item name="android:theme">@style/ThemeOverlay.AppCompat.Dark</item>
        <item name="android:minWidth">@dimen/design_snackbar_min_width</item>
        <item name="android:maxWidth">@dimen/design_snackbar_max_width</item>
        <item name="android:background">@drawable/design_snackbar_background</item>
        <item name="android:paddingLeft">@dimen/design_snackbar_padding_horizontal</item>
        <item name="android:paddingRight">@dimen/design_snackbar_padding_horizontal</item>
        <item name="elevation">@dimen/design_snackbar_elevation</item>
        <item name="maxActionInlineWidth">@dimen/design_snackbar_action_inline_max_width</item>
    </style>
    <style name="Widget.Design.TabLayout" parent="Base.Widget.Design.TabLayout">
        <item name="tabGravity">fill</item>
        <item name="tabMode">fixed</item>
    </style>
    <style name="Widget.Design.TextInputLayout" parent="android:Widget">
        <item name="hintTextAppearance">@style/TextAppearance.Design.Hint</item>
        <item name="errorTextAppearance">@style/TextAppearance.Design.Error</item>
        <item name="counterTextAppearance">@style/TextAppearance.Design.Counter</item>
        <item name="counterOverflowTextAppearance">@style/TextAppearance.Design.Counter.Overflow</item>
    </style>
</resources>